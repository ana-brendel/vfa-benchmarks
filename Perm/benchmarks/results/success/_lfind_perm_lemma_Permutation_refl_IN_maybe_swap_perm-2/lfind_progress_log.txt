File Information
- File name: Perm
- Original Directory: /home/anabrendel/lfind/vfa-benchmarks/Perm/benchmarks/perm_lemma_Permutation_refl_IN_maybe_swap_perm-2
- LFind Directory: /home/anabrendel/lfind/vfa-benchmarks/Perm/benchmarks/_lfind_perm_lemma_Permutation_refl_IN_maybe_swap_perm-2
- Namespace: vfa_benchmark
- Proof name: maybe_swap_perm
- Theorem: Theorem maybe_swap_perm: forall al : list nat, @Permutation nat al (maybe_swap al).
- Declarations: 
From lfind Require Import LFind.
Require Import Coq.Strings.String.

Proof Context
* Goal State: @Permutation nat (@cons nat a (@nil nat))
  (maybe_swap (@cons nat a (@nil nat)))

* Hypothesis:
a : nat

* Types:
Set
Prop
nat
list nat

* Polymorphic Types:


* Variables:
a : nat

* Terms:
nat : Set
@cons nat a (@nil nat) : list nat
maybe_swap (@cons nat a (@nil nat)) : list nat
@Permutation nat (@cons nat a (@nil nat))
  (maybe_swap (@cons nat a (@nil nat))) : Prop
a : nat
@nil nat : list nat

* Functions:
maybe_swap  : forall _ : list nat, list nat
@nil  : forall A : Type, list A
@cons  : forall (A : Type) (_ : A) (_ : list A), list A
Permutation  : forall (A : Type) (_ : list A) (_ : list A), Prop

<---GENERALIZATION--->
Time elapsed: 3 seconds
Generalized Variables:
lf3 : list nat = @nil nat
lf1 : list nat = maybe_swap (@cons nat a (@nil nat))
lf2 : list nat = @cons nat a (@nil nat)

Generalizations:
Lemma conj1: forall (lf2 : list nat) (lf1 : list nat), @Permutation nat lf2 lf1.
Lemma conj2: forall (lf1 : list nat) (a : nat) (lf3 : list nat), @Permutation nat (@cons nat a lf3) lf1.
Lemma conj3: forall (lf2 : list nat), @Permutation nat lf2 (maybe_swap lf2).
Lemma conj4: forall (a : nat) (lf3 : list nat), @Permutation nat (@cons nat a lf3) (maybe_swap (@cons nat a lf3)).
Lemma conj6: forall (lf1 : list nat) (a : nat), @Permutation nat (@cons nat a (@nil nat)) lf1.
Lemma conj8: forall (a : nat), @Permutation nat (@cons nat a (@nil nat))
  (maybe_swap (@cons nat a (@nil nat))).


<---VALIDITY CHECKS--->
Time elapsed: 19 seconds
Valid:
Lemma conj8: forall (a : nat), @Permutation nat (@cons nat a (@nil nat))
  (maybe_swap (@cons nat a (@nil nat))).
Lemma conj4: forall (a : nat) (lf3 : list nat), @Permutation nat (@cons nat a lf3) (maybe_swap (@cons nat a lf3)).
Lemma conj3: forall (lf2 : list nat), @Permutation nat lf2 (maybe_swap lf2).

Invalid:
Lemma conj6: forall (lf1 : list nat) (a : nat), @Permutation nat (@cons nat a (@nil nat)) lf1.
Lemma conj2: forall (lf1 : list nat) (a : nat) (lf3 : list nat), @Permutation nat (@cons nat a lf3) lf1.
Lemma conj1: forall (lf2 : list nat) (lf1 : list nat), @Permutation nat lf2 lf1.

<---ADD IMPLICATIONS--->
Time elapsed: 19 seconds
Generalizations:
Lemma conj6: forall (lf1 : list nat) (a : nat), @Permutation nat (@cons nat a (@nil nat)) lf1.
Lemma conj2: forall (lf1 : list nat) (a : nat) (lf3 : list nat), @Permutation nat (@cons nat a lf3) lf1.
Lemma conj1: forall (lf2 : list nat) (lf1 : list nat), @Permutation nat lf2 lf1.


<---VALIDITY CHECKS--->
Time elapsed: 25 seconds
Valid:

Invalid:
Lemma conj1: forall (lf2 : list nat) (lf1 : list nat), @Permutation nat lf2 lf1.
Lemma conj2: forall (lf1 : list nat) (a : nat) (lf3 : list nat), @Permutation nat (@cons nat a lf3) lf1.
Lemma conj6: forall (lf1 : list nat) (a : nat), @Permutation nat (@cons nat a (@nil nat)) lf1.


<---CREATE SKETCHES--->
Time elapsed: 25 seconds
Sketches:
Sketch conj2_sketch0 : @Permutation nat (##hole##) lf1
Sketch conj2_term_sketch0 : @eq (list nat) (@cons nat a lf3) (##hole##)
Sketch conj6_sketch0 : @Permutation nat (##hole##) lf1
Sketch conj6_sketch1 : @Permutation nat (@cons nat a (##hole##)) lf1
Sketch conj6_term_sketch0 : @eq (list nat) (@cons nat a (@nil nat)) (##hole##)
Sketch conj6_term_sketch1 : @eq (list nat) (@nil nat) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 35 seconds
Problems per Sketch:
Sketch conj2_term_sketch0 --> Problem  synth_2
Sketch conj6_sketch1 --> Problem  synth_3
Sketch conj6_term_sketch1 --> Problem  synth_5
Sketch conj6_sketch0 --> Problem  synth_1
Sketch conj2_sketch0 --> Problem  synth_1
Sketch conj6_term_sketch0 --> Problem  synth_4


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 81 seconds

Problem: synth_3
 @nil nat

Problem: synth_5
 @nil nat

Problem: synth_4
 @cons nat a (@nil nat)

Problem: synth_1
 maybe_swap (maybe_swap (maybe_swap (maybe_swap (maybe_swap lf1))))
 maybe_swap (maybe_swap (maybe_swap (maybe_swap lf1)))
 maybe_swap (maybe_swap (maybe_swap lf1))
 maybe_swap (maybe_swap lf1)
 maybe_swap lf1
 lf1

Problem: synth_2
 @cons nat a (maybe_swap (maybe_swap lf3))
 match maybe_swap lf3 with | nil => @cons nat a (maybe_swap lf3) | cons b ar => if match a with | O => false | S m' => Nat.leb b m' end then @cons nat b (@cons nat a ar) else @cons nat a (@cons nat b ar) end
 match lf3 with | nil => @cons nat a lf3 | cons b ar => if match a with | O => false | S m' => Nat.leb b m' end then @cons nat b (@cons nat a ar) else @cons nat a (@cons nat b ar) end
 @cons nat a (maybe_swap lf3)
 @cons nat a lf3
 @cons nat a (@nil nat)

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 81 seconds
Lemmas:
Lemma candidate_1: forall (a : nat), @Permutation nat (@cons nat a (@nil nat))   (maybe_swap (@cons nat a (@nil nat))).
Lemma candidate_2: forall (lf3 : list nat) (a : nat), @Permutation nat (@cons nat a lf3) (maybe_swap (@cons nat a lf3)).
Lemma candidate_3: forall (lf2 : list nat), @Permutation nat lf2 (maybe_swap lf2).
Lemma candidate_4: forall (lf1 : list nat), @Permutation nat   (maybe_swap (maybe_swap (maybe_swap (maybe_swap (maybe_swap lf1))))) lf1.
Lemma candidate_5: forall (lf1 : list nat), @Permutation nat (maybe_swap (maybe_swap (maybe_swap (maybe_swap lf1)))) lf1.
Lemma candidate_6: forall (lf1 : list nat), @Permutation nat (maybe_swap (maybe_swap (maybe_swap lf1))) lf1.
Lemma candidate_7: forall (lf1 : list nat), @Permutation nat (maybe_swap (maybe_swap lf1)) lf1.
Lemma candidate_8: forall (lf1 : list nat), @Permutation nat (maybe_swap lf1) lf1.
Lemma candidate_9: forall (lf1 : list nat), @Permutation nat (lf1) lf1.
Lemma candidate_10: forall (lf3 : list nat) (a : nat), @eq (list nat) (@cons nat a lf3) (@cons nat a (maybe_swap (maybe_swap lf3))).
Lemma candidate_11: forall (lf3 : list nat) (a : nat), @eq (list nat) (@cons nat a lf3)   (match maybe_swap lf3 with | nil => @cons nat a (maybe_swap lf3) | cons b ar => if match a with | O => false | S m' => Nat.leb b m' end then @cons nat b (@cons nat a ar) else @cons nat a (@cons nat b ar) end).
Lemma candidate_12: forall (lf3 : list nat) (a : nat), @eq (list nat) (@cons nat a lf3)   (match lf3 with | nil => @cons nat a lf3 | cons b ar => if match a with | O => false | S m' => Nat.leb b m' end then @cons nat b (@cons nat a ar) else @cons nat a (@cons nat b ar) end).
Lemma candidate_13: forall (lf3 : list nat) (a : nat), @eq (list nat) (@cons nat a lf3) (@cons nat a (maybe_swap lf3)).
Lemma candidate_14: forall (lf3 : list nat) (a : nat), @eq (list nat) (@cons nat a lf3) (@cons nat a lf3).
Lemma candidate_15: forall (lf3 : list nat) (a : nat), @eq (list nat) (@cons nat a lf3) (@cons nat a (@nil nat)).
Lemma candidate_16: forall (lf1 : list nat), @Permutation nat   (maybe_swap (maybe_swap (maybe_swap (maybe_swap (maybe_swap lf1))))) lf1.
Lemma candidate_17: forall (lf1 : list nat), @Permutation nat (maybe_swap (maybe_swap (maybe_swap (maybe_swap lf1)))) lf1.
Lemma candidate_18: forall (lf1 : list nat), @Permutation nat (maybe_swap (maybe_swap (maybe_swap lf1))) lf1.
Lemma candidate_19: forall (lf1 : list nat), @Permutation nat (maybe_swap (maybe_swap lf1)) lf1.
Lemma candidate_20: forall (lf1 : list nat), @Permutation nat (maybe_swap lf1) lf1.
Lemma candidate_21: forall (lf1 : list nat), @Permutation nat (lf1) lf1.
Lemma candidate_22: forall (a : nat) (lf1 : list nat), @Permutation nat (@cons nat a (@nil nat)) lf1.
Lemma candidate_23: forall (a : nat), @eq (list nat) (@cons nat a (@nil nat)) (@cons nat a (@nil nat)).
Lemma candidate_24: @eq (list nat) (@nil nat) (@nil nat).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 124 seconds
Duplicates removed: 7
Filtered by Quickchick: 6
Filtered by script: 7
Remaining: 4

Lemmas: 
Lemma candidate_7: forall (lf1 : list nat), @Permutation nat (maybe_swap (maybe_swap lf1)) lf1.
Lemma candidate_6: forall (lf1 : list nat), @Permutation nat (maybe_swap (maybe_swap (maybe_swap lf1))) lf1.
Lemma candidate_5: forall (lf1 : list nat), @Permutation nat (maybe_swap (maybe_swap (maybe_swap (maybe_swap lf1)))) lf1.
Lemma candidate_4: forall (lf1 : list nat), @Permutation nat   (maybe_swap (maybe_swap (maybe_swap (maybe_swap (maybe_swap lf1))))) lf1.