File Information
- File name: Perm
- Original Directory: /home/anabrendel/lfind/vfa-benchmarks/Perm/benchmarks/sources/perm_lemma_iff_reflect_IN_ble_reflect
- LFind Directory: /home/anabrendel/lfind/vfa-benchmarks/Perm/benchmarks/sources/_lfind_perm_lemma_iff_reflect_IN_ble_reflect
- Namespace: vfa_benchmark
- Proof name: ble_reflect
- Theorem: Theorem ble_reflect: forall x0 y0 : nat, reflect (le x0 y0) (Nat.leb x0 y0).
- Declarations: 
From lfind Require Import LFind.
Require Import Coq.Strings.String.

Proof Context
* Goal State: reflect (le x y) (Nat.leb x y)

* Hypothesis:
x : nat
y : nat

* Types:
reflect (le x y) (Nat.leb x y)
Set
Prop
bool
nat

* Polymorphic Types:
reflect (le x y) (Nat.leb x y)

* Variables:
x : nat
y : nat

* Terms:
Nat.leb x y : bool
nat : Set
le x y : Prop
x : nat
y : nat
reflect (le x y) (Nat.leb x y) : Set

* Functions:
reflect  : forall (_ : Prop) (_ : bool), Set
le  : forall (_ : nat) (_ : nat), Prop
Nat.leb  : forall (_ : nat) (_ : nat), bool

<---GENERALIZATION--->
Time elapsed: 0 seconds
Generalized Variables:
lf1 : bool = Nat.leb x y

Generalizations:
Lemma conj1: forall (x : nat) (lf1 : bool) (y : nat), reflect (le x y) lf1.
Lemma conj2: forall (x : nat) (y : nat), reflect (le x y) (Nat.leb x y).


<---VALIDITY CHECKS--->
Time elapsed: 0 seconds
Valid:

Invalid:
Lemma conj1: forall (x : nat) (lf1 : bool) (y : nat), reflect (le x y) lf1.
Lemma conj2: forall (x : nat) (y : nat), reflect (le x y) (Nat.leb x y).

<---ADD IMPLICATIONS--->
Time elapsed: 0 seconds
Generalizations:
Lemma conj1: forall (x : nat) (lf1 : bool) (y : nat), reflect (le x y) lf1.
Lemma conj2: forall (x : nat) (y : nat), reflect (le x y) (Nat.leb x y).


<---VALIDITY CHECKS--->
Time elapsed: 0 seconds
Valid:

Invalid:
Lemma conj1: forall (x : nat) (lf1 : bool) (y : nat), reflect (le x y) lf1.
Lemma conj2: forall (x : nat) (y : nat), reflect (le x y) (Nat.leb x y).


<---CREATE SKETCHES--->
Time elapsed: 1 seconds
Sketches:
Sketch conj1_sketch0 : (##hole##)
Sketch conj1_term_sketch0 : @eq Set (reflect (le x y) lf1) (##hole##)
Sketch conj2_sketch0 : reflect (le x y) (##hole##)
Sketch conj2_sketch1 : (##hole##)
Sketch conj2_term_sketch0 : @eq bool (Nat.leb x y) (##hole##)
Sketch conj2_term_sketch1 : @eq Set (reflect (le x y) (Nat.leb x y)) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 1 seconds
Problems per Sketch:
Sketch conj2_term_sketch0 --> Problem  synth_3
Sketch conj1_sketch0 --> Problem  synth_1
Sketch conj2_term_sketch1 --> Problem  synth_4
Sketch conj2_sketch1 --> Problem  synth_1
Sketch conj1_term_sketch0 --> Problem  synth_2
Sketch conj2_sketch0 --> Problem  synth_3


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 3 seconds

Problem: synth_3
 Nat.leb x x
 Nat.leb y O
 Nat.leb x O
 true
 false

Problem: synth_4
 reflect (le x x) false
 reflect (le O x) false
 reflect (le y O) false
 reflect (le x O) false
 reflect (le O O) false

Problem: synth_1
 reflect (le (S O) O) false
 reflect (le O (S O)) true
 reflect (le O O) true
 reflect (le O (S O)) false
 reflect (le O O) false

Problem: synth_2
 reflect (le x x) false
 reflect (le O x) false
 reflect (le y O) false
 reflect (le x O) false
 reflect (le O O) false

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 3 seconds
Lemmas:
Lemma candidate_1: (reflect (le (S O) O) false).
Lemma candidate_2: (reflect (le O (S O)) true).
Lemma candidate_3: (reflect (le O O) true).
Lemma candidate_4: (reflect (le O (S O)) false).
Lemma candidate_5: (reflect (le O O) false).
Lemma candidate_6: forall (y : nat) (lf1 : bool) (x : nat), @eq Set (reflect (le x y) lf1) (reflect (le x x) false).
Lemma candidate_7: forall (y : nat) (lf1 : bool) (x : nat), @eq Set (reflect (le x y) lf1) (reflect (le O x) false).
Lemma candidate_8: forall (y : nat) (lf1 : bool) (x : nat), @eq Set (reflect (le x y) lf1) (reflect (le y O) false).
Lemma candidate_9: forall (y : nat) (lf1 : bool) (x : nat), @eq Set (reflect (le x y) lf1) (reflect (le x O) false).
Lemma candidate_10: forall (y : nat) (lf1 : bool) (x : nat), @eq Set (reflect (le x y) lf1) (reflect (le O O) false).
Lemma candidate_11: forall (y : nat) (x : nat), reflect (le x y) (Nat.leb x x).
Lemma candidate_12: forall (y : nat) (x : nat), reflect (le x y) (Nat.leb y O).
Lemma candidate_13: forall (y : nat) (x : nat), reflect (le x y) (Nat.leb x O).
Lemma candidate_14: forall (y : nat) (x : nat), reflect (le x y) (true).
Lemma candidate_15: forall (y : nat) (x : nat), reflect (le x y) (false).
Lemma candidate_16: (reflect (le (S O) O) false).
Lemma candidate_17: (reflect (le O (S O)) true).
Lemma candidate_18: (reflect (le O O) true).
Lemma candidate_19: (reflect (le O (S O)) false).
Lemma candidate_20: (reflect (le O O) false).
Lemma candidate_21: forall (y : nat) (x : nat), @eq bool (Nat.leb x y) (Nat.leb x x).
Lemma candidate_22: forall (y : nat) (x : nat), @eq bool (Nat.leb x y) (Nat.leb y O).
Lemma candidate_23: forall (y : nat) (x : nat), @eq bool (Nat.leb x y) (Nat.leb x O).
Lemma candidate_24: forall (y : nat) (x : nat), @eq bool (Nat.leb x y) (true).
Lemma candidate_25: forall (y : nat) (x : nat), @eq bool (Nat.leb x y) (false).
Lemma candidate_26: forall (y : nat) (x : nat), @eq Set (reflect (le x y) (Nat.leb x y)) (reflect (le x x) false).
Lemma candidate_27: forall (y : nat) (x : nat), @eq Set (reflect (le x y) (Nat.leb x y)) (reflect (le O x) false).
Lemma candidate_28: forall (y : nat) (x : nat), @eq Set (reflect (le x y) (Nat.leb x y)) (reflect (le y O) false).
Lemma candidate_29: forall (y : nat) (x : nat), @eq Set (reflect (le x y) (Nat.leb x y)) (reflect (le x O) false).
Lemma candidate_30: forall (y : nat) (x : nat), @eq Set (reflect (le x y) (Nat.leb x y)) (reflect (le O O) false).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 38 seconds
Duplicates removed: 5
Filtered by Quickchick: 0
Filtered by script: 3
Remaining: 22

Lemmas: 
Lemma candidate_14: forall (y : nat) (x : nat), reflect (le x y) (true).
Lemma candidate_15: forall (y : nat) (x : nat), reflect (le x y) (false).
Lemma candidate_5: (reflect (le O O) false).
Lemma candidate_4: (reflect (le O (S O)) false).
Lemma candidate_24: forall (y : nat) (x : nat), @eq bool (Nat.leb x y) (true).
Lemma candidate_25: forall (y : nat) (x : nat), @eq bool (Nat.leb x y) (false).
Lemma candidate_13: forall (y : nat) (x : nat), reflect (le x y) (Nat.leb x O).
Lemma candidate_12: forall (y : nat) (x : nat), reflect (le x y) (Nat.leb y O).
Lemma candidate_11: forall (y : nat) (x : nat), reflect (le x y) (Nat.leb x x).
Lemma candidate_23: forall (y : nat) (x : nat), @eq bool (Nat.leb x y) (Nat.leb x O).
Lemma candidate_22: forall (y : nat) (x : nat), @eq bool (Nat.leb x y) (Nat.leb y O).
Lemma candidate_21: forall (y : nat) (x : nat), @eq bool (Nat.leb x y) (Nat.leb x x).
Lemma candidate_10: forall (y : nat) (lf1 : bool) (x : nat), @eq Set (reflect (le x y) lf1) (reflect (le O O) false).
Lemma candidate_9: forall (y : nat) (lf1 : bool) (x : nat), @eq Set (reflect (le x y) lf1) (reflect (le x O) false).
Lemma candidate_8: forall (y : nat) (lf1 : bool) (x : nat), @eq Set (reflect (le x y) lf1) (reflect (le y O) false).
Lemma candidate_7: forall (y : nat) (lf1 : bool) (x : nat), @eq Set (reflect (le x y) lf1) (reflect (le O x) false).
Lemma candidate_6: forall (y : nat) (lf1 : bool) (x : nat), @eq Set (reflect (le x y) lf1) (reflect (le x x) false).
Lemma candidate_30: forall (y : nat) (x : nat), @eq Set (reflect (le x y) (Nat.leb x y)) (reflect (le O O) false).
Lemma candidate_29: forall (y : nat) (x : nat), @eq Set (reflect (le x y) (Nat.leb x y)) (reflect (le x O) false).
Lemma candidate_28: forall (y : nat) (x : nat), @eq Set (reflect (le x y) (Nat.leb x y)) (reflect (le y O) false).
Lemma candidate_27: forall (y : nat) (x : nat), @eq Set (reflect (le x y) (Nat.leb x y)) (reflect (le O x) false).
Lemma candidate_26: forall (y : nat) (x : nat), @eq Set (reflect (le x y) (Nat.leb x y)) (reflect (le x x) false).