File Information
- File name: Selection
- Original Directory: /home/anabrendel/lfind/vfa-benchmarks/Selection/benchmarks/sources/selection_lemma_Forall_forall_IN_le_all__le_one
- LFind Directory: /home/anabrendel/lfind/vfa-benchmarks/Selection/benchmarks/sources/_lfind_selection_lemma_Forall_forall_IN_le_all__le_one
- Namespace: vfa_benchmark
- Proof name: le_all__le_one
- Theorem: Theorem le_all__le_one: forall (lst : list nat) (y0 n0 : nat) (_ : le_all y0 lst)
  (_ : @In nat n0 lst), le y0 n0.
- Declarations: 
From lfind Require Import LFind.
From VFA Require Import Perm.

Proof Context
* Goal State: le y n

* Hypothesis:
x0 : nat
H0 : @In nat n l
H2 : @ex (list nat)
  (fun j : list nat =>
   @eq (prod nat (list nat)) (select n (@cons nat x l))
     (@pair nat (list nat) x0 j))
H1 : @Forall nat (fun y0 : nat => le y y0) l
x : nat
H : le y x
x1 : list nat
y : nat
e : @ex nat
  (fun i : nat =>
   @ex (list nat)
     (fun j : list nat =>
      @eq (prod nat (list nat)) (select n (@cons nat x l))
        (@pair nat (list nat) i j)))
p : forall (y0 : nat) (r : list nat)
  (_ : @eq (prod nat (list nat)) (select n (@cons nat x l))
         (@pair nat (list nat) y0 r)),
@Permutation nat (@cons nat n (@cons nat x l)) (@cons nat y0 r)
H3 : @Permutation nat (@cons nat n (@cons nat x l)) (@cons nat x0 x1)
l : list nat
n : nat

* Types:
Set
Prop
forall _ : list nat, Prop
nat
forall _ : nat, Prop
prod nat (list nat)
list nat

* Polymorphic Types:
list nat
prod nat (list nat)

* Variables:
x0 : nat
x : nat
x1 : list nat
y : nat
n : nat
l : list nat

* Terms:
list nat : Set
prod nat (list nat) : Set
x0 : nat
@eq (prod nat (list nat)) (select n (@cons nat x l))
  (@pair nat (list nat) _UNBOUND_REL_2 _UNBOUND_REL_1) : Prop
x : nat
fun i : nat =>
@ex (list nat)
  (fun j : list nat =>
   @eq (prod nat (list nat)) (select n (@cons nat x l))
     (@pair nat (list nat) i j)) : forall _ : nat, Prop
@Permutation nat (@cons nat n (@cons nat x l))
  (@cons nat _UNBOUND_REL_3 _UNBOUND_REL_2) : Prop
y : nat
forall (y0 : nat) (r : list nat)
  (_ : @eq (prod nat (list nat)) (select n (@cons nat x l))
         (@pair nat (list nat) y0 r)),
@Permutation nat (@cons nat n (@cons nat x l)) (@cons nat y0 r) : Prop
le y x : Prop
forall (r : list nat)
  (_ : @eq (prod nat (list nat)) (select n (@cons nat x l))
         (@pair nat (list nat) _UNBOUND_REL_2 r)),
@Permutation nat (@cons nat n (@cons nat x l)) (@cons nat _UNBOUND_REL_3 r) : Prop
fun j : list nat =>
@eq (prod nat (list nat)) (select n (@cons nat x l))
  (@pair nat (list nat) x0 j) : forall _ : list nat, Prop
le y n : Prop
@Permutation nat (@cons nat n (@cons nat x l)) (@cons nat x0 x1) : Prop
x1 : list nat
@Forall nat (fun y0 : nat => le y y0) l : Prop
@ex (list nat)
  (fun j : list nat =>
   @eq (prod nat (list nat)) (select n (@cons nat x l))
     (@pair nat (list nat) _UNBOUND_REL_2 j)) : Prop
n : nat
select n (@cons nat x l) : prod nat (list nat)
forall
  _ : @eq (prod nat (list nat)) (select n (@cons nat x l))
        (@pair nat (list nat) _UNBOUND_REL_2 _UNBOUND_REL_1),
@Permutation nat (@cons nat n (@cons nat x l))
  (@cons nat _UNBOUND_REL_3 _UNBOUND_REL_2) : Prop
@pair nat (list nat) x0 _UNBOUND_REL_1 : prod nat (list nat)
@cons nat x l : list nat
fun j : list nat =>
@eq (prod nat (list nat)) (select n (@cons nat x l))
  (@pair nat (list nat) _UNBOUND_REL_2 j) : forall _ : list nat, Prop
@cons nat _UNBOUND_REL_3 _UNBOUND_REL_2 : list nat
le y _UNBOUND_REL_1 : Prop
l : list nat
fun y0 : nat => le y y0 : forall _ : nat, Prop
@cons nat x0 x1 : list nat
@In nat n l : Prop
nat : Set
@ex nat
  (fun i : nat =>
   @ex (list nat)
     (fun j : list nat =>
      @eq (prod nat (list nat)) (select n (@cons nat x l))
        (@pair nat (list nat) i j))) : Prop
@ex (list nat)
  (fun j : list nat =>
   @eq (prod nat (list nat)) (select n (@cons nat x l))
     (@pair nat (list nat) x0 j)) : Prop
@cons nat n (@cons nat x l) : list nat
@pair nat (list nat) _UNBOUND_REL_2 _UNBOUND_REL_1 : prod nat (list nat)
@eq (prod nat (list nat)) (select n (@cons nat x l))
  (@pair nat (list nat) x0 _UNBOUND_REL_1) : Prop

* Functions:
Forall  : forall (A : Type) (_ : forall _ : A, Prop) (_ : list A), Prop
prod  : forall (_ : Type) (_ : Type), Type
@pair  : forall (A B : Type) (_ : A) (_ : B), prod A B
select  : forall (_ : nat) (_ : list nat), prod nat (list nat)
ex  : forall (A : Type) (_ : forall _ : A, Prop), Prop
In  : forall (A : Type) (_ : A) (_ : list A), Prop
le  : forall (_ : nat) (_ : nat), Prop
list  : forall _ : Type, Type
@cons  : forall (A : Type) (_ : A) (_ : list A), list A
Permutation  : forall (A : Type) (_ : list A) (_ : list A), Prop
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 4 seconds
Generalized Variables:

Generalizations:
Lemma conj1: forall (y : nat) (n : nat), le y n.


<---VALIDITY CHECKS--->
Time elapsed: 6 seconds
Valid:

Invalid:
Lemma conj1: forall (y : nat) (n : nat), le y n.

<---ADD IMPLICATIONS--->
Time elapsed: 14 seconds
Generalizations:
Lemma conj1: forall (y : nat) (n : nat), le y n.
Lemma conj1_imp: forall (x0 : nat) (x : nat) (x1 : list nat) (y : nat) (n : nat) (l : list nat), le y x -> @In nat n l -> @Permutation nat (@cons nat n (@cons nat x l)) (@cons nat x0 x1) -> le y n.


<---VALIDITY CHECKS--->
Time elapsed: 17 seconds
Valid:
Lemma conj1_imp: forall (x0 : nat) (x : nat) (x1 : list nat) (y : nat) (n : nat) (l : list nat), le y x -> @In nat n l -> @Permutation nat (@cons nat n (@cons nat x l)) (@cons nat x0 x1) -> le y n.

Invalid:
Lemma conj1: forall (y : nat) (n : nat), le y n.


<---CREATE SKETCHES--->
Time elapsed: 17 seconds
Sketches:


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 18 seconds
Problems per Sketch:


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 18 seconds

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 18 seconds
Lemmas:
Lemma candidate_1: forall (l : list nat) (n : nat) (y : nat) (x1 : list nat) (x : nat) (x0 : nat), le y x -> @In nat n l -> @Permutation nat (@cons nat n (@cons nat x l)) (@cons nat x0 x1) -> le y n.

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 24 seconds
Duplicates removed: 0
Filtered by Quickchick: 0
Filtered by script: 0
Remaining: 1

Lemmas: 
Lemma candidate_1: forall (l : list nat) (n : nat) (y : nat) (x1 : list nat) (x : nat) (x0 : nat), le y x -> @In nat n l -> @Permutation nat (@cons nat n (@cons nat x l)) (@cons nat x0 x1) -> le y n.