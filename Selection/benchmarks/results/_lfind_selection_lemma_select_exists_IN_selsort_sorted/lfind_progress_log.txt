File Information
- File name: Selection
- Original Directory: /home/anabrendel/lfind/vfa-benchmarks/Selection/benchmarks/sources/selection_lemma_select_exists_IN_selsort_sorted
- LFind Directory: /home/anabrendel/lfind/vfa-benchmarks/Selection/benchmarks/sources/_lfind_selection_lemma_select_exists_IN_selsort_sorted
- Namespace: vfa_benchmark
- Proof name: selsort_sorted
- Theorem: Theorem selsort_sorted: forall (n1 : nat) (al0 : list nat) (_ : @eq nat (@list_length nat al0) n1),
sorted (selsort al0 n1).
- Declarations: 
From lfind Require Import LFind.
From VFA Require Import Perm.

Proof Context
* Goal State: sorted
  (let (y, r') := select n0 al in
   @cons nat y (selsort r' (@list_length nat al)))

* Hypothesis:
H1 : @eq nat (@list_length nat al) n
H : @eq nat (S (@list_length nat al)) (S n)
al : list nat
n : nat
n0 : nat
IHn : forall (al0 : list nat) (_ : @eq nat (@list_length nat al0) n),
sorted (selsort al0 n)

* Types:
Set
Prop
forall (_ : nat) (_ : list nat), list nat
forall _ : list nat, list nat
nat
forall _ : prod nat (list nat), Set
prod nat (list nat)
list nat

* Polymorphic Types:
list nat
prod nat (list nat)

* Variables:
al : list nat
n : nat

* Terms:
list nat : Set
prod nat (list nat) : Set
selsort _UNBOUND_REL_1 (@list_length nat al) : list nat
@eq nat (@list_length nat al) n : Prop
forall _ : @eq nat (@list_length nat _UNBOUND_REL_1) n,
sorted (selsort _UNBOUND_REL_2 n) : Prop
select n0 al : prod nat (list nat)
selsort _UNBOUND_REL_2 n : list nat
@eq nat (S (@list_length nat al)) (S n) : Prop
@list_length nat al : nat
fun r' : list nat =>
@cons nat _UNBOUND_REL_2 (selsort r' (@list_length nat al)) : forall _ : list nat, list nat
sorted (selsort _UNBOUND_REL_2 n) : Prop
al : list nat
let (y, r') := select n0 al in @cons nat y (selsort r' (@list_length nat al)) : list nat
@cons nat _UNBOUND_REL_2 (selsort _UNBOUND_REL_1 (@list_length nat al)) : list nat
fun _ : prod nat (list nat) => list nat : forall _ : prod nat (list nat), Set
@list_length nat _UNBOUND_REL_1 : nat
forall (al0 : list nat) (_ : @eq nat (@list_length nat al0) n),
sorted (selsort al0 n) : Prop
nat : Set
S (@list_length nat al) : nat
@eq nat (@list_length nat _UNBOUND_REL_1) n : Prop
fun (y : nat) (r' : list nat) =>
@cons nat y (selsort r' (@list_length nat al)) : forall (_ : nat) (_ : list nat), list nat
S n : nat
n : nat
sorted
  (let (y, r') := select n0 al in
   @cons nat y (selsort r' (@list_length nat al))) : Prop
n0 : nat

* Functions:
sorted  : forall _ : list nat, Prop
selsort  : forall (_ : list nat) (_ : nat), list nat
prod  : forall (_ : Type) (_ : Type), Type
@list_length  : forall (T : Type) (_ : list T), nat
select  : forall (_ : nat) (_ : list nat), prod nat (list nat)
list  : forall _ : Type, Type
@cons  : forall (A : Type) (_ : A) (_ : list A), list A
S  : forall _ : nat, nat
@eq  : forall (A : Type) (_ : A) (_ : A), Prop