File Information
- File name: Selection
- Original Directory: /home/anabrendel/lfind/vfa-benchmarks/Selection/benchmarks/sources/selection_lemma_select_perm_IN_selsortt_perm
- LFind Directory: /home/anabrendel/lfind/vfa-benchmarks/Selection/benchmarks/sources/_lfind_selection_lemma_select_perm_IN_selsortt_perm
- Namespace: vfa_benchmark
- Proof name: selsortt_perm
- Theorem: Theorem selsortt_perm: forall (n2 : nat) (l1 : list nat) (_ : @eq nat (@list_length nat l1) n2),
@Permutation nat l1 (selsortt l1).
- Declarations: 
From lfind Require Import LFind.
From VFA Require Import Perm.

Proof Context
* Goal State: @Permutation nat (@cons nat n0 l) (@cons nat n1 l0)

* Hypothesis:
l0 : list nat
H : @eq nat (@list_length nat (@cons nat n0 l)) (S n)
Seq : @eq (prod nat (list nat)) (select n0 l) (@pair nat (list nat) n1 l0)
n1 : nat
l : list nat
n : nat
n0 : nat
IHn : forall (l1 : list nat) (_ : @eq nat (@list_length nat l1) n),
@Permutation nat l1 (selsortt l1)

* Types:
Set
Prop
nat
prod nat (list nat)
list nat

* Polymorphic Types:
list nat
prod nat (list nat)

* Variables:
l0 : list nat
n1 : nat
l : list nat
n : nat
n0 : nat

* Terms:
list nat : Set
prod nat (list nat) : Set
select n0 l : prod nat (list nat)
@Permutation nat (@cons nat n0 l) (@cons nat n1 l0) : Prop
@pair nat (list nat) n1 l0 : prod nat (list nat)
@list_length nat (@cons nat n0 l) : nat
@Permutation nat _UNBOUND_REL_2 (selsortt _UNBOUND_REL_2) : Prop
@cons nat n1 l0 : list nat
selsortt _UNBOUND_REL_2 : list nat
forall _ : @eq nat (@list_length nat _UNBOUND_REL_1) n,
@Permutation nat _UNBOUND_REL_2 (selsortt _UNBOUND_REL_2) : Prop
@list_length nat _UNBOUND_REL_1 : nat
n1 : nat
l : list nat
@eq nat (@list_length nat (@cons nat n0 l)) (S n) : Prop
@eq (prod nat (list nat)) (select n0 l) (@pair nat (list nat) n1 l0) : Prop
forall (l1 : list nat) (_ : @eq nat (@list_length nat l1) n),
@Permutation nat l1 (selsortt l1) : Prop
nat : Set
@eq nat (@list_length nat _UNBOUND_REL_1) n : Prop
l0 : list nat
S n : nat
n : nat
@cons nat n0 l : list nat
n0 : nat

* Functions:
prod  : forall (_ : Type) (_ : Type), Type
@list_length  : forall (T : Type) (_ : list T), nat
@pair  : forall (A B : Type) (_ : A) (_ : B), prod A B
select  : forall (_ : nat) (_ : list nat), prod nat (list nat)
list  : forall _ : Type, Type
selsortt  : forall _ : list nat, list nat
@cons  : forall (A : Type) (_ : A) (_ : list A), list A
S  : forall _ : nat, nat
Permutation  : forall (A : Type) (_ : list A) (_ : list A), Prop
@eq  : forall (A : Type) (_ : A) (_ : A), Prop

<---GENERALIZATION--->
Time elapsed: 3 seconds
Generalized Variables:
lf1 : list nat = @cons nat n1 l0
lf2 : list nat = @cons nat n0 l

Generalizations:
Lemma conj1: forall (lf2 : list nat) (lf1 : list nat), @Permutation nat lf2 lf1.
Lemma conj2: forall (lf1 : list nat) (l : list nat) (n0 : nat), @Permutation nat (@cons nat n0 l) lf1.
Lemma conj3: forall (lf2 : list nat) (l0 : list nat) (n1 : nat), @Permutation nat lf2 (@cons nat n1 l0).
Lemma conj4: forall (l0 : list nat) (n1 : nat) (l : list nat) (n0 : nat), @Permutation nat (@cons nat n0 l) (@cons nat n1 l0).


<---VALIDITY CHECKS--->
Time elapsed: 16 seconds
Valid:

Invalid:
Lemma conj4: forall (l0 : list nat) (n1 : nat) (l : list nat) (n0 : nat), @Permutation nat (@cons nat n0 l) (@cons nat n1 l0).
Lemma conj3: forall (lf2 : list nat) (l0 : list nat) (n1 : nat), @Permutation nat lf2 (@cons nat n1 l0).
Lemma conj2: forall (lf1 : list nat) (l : list nat) (n0 : nat), @Permutation nat (@cons nat n0 l) lf1.
Lemma conj1: forall (lf2 : list nat) (lf1 : list nat), @Permutation nat lf2 lf1.

<---ADD IMPLICATIONS--->
Time elapsed: 35 seconds
Generalizations:
Lemma conj4: forall (l0 : list nat) (n1 : nat) (l : list nat) (n0 : nat), @Permutation nat (@cons nat n0 l) (@cons nat n1 l0).
Lemma conj4_imp: forall (l0 : list nat) (n1 : nat) (l : list nat) (n : nat) (n0 : nat), @eq nat (@list_length nat (@cons nat n0 l)) (S n) -> @eq (prod nat (list nat)) (select n0 l) (@pair nat (list nat) n1 l0) -> @Permutation nat (@cons nat n0 l) (@cons nat n1 l0).
Lemma conj3: forall (lf2 : list nat) (l0 : list nat) (n1 : nat), @Permutation nat lf2 (@cons nat n1 l0).
Lemma conj3_imp: forall (lf2 : list nat) (l0 : list nat) (n1 : nat) (l : list nat) (n : nat) (n0 : nat), @eq nat (@list_length nat lf2) (S n) -> @eq (prod nat (list nat)) (select n0 l) (@pair nat (list nat) n1 l0) -> @Permutation nat lf2 (@cons nat n1 l0).
Lemma conj2: forall (lf1 : list nat) (l : list nat) (n0 : nat), @Permutation nat (@cons nat n0 l) lf1.
Lemma conj2_imp: forall (l0 : list nat) (lf1 : list nat) (n1 : nat) (l : list nat) (n : nat) (n0 : nat), @eq nat (@list_length nat (@cons nat n0 l)) (S n) -> @eq (prod nat (list nat)) (select n0 l) (@pair nat (list nat) n1 l0) -> @Permutation nat (@cons nat n0 l) lf1.
Lemma conj1: forall (lf2 : list nat) (lf1 : list nat), @Permutation nat lf2 lf1.
Lemma conj1_imp: forall (lf2 : list nat) (l0 : list nat) (lf1 : list nat) (n1 : nat) (l : list nat) (n : nat) (n0 : nat), @eq nat (@list_length nat lf2) (S n) -> @eq (prod nat (list nat)) (select n0 l) (@pair nat (list nat) n1 l0) -> @Permutation nat lf2 lf1.


<---VALIDITY CHECKS--->
Time elapsed: 49 seconds
Valid:
Lemma conj4_imp: forall (l0 : list nat) (n1 : nat) (l : list nat) (n : nat) (n0 : nat), @eq nat (@list_length nat (@cons nat n0 l)) (S n) -> @eq (prod nat (list nat)) (select n0 l) (@pair nat (list nat) n1 l0) -> @Permutation nat (@cons nat n0 l) (@cons nat n1 l0).

Invalid:
Lemma conj1_imp: forall (lf2 : list nat) (l0 : list nat) (lf1 : list nat) (n1 : nat) (l : list nat) (n : nat) (n0 : nat), @eq nat (@list_length nat lf2) (S n) -> @eq (prod nat (list nat)) (select n0 l) (@pair nat (list nat) n1 l0) -> @Permutation nat lf2 lf1.
Lemma conj1: forall (lf2 : list nat) (lf1 : list nat), @Permutation nat lf2 lf1.
Lemma conj2_imp: forall (l0 : list nat) (lf1 : list nat) (n1 : nat) (l : list nat) (n : nat) (n0 : nat), @eq nat (@list_length nat (@cons nat n0 l)) (S n) -> @eq (prod nat (list nat)) (select n0 l) (@pair nat (list nat) n1 l0) -> @Permutation nat (@cons nat n0 l) lf1.
Lemma conj2: forall (lf1 : list nat) (l : list nat) (n0 : nat), @Permutation nat (@cons nat n0 l) lf1.
Lemma conj3_imp: forall (lf2 : list nat) (l0 : list nat) (n1 : nat) (l : list nat) (n : nat) (n0 : nat), @eq nat (@list_length nat lf2) (S n) -> @eq (prod nat (list nat)) (select n0 l) (@pair nat (list nat) n1 l0) -> @Permutation nat lf2 (@cons nat n1 l0).
Lemma conj3: forall (lf2 : list nat) (l0 : list nat) (n1 : nat), @Permutation nat lf2 (@cons nat n1 l0).
Lemma conj4: forall (l0 : list nat) (n1 : nat) (l : list nat) (n0 : nat), @Permutation nat (@cons nat n0 l) (@cons nat n1 l0).


<---CREATE SKETCHES--->
Time elapsed: 49 seconds
Sketches:
Sketch conj1_imp_sketch0 : forall
  _ : forall _ : @eq nat (@list_length nat lf2) (S n),
      @eq (prod nat (##hole##)) (select n0 l) (@pair nat (##hole##) n1 l0),
@Permutation nat lf2 lf1
Sketch conj1_imp_sketch1 : forall
  _ : forall _ : @eq nat (@list_length nat lf2) (S n),
      @eq (##hole##) (select n0 l) (@pair nat (list nat) n1 l0),
@Permutation nat lf2 lf1
Sketch conj1_imp_sketch2 : forall
  _ : forall _ : @eq nat (@list_length nat lf2) (S n),
      @eq (prod nat (list nat)) (##hole##) (@pair nat (list nat) n1 l0),
@Permutation nat lf2 lf1
Sketch conj1_imp_sketch3 : forall
  _ : forall _ : @eq nat (@list_length nat lf2) (S n),
      @eq (prod nat (list nat)) (select n0 l) (##hole##),
@Permutation nat lf2 lf1
Sketch conj1_imp_sketch4 : forall
  _ : forall _ : @eq nat (@list_length nat lf2) (##hole##),
      @eq (prod nat (list nat)) (select n0 l) (@pair nat (list nat) n1 l0),
@Permutation nat lf2 lf1
Sketch conj1_imp_sketch5 : forall
  _ : forall _ : @eq nat (##hole##) (S n),
      @eq (prod nat (list nat)) (select n0 l) (@pair nat (list nat) n1 l0),
@Permutation nat lf2 lf1
Sketch conj1_imp_term_sketch0 : @eq Set (list nat) (##hole##)
Sketch conj1_imp_term_sketch1 : @eq Set (prod nat (list nat)) (##hole##)
Sketch conj1_imp_term_sketch2 : @eq (prod nat (list nat)) (select n0 l) (##hole##)
Sketch conj1_imp_term_sketch3 : @eq (prod nat (list nat)) (@pair nat (list nat) n1 l0) (##hole##)
Sketch conj1_imp_term_sketch4 : @eq nat (S n) (##hole##)
Sketch conj1_imp_term_sketch5 : @eq nat (@list_length nat lf2) (##hole##)
Sketch conj2_imp_sketch0 : forall
  _ : forall _ : @eq nat (@list_length nat (@cons nat n0 l)) (S n),
      @eq (prod nat (##hole##)) (select n0 l) (@pair nat (##hole##) n1 l0),
@Permutation nat (@cons nat n0 l) lf1
Sketch conj2_imp_sketch1 : forall
  _ : forall _ : @eq nat (@list_length nat (@cons nat n0 l)) (S n),
      @eq (##hole##) (select n0 l) (@pair nat (list nat) n1 l0),
@Permutation nat (@cons nat n0 l) lf1
Sketch conj2_imp_sketch2 : forall
  _ : forall _ : @eq nat (@list_length nat (@cons nat n0 l)) (S n),
      @eq (prod nat (list nat)) (##hole##) (@pair nat (list nat) n1 l0),
@Permutation nat (@cons nat n0 l) lf1
Sketch conj2_imp_sketch3 : forall
  _ : forall _ : @eq nat (@list_length nat (@cons nat n0 l)) (S n),
      @eq (prod nat (list nat)) (select n0 l) (##hole##),
@Permutation nat (@cons nat n0 l) lf1
Sketch conj2_imp_sketch4 : forall
  _ : forall _ : @eq nat (##hole##) (S n),
      @eq (prod nat (list nat)) (select n0 l) (@pair nat (list nat) n1 l0),
@Permutation nat (@cons nat n0 l) lf1
Sketch conj2_imp_sketch5 : forall
  _ : forall _ : @eq nat (@list_length nat (@cons nat n0 l)) (##hole##),
      @eq (prod nat (list nat)) (select n0 l) (@pair nat (list nat) n1 l0),
@Permutation nat (@cons nat n0 l) lf1
Sketch conj2_imp_sketch6 : forall
  _ : forall _ : @eq nat (@list_length nat (##hole##)) (S n),
      @eq (prod nat (list nat)) (select n0 l) (@pair nat (list nat) n1 l0),
@Permutation nat (##hole##) lf1
Sketch conj2_imp_term_sketch0 : @eq Set (list nat) (##hole##)
Sketch conj2_imp_term_sketch1 : @eq Set (prod nat (list nat)) (##hole##)
Sketch conj2_imp_term_sketch2 : @eq (prod nat (list nat)) (select n0 l) (##hole##)
Sketch conj2_imp_term_sketch3 : @eq (prod nat (list nat)) (@pair nat (list nat) n1 l0) (##hole##)
Sketch conj2_imp_term_sketch4 : @eq nat (@list_length nat (@cons nat n0 l)) (##hole##)
Sketch conj2_imp_term_sketch5 : @eq nat (S n) (##hole##)
Sketch conj2_imp_term_sketch6 : @eq (list nat) (@cons nat n0 l) (##hole##)
Sketch conj2_sketch0 : @Permutation nat (##hole##) lf1
Sketch conj2_term_sketch0 : @eq (list nat) (@cons nat n0 l) (##hole##)
Sketch conj3_imp_sketch0 : forall
  _ : forall _ : @eq nat (@list_length nat lf2) (S n),
      @eq (prod nat (##hole##)) (select n0 l) (@pair nat (##hole##) n1 l0),
@Permutation nat lf2 (@cons nat n1 l0)
Sketch conj3_imp_sketch1 : forall
  _ : forall _ : @eq nat (@list_length nat lf2) (S n),
      @eq (##hole##) (select n0 l) (@pair nat (list nat) n1 l0),
@Permutation nat lf2 (@cons nat n1 l0)
Sketch conj3_imp_sketch2 : forall
  _ : forall _ : @eq nat (@list_length nat lf2) (S n),
      @eq (prod nat (list nat)) (##hole##) (@pair nat (list nat) n1 l0),
@Permutation nat lf2 (@cons nat n1 l0)
Sketch conj3_imp_sketch3 : forall
  _ : forall _ : @eq nat (@list_length nat lf2) (S n),
      @eq (prod nat (list nat)) (select n0 l) (##hole##),
@Permutation nat lf2 (@cons nat n1 l0)
Sketch conj3_imp_sketch4 : forall
  _ : forall _ : @eq nat (@list_length nat lf2) (S n),
      @eq (prod nat (list nat)) (select n0 l) (@pair nat (list nat) n1 l0),
@Permutation nat lf2 (##hole##)
Sketch conj3_imp_sketch5 : forall
  _ : forall _ : @eq nat (@list_length nat lf2) (##hole##),
      @eq (prod nat (list nat)) (select n0 l) (@pair nat (list nat) n1 l0),
@Permutation nat lf2 (@cons nat n1 l0)
Sketch conj3_imp_sketch6 : forall
  _ : forall _ : @eq nat (##hole##) (S n),
      @eq (prod nat (list nat)) (select n0 l) (@pair nat (list nat) n1 l0),
@Permutation nat lf2 (@cons nat n1 l0)
Sketch conj3_imp_term_sketch0 : @eq Set (list nat) (##hole##)
Sketch conj3_imp_term_sketch1 : @eq Set (prod nat (list nat)) (##hole##)
Sketch conj3_imp_term_sketch2 : @eq (prod nat (list nat)) (select n0 l) (##hole##)
Sketch conj3_imp_term_sketch3 : @eq (prod nat (list nat)) (@pair nat (list nat) n1 l0) (##hole##)
Sketch conj3_imp_term_sketch4 : @eq (list nat) (@cons nat n1 l0) (##hole##)
Sketch conj3_imp_term_sketch5 : @eq nat (S n) (##hole##)
Sketch conj3_imp_term_sketch6 : @eq nat (@list_length nat lf2) (##hole##)
Sketch conj3_sketch0 : @Permutation nat lf2 (##hole##)
Sketch conj3_term_sketch0 : @eq (list nat) (@cons nat n1 l0) (##hole##)
Sketch conj4_sketch0 : @Permutation nat (@cons nat n0 l) (##hole##)
Sketch conj4_sketch1 : @Permutation nat (##hole##) (@cons nat n1 l0)
Sketch conj4_term_sketch0 : @eq (list nat) (@cons nat n1 l0) (##hole##)
Sketch conj4_term_sketch1 : @eq (list nat) (@cons nat n0 l) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 203 seconds
Problems per Sketch:
Sketch conj3_imp_term_sketch0 --> Problem  synth_7
Sketch conj2_imp_term_sketch0 --> Problem  synth_7
Sketch conj3_imp_sketch4 --> Problem  synth_27
Sketch conj2_imp_sketch5 --> Problem  synth_18
Sketch conj3_imp_sketch3 --> Problem  synth_26
Sketch conj2_imp_term_sketch4 --> Problem  synth_20
Sketch conj3_imp_term_sketch3 --> Problem  synth_10
Sketch conj3_imp_sketch1 --> Problem  synth_24
Sketch conj3_imp_sketch6 --> Problem  synth_29
Sketch conj4_sketch0 --> Problem  synth_32
Sketch conj1_imp_sketch2 --> Problem  synth_3
Sketch conj2_term_sketch0 --> Problem  synth_21
Sketch conj3_sketch0 --> Problem  synth_31
Sketch conj2_imp_term_sketch2 --> Problem  synth_9
Sketch conj2_imp_term_sketch3 --> Problem  synth_10
Sketch conj1_imp_term_sketch5 --> Problem  synth_12
Sketch conj4_term_sketch0 --> Problem  synth_30
Sketch conj2_imp_sketch4 --> Problem  synth_17
Sketch conj2_sketch0 --> Problem  synth_22
Sketch conj2_imp_term_sketch6 --> Problem  synth_21
Sketch conj1_imp_term_sketch3 --> Problem  synth_10
Sketch conj3_imp_sketch5 --> Problem  synth_28
Sketch conj1_imp_sketch1 --> Problem  synth_2
Sketch conj3_term_sketch0 --> Problem  synth_30
Sketch conj3_imp_term_sketch2 --> Problem  synth_9
Sketch conj3_imp_term_sketch1 --> Problem  synth_8
Sketch conj1_imp_term_sketch2 --> Problem  synth_9
Sketch conj3_imp_sketch0 --> Problem  synth_23
Sketch conj1_imp_sketch3 --> Problem  synth_4
Sketch conj1_imp_sketch5 --> Problem  synth_6
Sketch conj2_imp_sketch0 --> Problem  synth_13
Sketch conj1_imp_term_sketch4 --> Problem  synth_11
Sketch conj1_imp_term_sketch0 --> Problem  synth_7
Sketch conj4_sketch1 --> Problem  synth_33
Sketch conj2_imp_term_sketch5 --> Problem  synth_11
Sketch conj1_imp_sketch4 --> Problem  synth_5
Sketch conj1_imp_sketch0 --> Problem  synth_1
Sketch conj4_term_sketch1 --> Problem  synth_21
Sketch conj2_imp_sketch3 --> Problem  synth_16
Sketch conj3_imp_term_sketch5 --> Problem  synth_11
Sketch conj3_imp_term_sketch6 --> Problem  synth_12
Sketch conj2_imp_sketch2 --> Problem  synth_15
Sketch conj2_imp_sketch6 --> Problem  synth_19
Sketch conj3_imp_term_sketch4 --> Problem  synth_30
Sketch conj2_imp_sketch1 --> Problem  synth_14
Sketch conj1_imp_term_sketch1 --> Problem  synth_8
Sketch conj3_imp_sketch2 --> Problem  synth_25
Sketch conj2_imp_term_sketch1 --> Problem  synth_8


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 248 seconds

Problem: synth_28

Problem: synth_17

Problem: synth_29

Problem: synth_26

Problem: synth_9

Problem: synth_30

Problem: synth_11

Problem: synth_1

Problem: synth_15

Problem: synth_31

Problem: synth_14

Problem: synth_8

Problem: synth_12

Problem: synth_5

Problem: synth_2

Problem: synth_22

Problem: synth_20

Problem: synth_18

Problem: synth_21

Problem: synth_25

Problem: synth_13

Problem: synth_6

Problem: synth_7

Problem: synth_4

Problem: synth_23

Problem: synth_27

Problem: synth_16

Problem: synth_19

Problem: synth_10

Problem: synth_33

Problem: synth_24

Problem: synth_3

Problem: synth_32

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 248 seconds
Lemmas:
Lemma candidate_1: forall (n0 : nat) (n : nat) (l : list nat) (n1 : nat) (l0 : list nat), @eq nat (@list_length nat (@cons nat n0 l)) (S n) -> @eq (prod nat (list nat)) (select n0 l) (@pair nat (list nat) n1 l0) -> @Permutation nat (@cons nat n0 l) (@cons nat n1 l0).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 255 seconds
Duplicates removed: 0
Filtered by Quickchick: 0
Filtered by script: 0
Remaining: 1

Lemmas: 
Lemma candidate_1: forall (n0 : nat) (n : nat) (l : list nat) (n1 : nat) (l0 : list nat), @eq nat (@list_length nat (@cons nat n0 l)) (S n) -> @eq (prod nat (list nat)) (select n0 l) (@pair nat (list nat) n1 l0) -> @Permutation nat (@cons nat n0 l) (@cons nat n1 l0).