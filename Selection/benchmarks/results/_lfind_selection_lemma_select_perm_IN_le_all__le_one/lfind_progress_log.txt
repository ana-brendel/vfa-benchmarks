File Information
- File name: Selection
- Original Directory: /home/anabrendel/lfind/vfa-benchmarks/Selection/benchmarks/sources/selection_lemma_select_perm_IN_le_all__le_one
- LFind Directory: /home/anabrendel/lfind/vfa-benchmarks/Selection/benchmarks/sources/_lfind_selection_lemma_select_perm_IN_le_all__le_one
- Namespace: vfa_benchmark
- Proof name: le_all__le_one
- Theorem: Theorem le_all__le_one: forall (lst : list nat) (y0 n0 : nat) (_ : le_all y0 lst)
  (_ : @In nat n0 lst), le y0 n0.
- Declarations: 
From lfind Require Import LFind.
From VFA Require Import Perm.

Proof Context
* Goal State: le y n

* Hypothesis:
H0 : @In nat n (@cons nat x l)
H1 : @Forall nat (fun y0 : nat => le y y0) l
x : nat
H : le y x
y : nat
l : list nat
n : nat

* Types:
Set
Prop
nat
forall _ : nat, Prop
list nat

* Polymorphic Types:
list nat

* Variables:
x : nat
y : nat
n : nat
l : list nat

* Terms:
list nat : Set
le y x : Prop
fun y0 : nat => le y y0 : forall _ : nat, Prop
@In nat n (@cons nat x l) : Prop
nat : Set
@cons nat x l : list nat
x : nat
le y n : Prop
le y _UNBOUND_REL_1 : Prop
@Forall nat (fun y0 : nat => le y y0) l : Prop
y : nat
l : list nat
n : nat

* Functions:
Forall  : forall (A : Type) (_ : forall _ : A, Prop) (_ : list A), Prop
In  : forall (A : Type) (_ : A) (_ : list A), Prop
le  : forall (_ : nat) (_ : nat), Prop
list  : forall _ : Type, Type
@cons  : forall (A : Type) (_ : A) (_ : list A), list A

<---GENERALIZATION--->
Time elapsed: 3 seconds
Generalized Variables:

Generalizations:
Lemma conj1: forall (y : nat) (n : nat), le y n.


<---VALIDITY CHECKS--->
Time elapsed: 4 seconds
Valid:

Invalid:
Lemma conj1: forall (y : nat) (n : nat), le y n.

<---ADD IMPLICATIONS--->
Time elapsed: 10 seconds
Generalizations:
Lemma conj1: forall (y : nat) (n : nat), le y n.
Lemma conj1_imp: forall (x : nat) (y : nat) (n : nat) (l : list nat), le y x -> @In nat n (@cons nat x l) -> le y n.


<---VALIDITY CHECKS--->
Time elapsed: 14 seconds
Valid:

Invalid:
Lemma conj1_imp: forall (x : nat) (y : nat) (n : nat) (l : list nat), le y x -> @In nat n (@cons nat x l) -> le y n.
Lemma conj1: forall (y : nat) (n : nat), le y n.


<---CREATE SKETCHES--->
Time elapsed: 14 seconds
Sketches:
Sketch conj1_imp_sketch0 : forall _ : forall _ : le y x, @In nat n (##hole##), le y n
Sketch conj1_imp_term_sketch0 : @eq (list nat) (@cons nat x l) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 14 seconds
Problems per Sketch:
Sketch conj1_imp_term_sketch0 --> Problem  synth_2
Sketch conj1_imp_sketch0 --> Problem  synth_1


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 16 seconds

Problem: synth_1
 @cons nat n (@nil nat)
 @cons nat y (@nil nat)
 @cons nat x (@nil nat)
 @cons nat O (@nil nat)
 @nil nat

Problem: synth_2
 @cons nat O l
 @cons nat x (@nil nat)
 @cons nat O (@nil nat)
 l
 @nil nat

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 16 seconds
Lemmas:
Lemma candidate_1: forall (n : nat) (y : nat) (x : nat), le y x -> @In nat n (@cons nat n (@nil nat)) -> le y n.
Lemma candidate_2: forall (n : nat) (y : nat) (x : nat), le y x -> @In nat n (@cons nat y (@nil nat)) -> le y n.
Lemma candidate_3: forall (n : nat) (y : nat) (x : nat), le y x -> @In nat n (@cons nat x (@nil nat)) -> le y n.
Lemma candidate_4: forall (n : nat) (y : nat) (x : nat), le y x -> @In nat n (@cons nat O (@nil nat)) -> le y n.
Lemma candidate_5: forall (n : nat) (y : nat) (x : nat), le y x -> @In nat n (@nil nat) -> le y n.
Lemma candidate_6: forall (l : list nat) (x : nat), @eq (list nat) (@cons nat x l) (@cons nat O l).
Lemma candidate_7: forall (l : list nat) (x : nat), @eq (list nat) (@cons nat x l) (@cons nat x (@nil nat)).
Lemma candidate_8: forall (l : list nat) (x : nat), @eq (list nat) (@cons nat x l) (@cons nat O (@nil nat)).
Lemma candidate_9: forall (l : list nat) (x : nat), @eq (list nat) (@cons nat x l) (l).
Lemma candidate_10: forall (l : list nat) (x : nat), @eq (list nat) (@cons nat x l) (@nil nat).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 40 seconds
Duplicates removed: 0
Filtered by Quickchick: 6
Filtered by script: 0
Remaining: 4

Lemmas: 
Lemma candidate_5: forall (n : nat) (y : nat) (x : nat), le y x -> @In nat n (@nil nat) -> le y n.
Lemma candidate_4: forall (n : nat) (y : nat) (x : nat), le y x -> @In nat n (@cons nat O (@nil nat)) -> le y n.
Lemma candidate_3: forall (n : nat) (y : nat) (x : nat), le y x -> @In nat n (@cons nat x (@nil nat)) -> le y n.
Lemma candidate_2: forall (n : nat) (y : nat) (x : nat), le y x -> @In nat n (@cons nat y (@nil nat)) -> le y n.