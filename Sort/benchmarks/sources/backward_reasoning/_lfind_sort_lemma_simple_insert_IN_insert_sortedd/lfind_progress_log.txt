File Information
- File name: Sort
- Original Directory: /home/anabrendel/lfind/vfa-benchmarks/Sort/benchmarks/sources/backward_reasoning/sort_lemma_simple_insert_IN_insert_sortedd
- LFind Directory: /home/anabrendel/lfind/vfa-benchmarks/Sort/benchmarks/sources/backward_reasoning/_lfind_sort_lemma_simple_insert_IN_insert_sortedd
- Namespace: vfa_benchmark
- Proof name: insert_sortedd
- Theorem: Theorem insert_sortedd: forall (a1 : nat) (l0 : list nat) (_ : sortedd l0), sortedd (insert a1 l0).
- Declarations: 
From lfind Require Import LFind.
From VFA Require Import Perm.

Proof Context
* Goal State: @eq (list nat) (insert a0 (@cons nat n l)) (@cons nat n (insert a0 l))

* Hypothesis:
Q : forall (i j iv jv : nat) (_ : lt i j)
  (_ : @eq (option nat) (@nth_error nat (@cons nat a (@cons nat n l)) i)
         (@Some nat iv))
  (_ : @eq (option nat) (@nth_error nat (@cons nat a (@cons nat n l)) j)
         (@Some nat jv)), le iv jv
H0 : le a a0
H2 : lt n a0
H1 : @eq bool (Nat.leb a0 a) false
R : le a n
a0 : nat
H : sortedd (@cons nat a (@cons nat n l))
IHl : forall (_ : sortedd (@cons nat n l)) (a1 : nat),
sortedd (insert a1 (@cons nat n l))
l : list nat
n : nat
a : nat

* Types:
Set
option nat
Prop
bool
nat
list nat

* Polymorphic Types:
list nat
option nat

* Variables:
a0 : nat
l : list nat
n : nat
a : nat

* Terms:
list nat : Set
@eq bool (Nat.leb a0 a) false : Prop
@eq (option nat)
  (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
  (@Some nat _UNBOUND_REL_3) : Prop
@cons nat n (insert a0 l) : list nat
insert _UNBOUND_REL_1 (@cons nat n l) : list nat
le _UNBOUND_REL_5 _UNBOUND_REL_4 : Prop
le a a0 : Prop
insert a0 l : list nat
forall
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat _UNBOUND_REL_3))
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat _UNBOUND_REL_3)), le _UNBOUND_REL_5 _UNBOUND_REL_4 : Prop
@eq (list nat) (insert a0 (@cons nat n l)) (@cons nat n (insert a0 l)) : Prop
n : nat
@Some nat _UNBOUND_REL_3 : option nat
sortedd (@cons nat n l) : Prop
lt n a0 : Prop
forall (i j iv jv : nat) (_ : lt i j)
  (_ : @eq (option nat) (@nth_error nat (@cons nat a (@cons nat n l)) i)
         (@Some nat iv))
  (_ : @eq (option nat) (@nth_error nat (@cons nat a (@cons nat n l)) j)
         (@Some nat jv)), le iv jv : Prop
insert a0 (@cons nat n l) : list nat
forall a1 : nat, sortedd (insert a1 (@cons nat n l)) : Prop
lt _UNBOUND_REL_4 _UNBOUND_REL_3 : Prop
le a n : Prop
option nat : Set
forall
  _ : @eq (option nat)
        (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
        (@Some nat _UNBOUND_REL_3), le _UNBOUND_REL_5 _UNBOUND_REL_4 : Prop
l : list nat
forall (jv : nat) (_ : lt _UNBOUND_REL_4 _UNBOUND_REL_3)
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat _UNBOUND_REL_3))
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat jv)), le _UNBOUND_REL_5 jv : Prop
false : bool
nat : Set
sortedd (insert _UNBOUND_REL_1 (@cons nat n l)) : Prop
@cons nat n l : list nat
@cons nat a (@cons nat n l) : list nat
bool : Set
forall (_ : sortedd (@cons nat n l)) (a1 : nat),
sortedd (insert a1 (@cons nat n l)) : Prop
a0 : nat
forall (_ : lt _UNBOUND_REL_4 _UNBOUND_REL_3)
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat _UNBOUND_REL_3))
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat _UNBOUND_REL_3)), le _UNBOUND_REL_5 _UNBOUND_REL_4 : Prop
forall (j iv jv : nat) (_ : lt _UNBOUND_REL_4 j)
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat iv))
  (_ : @eq (option nat) (@nth_error nat (@cons nat a (@cons nat n l)) j)
         (@Some nat jv)), le iv jv : Prop
@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5 : option nat
Nat.leb a0 a : bool
forall (iv jv : nat) (_ : lt _UNBOUND_REL_4 _UNBOUND_REL_3)
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat iv))
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat jv)), le iv jv : Prop
sortedd (@cons nat a (@cons nat n l)) : Prop
a : nat

* Functions:
insert  : forall (_ : nat) (_ : list nat), list nat
le  : forall (_ : nat) (_ : nat), Prop
list  : forall _ : Type, Type
@Some  : forall (A : Type) (_ : A), option A
@cons  : forall (A : Type) (_ : A) (_ : list A), list A
option  : forall _ : Type, Type
Nat.leb  : forall (_ : nat) (_ : nat), bool
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
sortedd  : forall _ : list nat, Prop
lt  : forall (_ : nat) (_ : nat), Prop
nth_error  : forall (A : Type) (_ : list A) (_ : nat), option A

<---GENERALIZATION--->
Time elapsed: 5 seconds
Generalized Variables:
lf3 : list nat = @cons nat n l
lf1 : list nat = insert a0 (@cons nat n l)
lf4 : list nat = insert a0 l
lf2 : list nat = @cons nat n (insert a0 l)

Generalizations:
Lemma conj1: forall (lf2 : list nat) (lf1 : list nat), @eq (list nat) lf1 lf2.
Lemma conj2: forall (lf4 : list nat) (lf1 : list nat) (n : nat), @eq (list nat) lf1 (@cons nat n lf4).
Lemma conj4: forall (a0 : nat) (lf1 : list nat) (l : list nat) (n : nat), @eq (list nat) lf1 (@cons nat n (insert a0 l)).
Lemma conj5: forall (lf2 : list nat) (a0 : nat) (lf3 : list nat), @eq (list nat) (insert a0 lf3) lf2.
Lemma conj6: forall (a0 : nat) (lf4 : list nat) (n : nat) (lf3 : list nat), @eq (list nat) (insert a0 lf3) (@cons nat n lf4).
Lemma conj8: forall (a0 : nat) (l : list nat) (n : nat) (lf3 : list nat), @eq (list nat) (insert a0 lf3) (@cons nat n (insert a0 l)).
Lemma conj13: forall (lf2 : list nat) (a0 : nat) (l : list nat) (n : nat), @eq (list nat) (insert a0 (@cons nat n l)) lf2.
Lemma conj14: forall (a0 : nat) (lf4 : list nat) (n : nat) (l : list nat), @eq (list nat) (insert a0 (@cons nat n l)) (@cons nat n lf4).
Lemma conj16: forall (a0 : nat) (l : list nat) (n : nat), @eq (list nat) (insert a0 (@cons nat n l)) (@cons nat n (insert a0 l)).


<---VALIDITY CHECKS--->
Time elapsed: 25 seconds
Valid:

Invalid:
Lemma conj16: forall (a0 : nat) (l : list nat) (n : nat), @eq (list nat) (insert a0 (@cons nat n l)) (@cons nat n (insert a0 l)).
Lemma conj14: forall (a0 : nat) (lf4 : list nat) (n : nat) (l : list nat), @eq (list nat) (insert a0 (@cons nat n l)) (@cons nat n lf4).
Lemma conj13: forall (lf2 : list nat) (a0 : nat) (l : list nat) (n : nat), @eq (list nat) (insert a0 (@cons nat n l)) lf2.
Lemma conj8: forall (a0 : nat) (l : list nat) (n : nat) (lf3 : list nat), @eq (list nat) (insert a0 lf3) (@cons nat n (insert a0 l)).
Lemma conj6: forall (a0 : nat) (lf4 : list nat) (n : nat) (lf3 : list nat), @eq (list nat) (insert a0 lf3) (@cons nat n lf4).
Lemma conj5: forall (lf2 : list nat) (a0 : nat) (lf3 : list nat), @eq (list nat) (insert a0 lf3) lf2.
Lemma conj4: forall (a0 : nat) (lf1 : list nat) (l : list nat) (n : nat), @eq (list nat) lf1 (@cons nat n (insert a0 l)).
Lemma conj2: forall (lf4 : list nat) (lf1 : list nat) (n : nat), @eq (list nat) lf1 (@cons nat n lf4).
Lemma conj1: forall (lf2 : list nat) (lf1 : list nat), @eq (list nat) lf1 lf2.

<---ADD IMPLICATIONS--->
Time elapsed: 111 seconds
Generalizations:
Lemma conj16: forall (a0 : nat) (l : list nat) (n : nat), @eq (list nat) (insert a0 (@cons nat n l)) (@cons nat n (insert a0 l)).
Lemma conj16_imp: forall (a0 : nat) (l : list nat) (n : nat) (a : nat), sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 (@cons nat n l)) (@cons nat n (insert a0 l)).
Lemma conj14: forall (a0 : nat) (lf4 : list nat) (n : nat) (l : list nat), @eq (list nat) (insert a0 (@cons nat n l)) (@cons nat n lf4).
Lemma conj14_imp: forall (a0 : nat) (lf4 : list nat) (n : nat) (l : list nat) (a : nat), sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 (@cons nat n l)) (@cons nat n lf4).
Lemma conj13: forall (lf2 : list nat) (a0 : nat) (l : list nat) (n : nat), @eq (list nat) (insert a0 (@cons nat n l)) lf2.
Lemma conj13_imp: forall (lf2 : list nat) (a0 : nat) (l : list nat) (n : nat) (a : nat), sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 (@cons nat n l)) lf2.
Lemma conj8: forall (a0 : nat) (l : list nat) (n : nat) (lf3 : list nat), @eq (list nat) (insert a0 lf3) (@cons nat n (insert a0 l)).
Lemma conj8_imp: forall (a0 : nat) (l : list nat) (n : nat) (a : nat) (lf3 : list nat), @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 lf3) (@cons nat n (insert a0 l)).
Lemma conj6: forall (a0 : nat) (lf4 : list nat) (n : nat) (lf3 : list nat), @eq (list nat) (insert a0 lf3) (@cons nat n lf4).
Lemma conj6_imp: forall (a0 : nat) (lf4 : list nat) (n : nat) (a : nat) (lf3 : list nat), sortedd (@cons nat a lf3) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 lf3) (@cons nat n lf4).
Lemma conj5: forall (lf2 : list nat) (a0 : nat) (lf3 : list nat), @eq (list nat) (insert a0 lf3) lf2.
Lemma conj5_imp: forall (lf2 : list nat) (a0 : nat) (n : nat) (a : nat) (lf3 : list nat), @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 lf3) lf2.
Lemma conj4: forall (a0 : nat) (lf1 : list nat) (l : list nat) (n : nat), @eq (list nat) lf1 (@cons nat n (insert a0 l)).
Lemma conj4_imp: forall (a0 : nat) (lf1 : list nat) (l : list nat) (n : nat) (a : nat), sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) lf1 (@cons nat n (insert a0 l)).
Lemma conj2: forall (lf4 : list nat) (lf1 : list nat) (n : nat), @eq (list nat) lf1 (@cons nat n lf4).
Lemma conj2_imp: forall (a0 : nat) (lf4 : list nat) (lf1 : list nat) (n : nat) (l : list nat) (a : nat), sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) lf1 (@cons nat n lf4).
Lemma conj1: forall (lf2 : list nat) (lf1 : list nat), @eq (list nat) lf1 lf2.
Lemma conj1_imp: forall (lf2 : list nat) (a0 : nat) (lf1 : list nat) (n : nat) (l : list nat) (a : nat), sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) lf1 lf2.


<---VALIDITY CHECKS--->
Time elapsed: 147 seconds
Valid:
Lemma conj1_imp: forall (lf2 : list nat) (a0 : nat) (lf1 : list nat) (n : nat) (l : list nat) (a : nat), sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) lf1 lf2.
Lemma conj5_imp: forall (lf2 : list nat) (a0 : nat) (n : nat) (a : nat) (lf3 : list nat), @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 lf3) lf2.
Lemma conj16_imp: forall (a0 : nat) (l : list nat) (n : nat) (a : nat), sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 (@cons nat n l)) (@cons nat n (insert a0 l)).

Invalid:
Lemma conj1: forall (lf2 : list nat) (lf1 : list nat), @eq (list nat) lf1 lf2.
Lemma conj2_imp: forall (a0 : nat) (lf4 : list nat) (lf1 : list nat) (n : nat) (l : list nat) (a : nat), sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) lf1 (@cons nat n lf4).
Lemma conj2: forall (lf4 : list nat) (lf1 : list nat) (n : nat), @eq (list nat) lf1 (@cons nat n lf4).
Lemma conj4_imp: forall (a0 : nat) (lf1 : list nat) (l : list nat) (n : nat) (a : nat), sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) lf1 (@cons nat n (insert a0 l)).
Lemma conj4: forall (a0 : nat) (lf1 : list nat) (l : list nat) (n : nat), @eq (list nat) lf1 (@cons nat n (insert a0 l)).
Lemma conj5: forall (lf2 : list nat) (a0 : nat) (lf3 : list nat), @eq (list nat) (insert a0 lf3) lf2.
Lemma conj6_imp: forall (a0 : nat) (lf4 : list nat) (n : nat) (a : nat) (lf3 : list nat), sortedd (@cons nat a lf3) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 lf3) (@cons nat n lf4).
Lemma conj6: forall (a0 : nat) (lf4 : list nat) (n : nat) (lf3 : list nat), @eq (list nat) (insert a0 lf3) (@cons nat n lf4).
Lemma conj8_imp: forall (a0 : nat) (l : list nat) (n : nat) (a : nat) (lf3 : list nat), @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 lf3) (@cons nat n (insert a0 l)).
Lemma conj8: forall (a0 : nat) (l : list nat) (n : nat) (lf3 : list nat), @eq (list nat) (insert a0 lf3) (@cons nat n (insert a0 l)).
Lemma conj13_imp: forall (lf2 : list nat) (a0 : nat) (l : list nat) (n : nat) (a : nat), sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 (@cons nat n l)) lf2.
Lemma conj13: forall (lf2 : list nat) (a0 : nat) (l : list nat) (n : nat), @eq (list nat) (insert a0 (@cons nat n l)) lf2.
Lemma conj14_imp: forall (a0 : nat) (lf4 : list nat) (n : nat) (l : list nat) (a : nat), sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 (@cons nat n l)) (@cons nat n lf4).
Lemma conj14: forall (a0 : nat) (lf4 : list nat) (n : nat) (l : list nat), @eq (list nat) (insert a0 (@cons nat n l)) (@cons nat n lf4).
Lemma conj16: forall (a0 : nat) (l : list nat) (n : nat), @eq (list nat) (insert a0 (@cons nat n l)) (@cons nat n (insert a0 l)).


<---CREATE SKETCHES--->
Time elapsed: 148 seconds
Sketches:
Sketch conj1_sketch0 : @eq (##hole##) lf1 lf2
Sketch conj1_term_sketch0 : @eq Set (list nat) (##hole##)
Sketch conj2_imp_sketch0 : forall
  _ : forall (_ : sortedd (@cons nat a (@cons nat n l)))
        (_ : @eq bool (Nat.leb a0 a) false) (_ : le a a0) 
        (_ : le a n), lt n a0, @eq (##hole##) lf1 (@cons nat n lf4)
Sketch conj2_imp_sketch1 : forall
  _ : forall (_ : sortedd (@cons nat a (@cons nat n l)))
        (_ : @eq bool (Nat.leb a0 a) false) (_ : le a a0) 
        (_ : le a n), lt n a0, @eq (list nat) lf1 (##hole##)
Sketch conj2_imp_sketch2 : forall
  _ : forall (_ : sortedd (@cons nat a (@cons nat n l)))
        (_ : @eq bool (Nat.leb a0 a) (##hole##)) (_ : le a a0) 
        (_ : le a n), lt n a0, @eq (list nat) lf1 (@cons nat n lf4)
Sketch conj2_imp_sketch3 : forall
  _ : forall (_ : sortedd (@cons nat a (##hole##)))
        (_ : @eq bool (Nat.leb a0 a) false) (_ : le a a0) 
        (_ : le a n), lt n a0, @eq (list nat) lf1 (@cons nat n lf4)
Sketch conj2_imp_sketch4 : forall
  _ : forall (_ : sortedd (##hole##)) (_ : @eq bool (Nat.leb a0 a) false)
        (_ : le a a0) (_ : le a n), lt n a0,
@eq (list nat) lf1 (@cons nat n lf4)
Sketch conj2_imp_sketch5 : forall
  _ : forall (_ : sortedd (@cons nat a (@cons nat n l)))
        (_ : @eq bool (##hole##) false) (_ : le a a0) 
        (_ : le a n), lt n a0, @eq (list nat) lf1 (@cons nat n lf4)
Sketch conj2_imp_term_sketch0 : @eq Set (list nat) (##hole##)
Sketch conj2_imp_term_sketch1 : @eq (list nat) (@cons nat n lf4) (##hole##)
Sketch conj2_imp_term_sketch2 : @eq bool false (##hole##)
Sketch conj2_imp_term_sketch3 : @eq (list nat) (@cons nat n l) (##hole##)
Sketch conj2_imp_term_sketch4 : @eq (list nat) (@cons nat a (@cons nat n l)) (##hole##)
Sketch conj2_imp_term_sketch5 : @eq bool (Nat.leb a0 a) (##hole##)
Sketch conj2_sketch0 : @eq (list nat) lf1 (##hole##)
Sketch conj2_sketch1 : @eq (##hole##) lf1 (@cons nat n lf4)
Sketch conj2_term_sketch0 : @eq (list nat) (@cons nat n lf4) (##hole##)
Sketch conj2_term_sketch1 : @eq Set (list nat) (##hole##)
Sketch conj4_imp_sketch0 : forall
  _ : forall (_ : sortedd (@cons nat a (@cons nat n l)))
        (_ : @eq bool (Nat.leb a0 a) false) (_ : le a a0) 
        (_ : le a n), lt n a0, @eq (##hole##) lf1 (@cons nat n (insert a0 l))
Sketch conj4_imp_sketch2 : forall
  _ : forall (_ : sortedd (@cons nat a (@cons nat n l)))
        (_ : @eq bool (Nat.leb a0 a) (##hole##)) (_ : le a a0) 
        (_ : le a n), lt n a0, @eq (list nat) lf1 (@cons nat n (insert a0 l))
Sketch conj4_imp_sketch3 : forall
  _ : forall (_ : sortedd (@cons nat a (##hole##)))
        (_ : @eq bool (Nat.leb a0 a) false) (_ : le a a0) 
        (_ : le a n), lt n a0, @eq (list nat) lf1 (@cons nat n (insert a0 l))
Sketch conj4_imp_sketch4 : forall
  _ : forall (_ : sortedd (##hole##)) (_ : @eq bool (Nat.leb a0 a) false)
        (_ : le a a0) (_ : le a n), lt n a0,
@eq (list nat) lf1 (@cons nat n (insert a0 l))
Sketch conj4_imp_sketch5 : forall
  _ : forall (_ : sortedd (@cons nat a (@cons nat n l)))
        (_ : @eq bool (Nat.leb a0 a) false) (_ : le a a0) 
        (_ : le a n), lt n a0, @eq (list nat) lf1 (@cons nat n (##hole##))
Sketch conj4_imp_sketch6 : forall
  _ : forall (_ : sortedd (@cons nat a (@cons nat n l)))
        (_ : @eq bool (##hole##) false) (_ : le a a0) 
        (_ : le a n), lt n a0, @eq (list nat) lf1 (@cons nat n (insert a0 l))
Sketch conj4_imp_sketch1 : forall
  _ : forall (_ : sortedd (@cons nat a (@cons nat n l)))
        (_ : @eq bool (Nat.leb a0 a) false) (_ : le a a0) 
        (_ : le a n), lt n a0, @eq (list nat) lf1 (##hole##)
Sketch conj4_imp_term_sketch0 : @eq Set (list nat) (##hole##)
Sketch conj4_imp_term_sketch2 : @eq bool false (##hole##)
Sketch conj4_imp_term_sketch3 : @eq (list nat) (@cons nat n l) (##hole##)
Sketch conj4_imp_term_sketch4 : @eq (list nat) (@cons nat a (@cons nat n l)) (##hole##)
Sketch conj4_imp_term_sketch5 : @eq (list nat) (insert a0 l) (##hole##)
Sketch conj4_imp_term_sketch6 : @eq bool (Nat.leb a0 a) (##hole##)
Sketch conj4_imp_term_sketch1 : @eq (list nat) (@cons nat n (insert a0 l)) (##hole##)
Sketch conj4_sketch0 : @eq (##hole##) lf1 (@cons nat n (insert a0 l))
Sketch conj4_sketch1 : @eq (list nat) lf1 (@cons nat n (##hole##))
Sketch conj4_sketch2 : @eq (list nat) lf1 (##hole##)
Sketch conj4_term_sketch0 : @eq Set (list nat) (##hole##)
Sketch conj4_term_sketch1 : @eq (list nat) (insert a0 l) (##hole##)
Sketch conj4_term_sketch2 : @eq (list nat) (@cons nat n (insert a0 l)) (##hole##)
Sketch conj5_sketch0 : @eq (##hole##) (insert a0 lf3) lf2
Sketch conj5_sketch1 : @eq (list nat) (##hole##) lf2
Sketch conj5_term_sketch0 : @eq Set (list nat) (##hole##)
Sketch conj5_term_sketch1 : @eq (list nat) (insert a0 lf3) (##hole##)
Sketch conj6_imp_sketch0 : forall
  _ : forall (_ : sortedd (@cons nat a lf3))
        (_ : @eq bool (Nat.leb a0 a) false) (_ : le a a0) 
        (_ : le a n), lt n a0,
@eq (##hole##) (insert a0 lf3) (@cons nat n lf4)
Sketch conj6_imp_sketch2 : forall
  _ : forall (_ : sortedd (@cons nat a lf3))
        (_ : @eq bool (Nat.leb a0 a) false) (_ : le a a0) 
        (_ : le a n), lt n a0, @eq (list nat) (insert a0 lf3) (##hole##)
Sketch conj6_imp_sketch3 : forall
  _ : forall (_ : sortedd (@cons nat a lf3))
        (_ : @eq bool (Nat.leb a0 a) (##hole##)) (_ : le a a0) 
        (_ : le a n), lt n a0,
@eq (list nat) (insert a0 lf3) (@cons nat n lf4)
Sketch conj6_imp_sketch4 : forall
  _ : forall (_ : sortedd (@cons nat a lf3))
        (_ : @eq bool (Nat.leb a0 a) false) (_ : le a a0) 
        (_ : le a n), lt n a0, @eq (list nat) (##hole##) (@cons nat n lf4)
Sketch conj6_imp_sketch5 : forall
  _ : forall (_ : sortedd (@cons nat a lf3)) (_ : @eq bool (##hole##) false)
        (_ : le a a0) (_ : le a n), lt n a0,
@eq (list nat) (insert a0 lf3) (@cons nat n lf4)
Sketch conj6_imp_sketch1 : forall
  _ : forall (_ : sortedd (##hole##)) (_ : @eq bool (Nat.leb a0 a) false)
        (_ : le a a0) (_ : le a n), lt n a0,
@eq (list nat) (insert a0 lf3) (@cons nat n lf4)
Sketch conj6_imp_term_sketch0 : @eq Set (list nat) (##hole##)
Sketch conj6_imp_term_sketch2 : @eq (list nat) (@cons nat n lf4) (##hole##)
Sketch conj6_imp_term_sketch3 : @eq bool false (##hole##)
Sketch conj6_imp_term_sketch4 : @eq (list nat) (insert a0 lf3) (##hole##)
Sketch conj6_imp_term_sketch5 : @eq bool (Nat.leb a0 a) (##hole##)
Sketch conj6_imp_term_sketch1 : @eq (list nat) (@cons nat a lf3) (##hole##)
Sketch conj6_sketch0 : @eq (list nat) (insert a0 lf3) (##hole##)
Sketch conj6_sketch1 : @eq (##hole##) (insert a0 lf3) (@cons nat n lf4)
Sketch conj6_sketch2 : @eq (list nat) (##hole##) (@cons nat n lf4)
Sketch conj6_term_sketch0 : @eq (list nat) (@cons nat n lf4) (##hole##)
Sketch conj6_term_sketch1 : @eq Set (list nat) (##hole##)
Sketch conj6_term_sketch2 : @eq (list nat) (insert a0 lf3) (##hole##)
Sketch conj8_imp_sketch0 : forall
  _ : forall (_ : @eq bool (Nat.leb a0 a) false) (_ : le a a0) (_ : le a n),
      lt n a0, @eq (##hole##) (insert a0 lf3) (@cons nat n (insert a0 l))
Sketch conj8_imp_sketch2 : forall
  _ : forall (_ : @eq bool (Nat.leb a0 a) (##hole##)) 
        (_ : le a a0) (_ : le a n), lt n a0,
@eq (list nat) (insert a0 lf3) (@cons nat n (insert a0 l))
Sketch conj8_imp_sketch3 : forall
  _ : forall (_ : @eq bool (Nat.leb a0 a) false) (_ : le a a0) (_ : le a n),
      lt n a0, @eq (list nat) (insert a0 lf3) (@cons nat n (##hole##))
Sketch conj8_imp_sketch4 : forall
  _ : forall (_ : @eq bool (Nat.leb a0 a) false) (_ : le a a0) (_ : le a n),
      lt n a0, @eq (list nat) (##hole##) (@cons nat n (insert a0 l))
Sketch conj8_imp_sketch5 : forall
  _ : forall (_ : @eq bool (##hole##) false) (_ : le a a0) (_ : le a n),
      lt n a0, @eq (list nat) (insert a0 lf3) (@cons nat n (insert a0 l))
Sketch conj8_imp_sketch1 : forall
  _ : forall (_ : @eq bool (Nat.leb a0 a) false) (_ : le a a0) (_ : le a n),
      lt n a0, @eq (list nat) (insert a0 lf3) (##hole##)
Sketch conj8_imp_term_sketch0 : @eq Set (list nat) (##hole##)
Sketch conj8_imp_term_sketch2 : @eq bool false (##hole##)
Sketch conj8_imp_term_sketch3 : @eq (list nat) (insert a0 l) (##hole##)
Sketch conj8_imp_term_sketch4 : @eq (list nat) (insert a0 lf3) (##hole##)
Sketch conj8_imp_term_sketch5 : @eq bool (Nat.leb a0 a) (##hole##)
Sketch conj8_imp_term_sketch1 : @eq (list nat) (@cons nat n (insert a0 l)) (##hole##)
Sketch conj8_sketch0 : @eq (##hole##) (insert a0 lf3) (@cons nat n (insert a0 l))
Sketch conj8_sketch1 : @eq (list nat) (insert a0 lf3) (@cons nat n (##hole##))
Sketch conj8_sketch2 : @eq (list nat) (##hole##) (@cons nat n (insert a0 l))
Sketch conj8_sketch3 : @eq (list nat) (insert a0 lf3) (##hole##)
Sketch conj8_term_sketch0 : @eq Set (list nat) (##hole##)
Sketch conj8_term_sketch1 : @eq (list nat) (insert a0 l) (##hole##)
Sketch conj8_term_sketch2 : @eq (list nat) (insert a0 lf3) (##hole##)
Sketch conj8_term_sketch3 : @eq (list nat) (@cons nat n (insert a0 l)) (##hole##)
Sketch conj13_imp_sketch0 : forall
  _ : forall (_ : sortedd (@cons nat a (@cons nat n l)))
        (_ : @eq bool (Nat.leb a0 a) false) (_ : le a a0) 
        (_ : le a n), lt n a0, @eq (##hole##) (insert a0 (@cons nat n l)) lf2
Sketch conj13_imp_sketch2 : forall
  _ : forall (_ : sortedd (@cons nat a (@cons nat n l)))
        (_ : @eq bool (Nat.leb a0 a) (##hole##)) (_ : le a a0) 
        (_ : le a n), lt n a0, @eq (list nat) (insert a0 (@cons nat n l)) lf2
Sketch conj13_imp_sketch3 : forall
  _ : forall (_ : sortedd (@cons nat a (##hole##)))
        (_ : @eq bool (Nat.leb a0 a) false) (_ : le a a0) 
        (_ : le a n), lt n a0, @eq (list nat) (insert a0 (##hole##)) lf2
Sketch conj13_imp_sketch4 : forall
  _ : forall (_ : sortedd (##hole##)) (_ : @eq bool (Nat.leb a0 a) false)
        (_ : le a a0) (_ : le a n), lt n a0,
@eq (list nat) (insert a0 (@cons nat n l)) lf2
Sketch conj13_imp_sketch1 : forall
  _ : forall (_ : sortedd (@cons nat a (@cons nat n l)))
        (_ : @eq bool (Nat.leb a0 a) false) (_ : le a a0) 
        (_ : le a n), lt n a0, @eq (list nat) (##hole##) lf2
Sketch conj13_imp_sketch5 : forall
  _ : forall (_ : sortedd (@cons nat a (@cons nat n l)))
        (_ : @eq bool (##hole##) false) (_ : le a a0) 
        (_ : le a n), lt n a0, @eq (list nat) (insert a0 (@cons nat n l)) lf2
Sketch conj13_imp_term_sketch0 : @eq Set (list nat) (##hole##)
Sketch conj13_imp_term_sketch2 : @eq bool false (##hole##)
Sketch conj13_imp_term_sketch3 : @eq (list nat) (@cons nat n l) (##hole##)
Sketch conj13_imp_term_sketch4 : @eq (list nat) (@cons nat a (@cons nat n l)) (##hole##)
Sketch conj13_imp_term_sketch1 : @eq (list nat) (insert a0 (@cons nat n l)) (##hole##)
Sketch conj13_imp_term_sketch5 : @eq bool (Nat.leb a0 a) (##hole##)
Sketch conj13_sketch0 : @eq (##hole##) (insert a0 (@cons nat n l)) lf2
Sketch conj13_sketch1 : @eq (list nat) (insert a0 (##hole##)) lf2
Sketch conj13_sketch2 : @eq (list nat) (##hole##) lf2
Sketch conj13_term_sketch0 : @eq Set (list nat) (##hole##)
Sketch conj13_term_sketch1 : @eq (list nat) (@cons nat n l) (##hole##)
Sketch conj13_term_sketch2 : @eq (list nat) (insert a0 (@cons nat n l)) (##hole##)
Sketch conj14_imp_sketch0 : forall
  _ : forall (_ : sortedd (@cons nat a (@cons nat n l)))
        (_ : @eq bool (Nat.leb a0 a) false) (_ : le a a0) 
        (_ : le a n), lt n a0,
@eq (##hole##) (insert a0 (@cons nat n l)) (@cons nat n lf4)
Sketch conj14_imp_sketch2 : forall
  _ : forall (_ : sortedd (@cons nat a (@cons nat n l)))
        (_ : @eq bool (Nat.leb a0 a) false) (_ : le a a0) 
        (_ : le a n), lt n a0,
@eq (list nat) (insert a0 (@cons nat n l)) (##hole##)
Sketch conj14_imp_sketch3 : forall
  _ : forall (_ : sortedd (@cons nat a (@cons nat n l)))
        (_ : @eq bool (Nat.leb a0 a) (##hole##)) (_ : le a a0) 
        (_ : le a n), lt n a0,
@eq (list nat) (insert a0 (@cons nat n l)) (@cons nat n lf4)
Sketch conj14_imp_sketch4 : forall
  _ : forall (_ : sortedd (@cons nat a (##hole##)))
        (_ : @eq bool (Nat.leb a0 a) false) (_ : le a a0) 
        (_ : le a n), lt n a0,
@eq (list nat) (insert a0 (##hole##)) (@cons nat n lf4)
Sketch conj14_imp_sketch5 : forall
  _ : forall (_ : sortedd (##hole##)) (_ : @eq bool (Nat.leb a0 a) false)
        (_ : le a a0) (_ : le a n), lt n a0,
@eq (list nat) (insert a0 (@cons nat n l)) (@cons nat n lf4)
Sketch conj14_imp_sketch1 : forall
  _ : forall (_ : sortedd (@cons nat a (@cons nat n l)))
        (_ : @eq bool (Nat.leb a0 a) false) (_ : le a a0) 
        (_ : le a n), lt n a0, @eq (list nat) (##hole##) (@cons nat n lf4)
Sketch conj14_imp_sketch6 : forall
  _ : forall (_ : sortedd (@cons nat a (@cons nat n l)))
        (_ : @eq bool (##hole##) false) (_ : le a a0) 
        (_ : le a n), lt n a0,
@eq (list nat) (insert a0 (@cons nat n l)) (@cons nat n lf4)
Sketch conj14_imp_term_sketch0 : @eq Set (list nat) (##hole##)
Sketch conj14_imp_term_sketch2 : @eq (list nat) (@cons nat n lf4) (##hole##)
Sketch conj14_imp_term_sketch3 : @eq bool false (##hole##)
Sketch conj14_imp_term_sketch4 : @eq (list nat) (@cons nat n l) (##hole##)
Sketch conj14_imp_term_sketch5 : @eq (list nat) (@cons nat a (@cons nat n l)) (##hole##)
Sketch conj14_imp_term_sketch1 : @eq (list nat) (insert a0 (@cons nat n l)) (##hole##)
Sketch conj14_imp_term_sketch6 : @eq bool (Nat.leb a0 a) (##hole##)
Sketch conj14_sketch0 : @eq (list nat) (insert a0 (@cons nat n l)) (##hole##)
Sketch conj14_sketch1 : @eq (##hole##) (insert a0 (@cons nat n l)) (@cons nat n lf4)
Sketch conj14_sketch2 : @eq (list nat) (insert a0 (##hole##)) (@cons nat n lf4)
Sketch conj14_sketch3 : @eq (list nat) (##hole##) (@cons nat n lf4)
Sketch conj14_term_sketch0 : @eq (list nat) (@cons nat n lf4) (##hole##)
Sketch conj14_term_sketch1 : @eq Set (list nat) (##hole##)
Sketch conj14_term_sketch2 : @eq (list nat) (@cons nat n l) (##hole##)
Sketch conj14_term_sketch3 : @eq (list nat) (insert a0 (@cons nat n l)) (##hole##)
Sketch conj16_sketch0 : @eq (##hole##) (insert a0 (@cons nat n l)) (@cons nat n (insert a0 l))
Sketch conj16_sketch1 : @eq (list nat) (insert a0 (##hole##)) (@cons nat n (insert a0 l))
Sketch conj16_sketch2 : @eq (list nat) (insert a0 (@cons nat n l)) (@cons nat n (##hole##))
Sketch conj16_sketch3 : @eq (list nat) (##hole##) (@cons nat n (insert a0 l))
Sketch conj16_sketch4 : @eq (list nat) (insert a0 (@cons nat n l)) (##hole##)
Sketch conj16_term_sketch0 : @eq Set (list nat) (##hole##)
Sketch conj16_term_sketch1 : @eq (list nat) (@cons nat n l) (##hole##)
Sketch conj16_term_sketch2 : @eq (list nat) (insert a0 l) (##hole##)
Sketch conj16_term_sketch3 : @eq (list nat) (insert a0 (@cons nat n l)) (##hole##)
Sketch conj16_term_sketch4 : @eq (list nat) (@cons nat n (insert a0 l)) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 324 seconds
Problems per Sketch:
Sketch conj2_imp_term_sketch0 --> Problem  synth_2
Sketch conj2_imp_sketch5 --> Problem  synth_8
Sketch conj13_imp_term_sketch3 --> Problem  synth_11
Sketch conj6_imp_term_sketch5 --> Problem  synth_13
Sketch conj14_imp_term_sketch4 --> Problem  synth_11
Sketch conj6_imp_term_sketch3 --> Problem  synth_10
Sketch conj14_term_sketch2 --> Problem  synth_11
Sketch conj4_imp_term_sketch5 --> Problem  synth_22
Sketch conj14_imp_sketch2 --> Problem  synth_56
Sketch conj13_imp_term_sketch0 --> Problem  synth_2
Sketch conj4_sketch0 --> Problem  synth_24
Sketch conj6_imp_sketch0 --> Problem  synth_29
Sketch conj13_term_sketch1 --> Problem  synth_11
Sketch conj8_term_sketch0 --> Problem  synth_2
Sketch conj8_imp_term_sketch2 --> Problem  synth_10
Sketch conj2_term_sketch1 --> Problem  synth_2
Sketch conj6_imp_term_sketch2 --> Problem  synth_9
Sketch conj6_imp_term_sketch4 --> Problem  synth_28
Sketch conj2_imp_term_sketch3 --> Problem  synth_11
Sketch conj8_imp_sketch1 --> Problem  synth_30
Sketch conj2_imp_sketch4 --> Problem  synth_7
Sketch conj5_term_sketch0 --> Problem  synth_2
Sketch conj13_imp_sketch4 --> Problem  synth_50
Sketch conj13_term_sketch0 --> Problem  synth_2
Sketch conj1_term_sketch0 --> Problem  synth_2
Sketch conj2_imp_term_sketch5 --> Problem  synth_13
Sketch conj13_imp_term_sketch1 --> Problem  synth_46
Sketch conj16_term_sketch4 --> Problem  synth_23
Sketch conj13_imp_term_sketch4 --> Problem  synth_12
Sketch conj6_term_sketch2 --> Problem  synth_28
Sketch conj2_imp_sketch2 --> Problem  synth_5
Sketch conj13_imp_sketch0 --> Problem  synth_47
Sketch conj8_term_sketch2 --> Problem  synth_28
Sketch conj14_sketch1 --> Problem  synth_62
Sketch conj2_imp_term_sketch1 --> Problem  synth_9
Sketch conj6_imp_sketch3 --> Problem  synth_31
Sketch conj4_imp_sketch4 --> Problem  synth_19
Sketch conj2_imp_term_sketch4 --> Problem  synth_12
Sketch conj14_imp_term_sketch6 --> Problem  synth_13
Sketch conj16_sketch2 --> Problem  synth_66
Sketch conj6_imp_sketch2 --> Problem  synth_30
Sketch conj6_imp_sketch4 --> Problem  synth_32
Sketch conj2_term_sketch0 --> Problem  synth_9
Sketch conj4_imp_term_sketch1 --> Problem  synth_23
Sketch conj8_sketch2 --> Problem  synth_46
Sketch conj4_term_sketch0 --> Problem  synth_2
Sketch conj13_imp_sketch2 --> Problem  synth_48
Sketch conj8_imp_sketch5 --> Problem  synth_43
Sketch conj6_sketch0 --> Problem  synth_36
Sketch conj14_imp_sketch4 --> Problem  synth_58
Sketch conj6_sketch1 --> Problem  synth_37
Sketch conj4_imp_term_sketch2 --> Problem  synth_10
Sketch conj13_imp_term_sketch5 --> Problem  synth_13
Sketch conj6_term_sketch1 --> Problem  synth_2
Sketch conj8_imp_term_sketch0 --> Problem  synth_2
Sketch conj4_sketch1 --> Problem  synth_25
Sketch conj16_sketch0 --> Problem  synth_64
Sketch conj13_sketch1 --> Problem  synth_54
Sketch conj16_term_sketch0 --> Problem  synth_2
Sketch conj13_imp_sketch5 --> Problem  synth_52
Sketch conj16_term_sketch3 --> Problem  synth_46
Sketch conj14_imp_term_sketch5 --> Problem  synth_12
Sketch conj4_imp_sketch6 --> Problem  synth_21
Sketch conj6_imp_sketch5 --> Problem  synth_33
Sketch conj2_imp_sketch1 --> Problem  synth_4
Sketch conj8_imp_sketch4 --> Problem  synth_42
Sketch conj16_sketch3 --> Problem  synth_46
Sketch conj14_imp_sketch6 --> Problem  synth_61
Sketch conj1_sketch0 --> Problem  synth_1
Sketch conj5_term_sketch1 --> Problem  synth_28
Sketch conj14_imp_term_sketch1 --> Problem  synth_46
Sketch conj16_term_sketch1 --> Problem  synth_11
Sketch conj6_imp_term_sketch1 --> Problem  synth_35
Sketch conj2_sketch1 --> Problem  synth_15
Sketch conj8_sketch1 --> Problem  synth_45
Sketch conj6_term_sketch0 --> Problem  synth_9
Sketch conj14_term_sketch3 --> Problem  synth_46
Sketch conj14_imp_term_sketch2 --> Problem  synth_9
Sketch conj2_imp_term_sketch2 --> Problem  synth_10
Sketch conj14_term_sketch1 --> Problem  synth_2
Sketch conj8_term_sketch1 --> Problem  synth_22
Sketch conj8_imp_term_sketch3 --> Problem  synth_22
Sketch conj14_imp_sketch0 --> Problem  synth_55
Sketch conj14_imp_sketch1 --> Problem  synth_60
Sketch conj8_imp_term_sketch1 --> Problem  synth_23
Sketch conj13_term_sketch2 --> Problem  synth_46
Sketch conj4_imp_sketch3 --> Problem  synth_18
Sketch conj2_sketch0 --> Problem  synth_14
Sketch conj16_sketch1 --> Problem  synth_65
Sketch conj4_term_sketch2 --> Problem  synth_23
Sketch conj13_sketch2 --> Problem  synth_27
Sketch conj8_imp_sketch3 --> Problem  synth_41
Sketch conj16_term_sketch2 --> Problem  synth_22
Sketch conj4_imp_term_sketch3 --> Problem  synth_11
Sketch conj2_imp_sketch0 --> Problem  synth_3
Sketch conj4_imp_term_sketch6 --> Problem  synth_13
Sketch conj4_term_sketch1 --> Problem  synth_22
Sketch conj8_sketch0 --> Problem  synth_44
Sketch conj6_sketch2 --> Problem  synth_38
Sketch conj14_imp_term_sketch3 --> Problem  synth_10
Sketch conj4_imp_sketch0 --> Problem  synth_16
Sketch conj4_sketch2 --> Problem  synth_14
Sketch conj4_imp_term_sketch4 --> Problem  synth_12
Sketch conj8_imp_term_sketch5 --> Problem  synth_13
Sketch conj4_imp_sketch2 --> Problem  synth_17
Sketch conj5_sketch0 --> Problem  synth_26
Sketch conj14_sketch2 --> Problem  synth_63
Sketch conj5_sketch1 --> Problem  synth_27
Sketch conj4_imp_term_sketch0 --> Problem  synth_2
Sketch conj8_imp_term_sketch4 --> Problem  synth_28
Sketch conj6_imp_sketch1 --> Problem  synth_34
Sketch conj8_imp_sketch0 --> Problem  synth_39
Sketch conj4_imp_sketch1 --> Problem  synth_4
Sketch conj6_imp_term_sketch0 --> Problem  synth_2
Sketch conj8_term_sketch3 --> Problem  synth_23
Sketch conj16_sketch4 --> Problem  synth_23
Sketch conj13_imp_sketch1 --> Problem  synth_51
Sketch conj14_imp_term_sketch0 --> Problem  synth_2
Sketch conj13_imp_sketch3 --> Problem  synth_49
Sketch conj13_imp_term_sketch2 --> Problem  synth_10
Sketch conj4_imp_sketch5 --> Problem  synth_20
Sketch conj14_sketch0 --> Problem  synth_23
Sketch conj14_imp_sketch3 --> Problem  synth_57
Sketch conj2_imp_sketch3 --> Problem  synth_6
Sketch conj14_term_sketch0 --> Problem  synth_9
Sketch conj13_sketch0 --> Problem  synth_53
Sketch conj8_imp_sketch2 --> Problem  synth_40
Sketch conj8_sketch3 --> Problem  synth_36
Sketch conj14_sketch3 --> Problem  synth_38
Sketch conj14_imp_sketch5 --> Problem  synth_59


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 676 seconds

Problem: synth_63

Problem: synth_64

Problem: synth_11

Problem: synth_54

Problem: synth_39

Problem: synth_46

Problem: synth_66

Problem: synth_57

Problem: synth_59

Problem: synth_31
 match a with | O => false | S m' => Nat.leb a0 m' end
 match a with | O => false | S _ => true end
 match n with | O => false | S m' => Nat.leb n m' end
 match a0 with | O => false | S m' => Nat.leb a0 m' end
 false

Problem: synth_8

Problem: synth_34
 insert a lf3
 @cons nat a lf3
 insert O lf3
 @cons nat O lf3

Problem: synth_5

Problem: synth_37

Problem: synth_58

Problem: synth_53

Problem: synth_2

Problem: synth_22

Problem: synth_18

Problem: synth_21

Problem: synth_56

Problem: synth_41

Problem: synth_49

Problem: synth_25

Problem: synth_13
 Nat.leb a0 a
 Nat.leb a0 O

Problem: synth_6

Problem: synth_4

Problem: synth_38

Problem: synth_65

Problem: synth_23

Problem: synth_19

Problem: synth_10
 false

Problem: synth_24

Problem: synth_32
 insert a0 lf3

Problem: synth_48

Problem: synth_51

Problem: synth_35
 insert a lf3
 @cons nat a lf3
 insert O lf3
 @cons nat O lf3

Problem: synth_28
 insert a0 lf3

Problem: synth_17

Problem: synth_29

Problem: synth_45

Problem: synth_26

Problem: synth_9
 @cons nat n (sort (sort (sort (sort lf4))))
 @cons nat n (sort (sort (sort lf4)))
 @cons nat n (sort (sort lf4))
 @cons nat n (sort lf4)
 @cons nat n lf4

Problem: synth_30

Problem: synth_1

Problem: synth_55

Problem: synth_15

Problem: synth_14

Problem: synth_12

Problem: synth_62

Problem: synth_50

Problem: synth_20

Problem: synth_7

Problem: synth_61

Problem: synth_27

Problem: synth_42

Problem: synth_16

Problem: synth_40

Problem: synth_33
 Nat.leb a0 a
 Nat.leb a0 n
 Nat.leb a0 O

Problem: synth_47

Problem: synth_3

Problem: synth_52

Problem: synth_44

Problem: synth_60

Problem: synth_36

Problem: synth_43

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 676 seconds
Lemmas:
Lemma candidate_1: forall (a : nat) (l : list nat) (n : nat) (lf1 : list nat) (a0 : nat) (lf2 : list nat), sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) lf1 lf2.
Lemma candidate_2: forall (lf3 : list nat) (a : nat) (n : nat) (a0 : nat) (lf2 : list nat), @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 lf3) lf2.
Lemma candidate_3: forall (a : nat) (n : nat) (l : list nat) (a0 : nat), sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 (@cons nat n l)) (@cons nat n (insert a0 l)).
Lemma candidate_4: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4)   (@cons nat n (sort (sort (sort (sort lf4))))).
Lemma candidate_5: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4) (@cons nat n (sort (sort (sort lf4)))).
Lemma candidate_6: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4) (@cons nat n (sort (sort lf4))).
Lemma candidate_7: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4) (@cons nat n (sort lf4)).
Lemma candidate_8: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4) (@cons nat n lf4).
Lemma candidate_9: @eq bool false (false).
Lemma candidate_10: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.leb a0 a).
Lemma candidate_11: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.leb a0 O).
Lemma candidate_12: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4)   (@cons nat n (sort (sort (sort (sort lf4))))).
Lemma candidate_13: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4) (@cons nat n (sort (sort (sort lf4)))).
Lemma candidate_14: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4) (@cons nat n (sort (sort lf4))).
Lemma candidate_15: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4) (@cons nat n (sort lf4)).
Lemma candidate_16: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4) (@cons nat n lf4).
Lemma candidate_17: @eq bool false (false).
Lemma candidate_18: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.leb a0 a).
Lemma candidate_19: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.leb a0 O).
Lemma candidate_20: forall (lf3 : list nat) (a0 : nat), @eq (list nat) (insert a0 lf3) (insert a0 lf3).
Lemma candidate_21: forall (lf3 : list nat) (a : nat) (n : nat) (lf4 : list nat) (a0 : nat), sortedd (@cons nat a lf3) -> @eq bool (Nat.leb a0 a)   (match a with | O => false | S m' => Nat.leb a0 m' end) -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 lf3) (@cons nat n lf4).
Lemma candidate_22: forall (lf3 : list nat) (a : nat) (n : nat) (lf4 : list nat) (a0 : nat), sortedd (@cons nat a lf3) -> @eq bool (Nat.leb a0 a) (match a with | O => false | S _ => true end) -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 lf3) (@cons nat n lf4).
Lemma candidate_23: forall (lf3 : list nat) (a : nat) (n : nat) (lf4 : list nat) (a0 : nat), sortedd (@cons nat a lf3) -> @eq bool (Nat.leb a0 a)   (match n with | O => false | S m' => Nat.leb n m' end) -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 lf3) (@cons nat n lf4).
Lemma candidate_24: forall (lf3 : list nat) (a : nat) (n : nat) (lf4 : list nat) (a0 : nat), sortedd (@cons nat a lf3) -> @eq bool (Nat.leb a0 a)   (match a0 with | O => false | S m' => Nat.leb a0 m' end) -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 lf3) (@cons nat n lf4).
Lemma candidate_25: forall (lf3 : list nat) (a : nat) (n : nat) (lf4 : list nat) (a0 : nat), sortedd (@cons nat a lf3) -> @eq bool (Nat.leb a0 a) (false) -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 lf3) (@cons nat n lf4).
Lemma candidate_26: forall (lf3 : list nat) (a : nat) (n : nat) (lf4 : list nat) (a0 : nat), sortedd (@cons nat a lf3) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 lf3) (@cons nat n lf4).
Lemma candidate_27: forall (lf3 : list nat) (a : nat) (n : nat) (lf4 : list nat) (a0 : nat), sortedd (@cons nat a lf3) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 lf3) (@cons nat n lf4).
Lemma candidate_28: forall (lf3 : list nat) (a : nat) (n : nat) (lf4 : list nat) (a0 : nat), sortedd (@cons nat a lf3) -> @eq bool (Nat.leb a0 n) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 lf3) (@cons nat n lf4).
Lemma candidate_29: forall (lf3 : list nat) (a : nat) (n : nat) (lf4 : list nat) (a0 : nat), sortedd (@cons nat a lf3) -> @eq bool (Nat.leb a0 O) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 lf3) (@cons nat n lf4).
Lemma candidate_30: forall (lf3 : list nat) (a : nat) (n : nat) (lf4 : list nat) (a0 : nat), sortedd (insert a lf3) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 lf3) (@cons nat n lf4).
Lemma candidate_31: forall (lf3 : list nat) (a : nat) (n : nat) (lf4 : list nat) (a0 : nat), sortedd (@cons nat a lf3) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 lf3) (@cons nat n lf4).
Lemma candidate_32: forall (lf3 : list nat) (a : nat) (n : nat) (lf4 : list nat) (a0 : nat), sortedd (insert O lf3) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 lf3) (@cons nat n lf4).
Lemma candidate_33: forall (lf3 : list nat) (a : nat) (n : nat) (lf4 : list nat) (a0 : nat), sortedd (@cons nat O lf3) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 lf3) (@cons nat n lf4).
Lemma candidate_34: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4)   (@cons nat n (sort (sort (sort (sort lf4))))).
Lemma candidate_35: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4) (@cons nat n (sort (sort (sort lf4)))).
Lemma candidate_36: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4) (@cons nat n (sort (sort lf4))).
Lemma candidate_37: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4) (@cons nat n (sort lf4)).
Lemma candidate_38: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4) (@cons nat n lf4).
Lemma candidate_39: @eq bool false (false).
Lemma candidate_40: forall (lf3 : list nat) (a0 : nat), @eq (list nat) (insert a0 lf3) (insert a0 lf3).
Lemma candidate_41: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.leb a0 a).
Lemma candidate_42: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.leb a0 O).
Lemma candidate_43: forall (lf3 : list nat) (a : nat), @eq (list nat) (@cons nat a lf3) (insert a lf3).
Lemma candidate_44: forall (lf3 : list nat) (a : nat), @eq (list nat) (@cons nat a lf3) (@cons nat a lf3).
Lemma candidate_45: forall (lf3 : list nat) (a : nat), @eq (list nat) (@cons nat a lf3) (insert O lf3).
Lemma candidate_46: forall (lf3 : list nat) (a : nat), @eq (list nat) (@cons nat a lf3) (@cons nat O lf3).
Lemma candidate_47: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4)   (@cons nat n (sort (sort (sort (sort lf4))))).
Lemma candidate_48: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4) (@cons nat n (sort (sort (sort lf4)))).
Lemma candidate_49: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4) (@cons nat n (sort (sort lf4))).
Lemma candidate_50: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4) (@cons nat n (sort lf4)).
Lemma candidate_51: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4) (@cons nat n lf4).
Lemma candidate_52: forall (lf3 : list nat) (a0 : nat), @eq (list nat) (insert a0 lf3) (insert a0 lf3).
Lemma candidate_53: @eq bool false (false).
Lemma candidate_54: forall (lf3 : list nat) (a0 : nat), @eq (list nat) (insert a0 lf3) (insert a0 lf3).
Lemma candidate_55: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.leb a0 a).
Lemma candidate_56: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.leb a0 O).
Lemma candidate_57: forall (lf3 : list nat) (a0 : nat), @eq (list nat) (insert a0 lf3) (insert a0 lf3).
Lemma candidate_58: @eq bool false (false).
Lemma candidate_59: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.leb a0 a).
Lemma candidate_60: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.leb a0 O).
Lemma candidate_61: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4)   (@cons nat n (sort (sort (sort (sort lf4))))).
Lemma candidate_62: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4) (@cons nat n (sort (sort (sort lf4)))).
Lemma candidate_63: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4) (@cons nat n (sort (sort lf4))).
Lemma candidate_64: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4) (@cons nat n (sort lf4)).
Lemma candidate_65: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4) (@cons nat n lf4).
Lemma candidate_66: @eq bool false (false).
Lemma candidate_67: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.leb a0 a).
Lemma candidate_68: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.leb a0 O).
Lemma candidate_69: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4)   (@cons nat n (sort (sort (sort (sort lf4))))).
Lemma candidate_70: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4) (@cons nat n (sort (sort (sort lf4)))).
Lemma candidate_71: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4) (@cons nat n (sort (sort lf4))).
Lemma candidate_72: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4) (@cons nat n (sort lf4)).
Lemma candidate_73: forall (n : nat) (lf4 : list nat), @eq (list nat) (@cons nat n lf4) (@cons nat n lf4).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 737 seconds
Duplicates removed: 46
Filtered by Quickchick: 19
Filtered by script: 5
Remaining: 3

Lemmas: 
Lemma candidate_1: forall (a : nat) (l : list nat) (n : nat) (lf1 : list nat) (a0 : nat) (lf2 : list nat), sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) lf1 lf2.
Lemma candidate_28: forall (lf3 : list nat) (a : nat) (n : nat) (lf4 : list nat) (a0 : nat), sortedd (@cons nat a lf3) -> @eq bool (Nat.leb a0 n) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 lf3) (@cons nat n lf4).
Lemma candidate_3: forall (a : nat) (n : nat) (l : list nat) (a0 : nat), sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> lt n a0 -> @eq (list nat) (insert a0 (@cons nat n l)) (@cons nat n (insert a0 l)).