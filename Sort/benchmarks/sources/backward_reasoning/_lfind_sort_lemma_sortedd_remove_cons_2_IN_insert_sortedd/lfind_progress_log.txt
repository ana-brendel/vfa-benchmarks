File Information
- File name: Sort
- Original Directory: /home/anabrendel/lfind/vfa-benchmarks/Sort/benchmarks/sources/backward_reasoning/sort_lemma_sortedd_remove_cons_2_IN_insert_sortedd
- LFind Directory: /home/anabrendel/lfind/vfa-benchmarks/Sort/benchmarks/sources/backward_reasoning/_lfind_sort_lemma_sortedd_remove_cons_2_IN_insert_sortedd
- Namespace: vfa_benchmark
- Proof name: insert_sortedd
- Theorem: Theorem insert_sortedd: forall (a1 : nat) (l0 : list nat) (_ : sortedd l0), sortedd (insert a1 l0).
- Declarations: 
From lfind Require Import LFind.
From VFA Require Import Perm.

Proof Context
* Goal State: sortedd (@cons nat a (@cons nat a0 (@cons nat n l)))

* Hypothesis:
Q : forall (i j iv jv : nat) (_ : lt i j)
  (_ : @eq (option nat) (@nth_error nat (@cons nat a (@cons nat n l)) i)
         (@Some nat iv))
  (_ : @eq (option nat) (@nth_error nat (@cons nat a (@cons nat n l)) j)
         (@Some nat jv)), le iv jv
H0 : le a a0
H2 : le a0 n
H1 : @eq bool (Nat.leb a0 a) false
R : le a n
a0 : nat
H : sortedd (@cons nat a (@cons nat n l))
IHl : forall (_ : sortedd (@cons nat n l)) (a1 : nat),
sortedd (insert a1 (@cons nat n l))
l : list nat
n : nat
a : nat

* Types:
Set
option nat
Prop
bool
nat
list nat

* Polymorphic Types:
list nat
option nat

* Variables:
a0 : nat
l : list nat
n : nat
a : nat

* Terms:
list nat : Set
@eq bool (Nat.leb a0 a) false : Prop
sortedd (@cons nat a (@cons nat a0 (@cons nat n l))) : Prop
@eq (option nat)
  (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
  (@Some nat _UNBOUND_REL_3) : Prop
le a0 n : Prop
insert _UNBOUND_REL_1 (@cons nat n l) : list nat
le _UNBOUND_REL_5 _UNBOUND_REL_4 : Prop
le a a0 : Prop
forall
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat _UNBOUND_REL_3))
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat _UNBOUND_REL_3)), le _UNBOUND_REL_5 _UNBOUND_REL_4 : Prop
n : nat
@Some nat _UNBOUND_REL_3 : option nat
sortedd (@cons nat n l) : Prop
forall (i j iv jv : nat) (_ : lt i j)
  (_ : @eq (option nat) (@nth_error nat (@cons nat a (@cons nat n l)) i)
         (@Some nat iv))
  (_ : @eq (option nat) (@nth_error nat (@cons nat a (@cons nat n l)) j)
         (@Some nat jv)), le iv jv : Prop
@cons nat a (@cons nat a0 (@cons nat n l)) : list nat
@cons nat a0 (@cons nat n l) : list nat
forall a1 : nat, sortedd (insert a1 (@cons nat n l)) : Prop
lt _UNBOUND_REL_4 _UNBOUND_REL_3 : Prop
le a n : Prop
option nat : Set
forall
  _ : @eq (option nat)
        (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
        (@Some nat _UNBOUND_REL_3), le _UNBOUND_REL_5 _UNBOUND_REL_4 : Prop
l : list nat
forall (jv : nat) (_ : lt _UNBOUND_REL_4 _UNBOUND_REL_3)
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat _UNBOUND_REL_3))
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat jv)), le _UNBOUND_REL_5 jv : Prop
false : bool
nat : Set
sortedd (insert _UNBOUND_REL_1 (@cons nat n l)) : Prop
@cons nat n l : list nat
@cons nat a (@cons nat n l) : list nat
bool : Set
forall (_ : sortedd (@cons nat n l)) (a1 : nat),
sortedd (insert a1 (@cons nat n l)) : Prop
a0 : nat
forall (_ : lt _UNBOUND_REL_4 _UNBOUND_REL_3)
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat _UNBOUND_REL_3))
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat _UNBOUND_REL_3)), le _UNBOUND_REL_5 _UNBOUND_REL_4 : Prop
forall (j iv jv : nat) (_ : lt _UNBOUND_REL_4 j)
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat iv))
  (_ : @eq (option nat) (@nth_error nat (@cons nat a (@cons nat n l)) j)
         (@Some nat jv)), le iv jv : Prop
@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5 : option nat
Nat.leb a0 a : bool
forall (iv jv : nat) (_ : lt _UNBOUND_REL_4 _UNBOUND_REL_3)
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat iv))
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat jv)), le iv jv : Prop
sortedd (@cons nat a (@cons nat n l)) : Prop
a : nat

* Functions:
insert  : forall (_ : nat) (_ : list nat), list nat
le  : forall (_ : nat) (_ : nat), Prop
list  : forall _ : Type, Type
@Some  : forall (A : Type) (_ : A), option A
@cons  : forall (A : Type) (_ : A) (_ : list A), list A
option  : forall _ : Type, Type
Nat.leb  : forall (_ : nat) (_ : nat), bool
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
sortedd  : forall _ : list nat, Prop
lt  : forall (_ : nat) (_ : nat), Prop
nth_error  : forall (A : Type) (_ : list A) (_ : nat), option A

<---GENERALIZATION--->
Time elapsed: 5 seconds
Generalized Variables:
lf3 : list nat = @cons nat n l
lf1 : list nat = @cons nat a (@cons nat a0 (@cons nat n l))
lf2 : list nat = @cons nat a0 (@cons nat n l)

Generalizations:
Lemma conj1: forall (lf1 : list nat), sortedd lf1.
Lemma conj3: forall (lf2 : list nat) (a : nat), sortedd (@cons nat a lf2).
Lemma conj4: forall (a0 : nat) (a : nat) (lf3 : list nat), sortedd (@cons nat a (@cons nat a0 lf3)).
Lemma conj8: forall (a0 : nat) (l : list nat) (n : nat) (a : nat), sortedd (@cons nat a (@cons nat a0 (@cons nat n l))).


<---VALIDITY CHECKS--->
Time elapsed: 17 seconds
Valid:

Invalid:
Lemma conj8: forall (a0 : nat) (l : list nat) (n : nat) (a : nat), sortedd (@cons nat a (@cons nat a0 (@cons nat n l))).
Lemma conj4: forall (a0 : nat) (a : nat) (lf3 : list nat), sortedd (@cons nat a (@cons nat a0 lf3)).
Lemma conj3: forall (lf2 : list nat) (a : nat), sortedd (@cons nat a lf2).
Lemma conj1: forall (lf1 : list nat), sortedd lf1.

<---ADD IMPLICATIONS--->
Time elapsed: 67 seconds
Generalizations:
Lemma conj8: forall (a0 : nat) (l : list nat) (n : nat) (a : nat), sortedd (@cons nat a (@cons nat a0 (@cons nat n l))).
Lemma conj8_imp: forall (a0 : nat) (l : list nat) (n : nat) (a : nat), le a0 n -> sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> sortedd (@cons nat a (@cons nat a0 (@cons nat n l))).
Lemma conj4: forall (a0 : nat) (a : nat) (lf3 : list nat), sortedd (@cons nat a (@cons nat a0 lf3)).
Lemma conj4_imp: forall (a0 : nat) (n : nat) (a : nat) (lf3 : list nat), @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> sortedd (@cons nat a (@cons nat a0 lf3)).
Lemma conj3: forall (lf2 : list nat) (a : nat), sortedd (@cons nat a lf2).
Lemma conj3_imp: forall (lf2 : list nat) (a0 : nat) (n : nat) (l : list nat) (a : nat), sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> le a0 n -> sortedd (@cons nat a lf2).
Lemma conj1: forall (lf1 : list nat), sortedd lf1.
Lemma conj1_imp: forall (a0 : nat) (lf1 : list nat) (n : nat) (l : list nat) (a : nat), sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> le a0 n -> sortedd lf1.


<---VALIDITY CHECKS--->
Time elapsed: 81 seconds
Valid:
Lemma conj1_imp: forall (a0 : nat) (lf1 : list nat) (n : nat) (l : list nat) (a : nat), sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> le a0 n -> sortedd lf1.
Lemma conj3_imp: forall (lf2 : list nat) (a0 : nat) (n : nat) (l : list nat) (a : nat), sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> le a0 n -> sortedd (@cons nat a lf2).
Lemma conj8_imp: forall (a0 : nat) (l : list nat) (n : nat) (a : nat), le a0 n -> sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> sortedd (@cons nat a (@cons nat a0 (@cons nat n l))).

Invalid:
Lemma conj1: forall (lf1 : list nat), sortedd lf1.
Lemma conj3: forall (lf2 : list nat) (a : nat), sortedd (@cons nat a lf2).
Lemma conj4_imp: forall (a0 : nat) (n : nat) (a : nat) (lf3 : list nat), @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> sortedd (@cons nat a (@cons nat a0 lf3)).
Lemma conj4: forall (a0 : nat) (a : nat) (lf3 : list nat), sortedd (@cons nat a (@cons nat a0 lf3)).
Lemma conj8: forall (a0 : nat) (l : list nat) (n : nat) (a : nat), sortedd (@cons nat a (@cons nat a0 (@cons nat n l))).


<---CREATE SKETCHES--->
Time elapsed: 82 seconds
Sketches:
Sketch conj3_sketch0 : sortedd (##hole##)
Sketch conj3_term_sketch0 : @eq (list nat) (@cons nat a lf2) (##hole##)
Sketch conj4_imp_sketch0 : forall
  _ : forall (_ : @eq bool (Nat.leb a0 a) (##hole##)) (_ : le a a0), le a n,
sortedd (@cons nat a (@cons nat a0 lf3))
Sketch conj4_imp_sketch1 : forall _ : forall (_ : @eq bool (Nat.leb a0 a) false) (_ : le a a0), le a n,
sortedd (##hole##)
Sketch conj4_imp_sketch2 : forall _ : forall (_ : @eq bool (##hole##) false) (_ : le a a0), le a n,
sortedd (@cons nat a (@cons nat a0 lf3))
Sketch conj4_imp_sketch3 : forall _ : forall (_ : @eq bool (Nat.leb a0 a) false) (_ : le a a0), le a n,
sortedd (@cons nat a (##hole##))
Sketch conj4_imp_term_sketch0 : @eq bool false (##hole##)
Sketch conj4_imp_term_sketch1 : @eq (list nat) (@cons nat a (@cons nat a0 lf3)) (##hole##)
Sketch conj4_imp_term_sketch2 : @eq bool (Nat.leb a0 a) (##hole##)
Sketch conj4_imp_term_sketch3 : @eq (list nat) (@cons nat a0 lf3) (##hole##)
Sketch conj4_sketch0 : sortedd (##hole##)
Sketch conj4_sketch1 : sortedd (@cons nat a (##hole##))
Sketch conj4_term_sketch0 : @eq (list nat) (@cons nat a (@cons nat a0 lf3)) (##hole##)
Sketch conj4_term_sketch1 : @eq (list nat) (@cons nat a0 lf3) (##hole##)
Sketch conj8_sketch0 : sortedd (##hole##)
Sketch conj8_sketch1 : sortedd (@cons nat a (@cons nat a0 (##hole##)))
Sketch conj8_sketch2 : sortedd (@cons nat a (##hole##))
Sketch conj8_term_sketch0 : @eq (list nat) (@cons nat a (@cons nat a0 (@cons nat n l))) (##hole##)
Sketch conj8_term_sketch1 : @eq (list nat) (@cons nat n l) (##hole##)
Sketch conj8_term_sketch2 : @eq (list nat) (@cons nat a0 (@cons nat n l)) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 108 seconds
Problems per Sketch:
Sketch conj4_imp_sketch2 --> Problem  synth_5
Sketch conj3_term_sketch0 --> Problem  synth_2
Sketch conj4_imp_term_sketch2 --> Problem  synth_9
Sketch conj4_imp_term_sketch0 --> Problem  synth_7
Sketch conj4_imp_term_sketch3 --> Problem  synth_10
Sketch conj8_sketch1 --> Problem  synth_12
Sketch conj4_sketch0 --> Problem  synth_1
Sketch conj4_sketch1 --> Problem  synth_11
Sketch conj4_term_sketch1 --> Problem  synth_10
Sketch conj4_imp_sketch1 --> Problem  synth_4
Sketch conj8_term_sketch0 --> Problem  synth_13
Sketch conj4_imp_term_sketch1 --> Problem  synth_8
Sketch conj3_sketch0 --> Problem  synth_1
Sketch conj8_sketch2 --> Problem  synth_11
Sketch conj8_sketch0 --> Problem  synth_1
Sketch conj8_term_sketch1 --> Problem  synth_14
Sketch conj4_term_sketch0 --> Problem  synth_8
Sketch conj8_term_sketch2 --> Problem  synth_15
Sketch conj4_imp_sketch0 --> Problem  synth_3
Sketch conj4_imp_sketch3 --> Problem  synth_6


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 232 seconds

Problem: synth_15

Problem: synth_14

Problem: synth_10
 insert a0 lf3
 @cons nat a0 lf3

Problem: synth_8
 if Nat.leb a a0 then @cons nat a (@cons nat a0 lf3) else @cons nat a0 (insert a lf3)
 @cons nat a (@cons nat a0 lf3)
 @cons nat O (@cons nat a0 lf3)
 insert a0 (insert O lf3)
 if Nat.leb a0 O then @cons nat a0 (@cons nat O lf3) else @cons nat O (insert a0 lf3)

Problem: synth_3
 match a with | O => false | S _ => true end
 match n with | O => false | S m' => Nat.leb n m' end
 match a0 with | O => false | S m' => Nat.leb n m' end
 match a0 with | O => false | S m' => Nat.leb a0 m' end
 false

Problem: synth_9
 Nat.leb a0 a
 Nat.leb a0 O

Problem: synth_13

Problem: synth_12

Problem: synth_6

Problem: synth_11

Problem: synth_7
 false

Problem: synth_5
 Nat.leb a0 a
 Nat.leb a0 O

Problem: synth_4

Problem: synth_1

Problem: synth_2
 insert a lf2
 @cons nat a lf2
 insert O lf2
 @cons nat O lf2

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 232 seconds
Lemmas:
Lemma candidate_1: forall (a : nat) (l : list nat) (n : nat) (lf1 : list nat) (a0 : nat), sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> le a0 n -> sortedd lf1.
Lemma candidate_2: forall (a : nat) (l : list nat) (n : nat) (a0 : nat) (lf2 : list nat), sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> le a0 n -> sortedd (@cons nat a lf2).
Lemma candidate_3: forall (a : nat) (n : nat) (l : list nat) (a0 : nat), le a0 n -> sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> sortedd (@cons nat a (@cons nat a0 (@cons nat n l))).
Lemma candidate_4: forall (a : nat) (lf2 : list nat), @eq (list nat) (@cons nat a lf2) (insert a lf2).
Lemma candidate_5: forall (a : nat) (lf2 : list nat), @eq (list nat) (@cons nat a lf2) (@cons nat a lf2).
Lemma candidate_6: forall (a : nat) (lf2 : list nat), @eq (list nat) (@cons nat a lf2) (insert O lf2).
Lemma candidate_7: forall (a : nat) (lf2 : list nat), @eq (list nat) (@cons nat a lf2) (@cons nat O lf2).
Lemma candidate_8: forall (lf3 : list nat) (a : nat) (n : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (match a with | O => false | S _ => true end) -> le a a0 -> le a n -> sortedd (@cons nat a (@cons nat a0 lf3)).
Lemma candidate_9: forall (lf3 : list nat) (a : nat) (n : nat) (a0 : nat), @eq bool (Nat.leb a0 a)   (match n with | O => false | S m' => Nat.leb n m' end) -> le a a0 -> le a n -> sortedd (@cons nat a (@cons nat a0 lf3)).
Lemma candidate_10: forall (lf3 : list nat) (a : nat) (n : nat) (a0 : nat), @eq bool (Nat.leb a0 a)   (match a0 with | O => false | S m' => Nat.leb n m' end) -> le a a0 -> le a n -> sortedd (@cons nat a (@cons nat a0 lf3)).
Lemma candidate_11: forall (lf3 : list nat) (a : nat) (n : nat) (a0 : nat), @eq bool (Nat.leb a0 a)   (match a0 with | O => false | S m' => Nat.leb a0 m' end) -> le a a0 -> le a n -> sortedd (@cons nat a (@cons nat a0 lf3)).
Lemma candidate_12: forall (lf3 : list nat) (a : nat) (n : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (false) -> le a a0 -> le a n -> sortedd (@cons nat a (@cons nat a0 lf3)).
Lemma candidate_13: forall (lf3 : list nat) (a : nat) (n : nat) (a0 : nat), @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> sortedd (@cons nat a (@cons nat a0 lf3)).
Lemma candidate_14: forall (lf3 : list nat) (a : nat) (n : nat) (a0 : nat), @eq bool (Nat.leb a0 O) false -> le a a0 -> le a n -> sortedd (@cons nat a (@cons nat a0 lf3)).
Lemma candidate_15: @eq bool false (false).
Lemma candidate_16: forall (lf3 : list nat) (a : nat) (a0 : nat), @eq (list nat) (@cons nat a (@cons nat a0 lf3))   (if Nat.leb a a0 then @cons nat a (@cons nat a0 lf3) else @cons nat a0 (insert a lf3)).
Lemma candidate_17: forall (lf3 : list nat) (a : nat) (a0 : nat), @eq (list nat) (@cons nat a (@cons nat a0 lf3))   (@cons nat a (@cons nat a0 lf3)).
Lemma candidate_18: forall (lf3 : list nat) (a : nat) (a0 : nat), @eq (list nat) (@cons nat a (@cons nat a0 lf3))   (@cons nat O (@cons nat a0 lf3)).
Lemma candidate_19: forall (lf3 : list nat) (a : nat) (a0 : nat), @eq (list nat) (@cons nat a (@cons nat a0 lf3)) (insert a0 (insert O lf3)).
Lemma candidate_20: forall (lf3 : list nat) (a : nat) (a0 : nat), @eq (list nat) (@cons nat a (@cons nat a0 lf3))   (if Nat.leb a0 O then @cons nat a0 (@cons nat O lf3) else @cons nat O (insert a0 lf3)).
Lemma candidate_21: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.leb a0 a).
Lemma candidate_22: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.leb a0 O).
Lemma candidate_23: forall (lf3 : list nat) (a0 : nat), @eq (list nat) (@cons nat a0 lf3) (insert a0 lf3).
Lemma candidate_24: forall (lf3 : list nat) (a0 : nat), @eq (list nat) (@cons nat a0 lf3) (@cons nat a0 lf3).
Lemma candidate_25: forall (lf3 : list nat) (a : nat) (a0 : nat), @eq (list nat) (@cons nat a (@cons nat a0 lf3))   (if Nat.leb a a0 then @cons nat a (@cons nat a0 lf3) else @cons nat a0 (insert a lf3)).
Lemma candidate_26: forall (lf3 : list nat) (a : nat) (a0 : nat), @eq (list nat) (@cons nat a (@cons nat a0 lf3))   (@cons nat a (@cons nat a0 lf3)).
Lemma candidate_27: forall (lf3 : list nat) (a : nat) (a0 : nat), @eq (list nat) (@cons nat a (@cons nat a0 lf3))   (@cons nat O (@cons nat a0 lf3)).
Lemma candidate_28: forall (lf3 : list nat) (a : nat) (a0 : nat), @eq (list nat) (@cons nat a (@cons nat a0 lf3)) (insert a0 (insert O lf3)).
Lemma candidate_29: forall (lf3 : list nat) (a : nat) (a0 : nat), @eq (list nat) (@cons nat a (@cons nat a0 lf3))   (if Nat.leb a0 O then @cons nat a0 (@cons nat O lf3) else @cons nat O (insert a0 lf3)).
Lemma candidate_30: forall (lf3 : list nat) (a0 : nat), @eq (list nat) (@cons nat a0 lf3) (insert a0 lf3).
Lemma candidate_31: forall (lf3 : list nat) (a0 : nat), @eq (list nat) (@cons nat a0 lf3) (@cons nat a0 lf3).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 285 seconds
Duplicates removed: 7
Filtered by Quickchick: 16
Filtered by script: 5
Remaining: 3

Lemmas: 
Lemma candidate_1: forall (a : nat) (l : list nat) (n : nat) (lf1 : list nat) (a0 : nat), sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> le a0 n -> sortedd lf1.
Lemma candidate_2: forall (a : nat) (l : list nat) (n : nat) (a0 : nat) (lf2 : list nat), sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> le a0 n -> sortedd (@cons nat a lf2).
Lemma candidate_3: forall (a : nat) (n : nat) (l : list nat) (a0 : nat), le a0 n -> sortedd (@cons nat a (@cons nat n l)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> le a n -> sortedd (@cons nat a (@cons nat a0 (@cons nat n l))).