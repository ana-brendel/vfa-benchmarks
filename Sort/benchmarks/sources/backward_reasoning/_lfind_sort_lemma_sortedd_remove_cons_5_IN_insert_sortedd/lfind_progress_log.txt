File Information
- File name: Sort
- Original Directory: /home/anabrendel/lfind/vfa-benchmarks/Sort/benchmarks/sources/backward_reasoning/sort_lemma_sortedd_remove_cons_5_IN_insert_sortedd
- LFind Directory: /home/anabrendel/lfind/vfa-benchmarks/Sort/benchmarks/sources/backward_reasoning/_lfind_sort_lemma_sortedd_remove_cons_5_IN_insert_sortedd
- Namespace: vfa_benchmark
- Proof name: insert_sortedd
- Theorem: Theorem insert_sortedd: forall (a1 : nat) (l0 : list nat) (_ : sortedd l0), sortedd (insert a1 l0).
- Declarations: 
From lfind Require Import LFind.
From VFA Require Import Perm.

Proof Context
* Goal State: sortedd (@cons nat a0 (@cons nat a l))

* Hypothesis:
H0 : @eq bool (Nat.leb a0 a) true
a0 : nat
H : sortedd (@cons nat a l)
IHl : forall (_ : sortedd l) (a1 : nat), sortedd (insert a1 l)
l : list nat
a : nat
P : or (@eq bool false false)
  (or (@eq bool (Nat.eqb a0 a) true) (@eq bool (Nat.leb a0 a) false))

* Types:
Set
Prop
bool
nat
list nat

* Polymorphic Types:
list nat

* Variables:
a0 : nat
l : list nat
a : nat

* Terms:
list nat : Set
@cons nat a l : list nat
@eq bool (Nat.leb a0 a) false : Prop
sortedd (insert _UNBOUND_REL_1 l) : Prop
forall (_ : sortedd l) (a1 : nat), sortedd (insert a1 l) : Prop
@eq bool (Nat.leb a0 a) true : Prop
sortedd l : Prop
insert _UNBOUND_REL_1 l : list nat
true : bool
l : list nat
forall a1 : nat, sortedd (insert a1 l) : Prop
@eq bool (Nat.eqb a0 a) true : Prop
or (@eq bool false false)
  (or (@eq bool (Nat.eqb a0 a) true) (@eq bool (Nat.leb a0 a) false)) : Prop
or (@eq bool (Nat.eqb a0 a) true) (@eq bool (Nat.leb a0 a) false) : Prop
false : bool
@eq bool false false : Prop
nat : Set
bool : Set
sortedd (@cons nat a l) : Prop
Nat.eqb a0 a : bool
sortedd (@cons nat a0 (@cons nat a l)) : Prop
a0 : nat
Nat.leb a0 a : bool
a : nat
@cons nat a0 (@cons nat a l) : list nat

* Functions:
insert  : forall (_ : nat) (_ : list nat), list nat
Nat.eqb  : forall (_ : nat) (_ : nat), bool
list  : forall _ : Type, Type
@cons  : forall (A : Type) (_ : A) (_ : list A), list A
Nat.leb  : forall (_ : nat) (_ : nat), bool
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
sortedd  : forall _ : list nat, Prop
or  : forall (_ : Prop) (_ : Prop), Prop

<---GENERALIZATION--->
Time elapsed: 3 seconds
Generalized Variables:
lf1 : list nat = @cons nat a0 (@cons nat a l)
lf2 : list nat = @cons nat a l

Generalizations:
Lemma conj1: forall (lf1 : list nat), sortedd lf1.
Lemma conj3: forall (lf2 : list nat) (a0 : nat), sortedd (@cons nat a0 lf2).
Lemma conj4: forall (a0 : nat) (l : list nat) (a : nat), sortedd (@cons nat a0 (@cons nat a l)).


<---VALIDITY CHECKS--->
Time elapsed: 13 seconds
Valid:

Invalid:
Lemma conj4: forall (a0 : nat) (l : list nat) (a : nat), sortedd (@cons nat a0 (@cons nat a l)).
Lemma conj3: forall (lf2 : list nat) (a0 : nat), sortedd (@cons nat a0 lf2).
Lemma conj1: forall (lf1 : list nat), sortedd lf1.

<---ADD IMPLICATIONS--->
Time elapsed: 36 seconds
Generalizations:
Lemma conj4: forall (a0 : nat) (l : list nat) (a : nat), sortedd (@cons nat a0 (@cons nat a l)).
Lemma conj4_imp: forall (a0 : nat) (l : list nat) (a : nat), sortedd (@cons nat a l) -> @eq bool (Nat.leb a0 a) true -> sortedd (@cons nat a0 (@cons nat a l)).
Lemma conj3: forall (lf2 : list nat) (a0 : nat), sortedd (@cons nat a0 lf2).
Lemma conj3_imp: forall (lf2 : list nat) (a0 : nat) (a : nat), sortedd lf2 -> @eq bool (Nat.leb a0 a) true -> sortedd (@cons nat a0 lf2).
Lemma conj1: forall (lf1 : list nat), sortedd lf1.
Lemma conj1_imp: forall (a0 : nat) (lf1 : list nat) (l : list nat) (a : nat), sortedd (@cons nat a l) -> @eq bool (Nat.leb a0 a) true -> sortedd lf1.


<---VALIDITY CHECKS--->
Time elapsed: 48 seconds
Valid:
Lemma conj1_imp: forall (a0 : nat) (lf1 : list nat) (l : list nat) (a : nat), sortedd (@cons nat a l) -> @eq bool (Nat.leb a0 a) true -> sortedd lf1.
Lemma conj4_imp: forall (a0 : nat) (l : list nat) (a : nat), sortedd (@cons nat a l) -> @eq bool (Nat.leb a0 a) true -> sortedd (@cons nat a0 (@cons nat a l)).

Invalid:
Lemma conj1: forall (lf1 : list nat), sortedd lf1.
Lemma conj3_imp: forall (lf2 : list nat) (a0 : nat) (a : nat), sortedd lf2 -> @eq bool (Nat.leb a0 a) true -> sortedd (@cons nat a0 lf2).
Lemma conj3: forall (lf2 : list nat) (a0 : nat), sortedd (@cons nat a0 lf2).
Lemma conj4: forall (a0 : nat) (l : list nat) (a : nat), sortedd (@cons nat a0 (@cons nat a l)).


<---CREATE SKETCHES--->
Time elapsed: 49 seconds
Sketches:
Sketch conj3_imp_sketch0 : forall (_ : sortedd lf2) (_ : @eq bool (Nat.leb a0 a) true),
sortedd (##hole##)
Sketch conj3_imp_sketch1 : forall (_ : sortedd lf2) (_ : @eq bool (##hole##) true),
sortedd (@cons nat a0 lf2)
Sketch conj3_imp_sketch2 : forall (_ : sortedd lf2) (_ : @eq bool (Nat.leb a0 a) (##hole##)),
sortedd (@cons nat a0 lf2)
Sketch conj3_imp_term_sketch0 : @eq (list nat) (@cons nat a0 lf2) (##hole##)
Sketch conj3_imp_term_sketch1 : @eq bool (Nat.leb a0 a) (##hole##)
Sketch conj3_imp_term_sketch2 : @eq bool true (##hole##)
Sketch conj3_sketch0 : sortedd (##hole##)
Sketch conj3_term_sketch0 : @eq (list nat) (@cons nat a0 lf2) (##hole##)
Sketch conj4_sketch0 : sortedd (@cons nat a0 (##hole##))
Sketch conj4_sketch1 : sortedd (##hole##)
Sketch conj4_term_sketch0 : @eq (list nat) (@cons nat a l) (##hole##)
Sketch conj4_term_sketch1 : @eq (list nat) (@cons nat a0 (@cons nat a l)) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 70 seconds
Problems per Sketch:
Sketch conj4_term_sketch1 --> Problem  synth_10
Sketch conj3_imp_term_sketch0 --> Problem  synth_4
Sketch conj3_sketch0 --> Problem  synth_7
Sketch conj3_term_sketch0 --> Problem  synth_4
Sketch conj3_imp_term_sketch2 --> Problem  synth_6
Sketch conj3_imp_term_sketch1 --> Problem  synth_5
Sketch conj3_imp_sketch1 --> Problem  synth_2
Sketch conj3_imp_sketch0 --> Problem  synth_1
Sketch conj4_term_sketch0 --> Problem  synth_9
Sketch conj3_imp_sketch2 --> Problem  synth_3
Sketch conj4_sketch0 --> Problem  synth_8
Sketch conj4_sketch1 --> Problem  synth_7


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 134 seconds

Problem: synth_10

Problem: synth_8

Problem: synth_3
 Nat.leb a a
 Nat.leb a0 a
 Nat.eqb a0 a0
 Nat.leb a0 a0
 true

Problem: synth_9

Problem: synth_6
 true

Problem: synth_7

Problem: synth_5
 Nat.leb a a
 Nat.leb a0 a
 Nat.eqb a0 a0
 Nat.leb a0 a0
 true

Problem: synth_4
 insert a0 lf2
 @cons nat a0 lf2

Problem: synth_1
 insert a0 lf2
 @cons nat a0 lf2

Problem: synth_2
 Nat.leb a0 (S a0)
 Nat.leb a0 (S O)
 Nat.eqb a0 a0
 Nat.leb a0 a0
 true

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 134 seconds
Lemmas:
Lemma candidate_1: forall (a : nat) (l : list nat) (lf1 : list nat) (a0 : nat), sortedd (@cons nat a l) -> @eq bool (Nat.leb a0 a) true -> sortedd lf1.
Lemma candidate_2: forall (a : nat) (l : list nat) (a0 : nat), sortedd (@cons nat a l) -> @eq bool (Nat.leb a0 a) true -> sortedd (@cons nat a0 (@cons nat a l)).
Lemma candidate_3: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd lf2 -> @eq bool (Nat.leb a0 a) true -> sortedd (insert a0 lf2).
Lemma candidate_4: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd lf2 -> @eq bool (Nat.leb a0 a) true -> sortedd (@cons nat a0 lf2).
Lemma candidate_5: forall (a0 : nat) (lf2 : list nat), sortedd lf2 -> @eq bool (Nat.leb a0 (S a0)) true -> sortedd (@cons nat a0 lf2).
Lemma candidate_6: forall (a0 : nat) (lf2 : list nat), sortedd lf2 -> @eq bool (Nat.leb a0 (S O)) true -> sortedd (@cons nat a0 lf2).
Lemma candidate_7: forall (a0 : nat) (lf2 : list nat), sortedd lf2 -> @eq bool (Nat.eqb a0 a0) true -> sortedd (@cons nat a0 lf2).
Lemma candidate_8: forall (a0 : nat) (lf2 : list nat), sortedd lf2 -> @eq bool (Nat.leb a0 a0) true -> sortedd (@cons nat a0 lf2).
Lemma candidate_9: forall (a0 : nat) (lf2 : list nat), sortedd lf2 -> @eq bool (true) true -> sortedd (@cons nat a0 lf2).
Lemma candidate_10: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd lf2 -> @eq bool (Nat.leb a0 a) (Nat.leb a a) -> sortedd (@cons nat a0 lf2).
Lemma candidate_11: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd lf2 -> @eq bool (Nat.leb a0 a) (Nat.leb a0 a) -> sortedd (@cons nat a0 lf2).
Lemma candidate_12: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd lf2 -> @eq bool (Nat.leb a0 a) (Nat.eqb a0 a0) -> sortedd (@cons nat a0 lf2).
Lemma candidate_13: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd lf2 -> @eq bool (Nat.leb a0 a) (Nat.leb a0 a0) -> sortedd (@cons nat a0 lf2).
Lemma candidate_14: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd lf2 -> @eq bool (Nat.leb a0 a) (true) -> sortedd (@cons nat a0 lf2).
Lemma candidate_15: forall (a0 : nat) (lf2 : list nat), @eq (list nat) (@cons nat a0 lf2) (insert a0 lf2).
Lemma candidate_16: forall (a0 : nat) (lf2 : list nat), @eq (list nat) (@cons nat a0 lf2) (@cons nat a0 lf2).
Lemma candidate_17: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.leb a a).
Lemma candidate_18: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.leb a0 a).
Lemma candidate_19: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.eqb a0 a0).
Lemma candidate_20: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.leb a0 a0).
Lemma candidate_21: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (true).
Lemma candidate_22: @eq bool true (true).
Lemma candidate_23: forall (a0 : nat) (lf2 : list nat), @eq (list nat) (@cons nat a0 lf2) (insert a0 lf2).
Lemma candidate_24: forall (a0 : nat) (lf2 : list nat), @eq (list nat) (@cons nat a0 lf2) (@cons nat a0 lf2).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 183 seconds
Duplicates removed: 2
Filtered by Quickchick: 16
Filtered by script: 3
Remaining: 3

Lemmas: 
Lemma candidate_3: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd lf2 -> @eq bool (Nat.leb a0 a) true -> sortedd (insert a0 lf2).
Lemma candidate_1: forall (a : nat) (l : list nat) (lf1 : list nat) (a0 : nat), sortedd (@cons nat a l) -> @eq bool (Nat.leb a0 a) true -> sortedd lf1.
Lemma candidate_2: forall (a : nat) (l : list nat) (a0 : nat), sortedd (@cons nat a l) -> @eq bool (Nat.leb a0 a) true -> sortedd (@cons nat a0 (@cons nat a l)).