File Information
- File name: Sort
- Original Directory: /home/anabrendel/lfind/vfa-benchmarks/Sort/benchmarks/sources/backward_reasoning/sort_lemma_sortedd_single_2_IN_insert_sortedd
- LFind Directory: /home/anabrendel/lfind/vfa-benchmarks/Sort/benchmarks/sources/backward_reasoning/_lfind_sort_lemma_sortedd_single_2_IN_insert_sortedd
- Namespace: vfa_benchmark
- Proof name: insert_sortedd
- Theorem: Theorem insert_sortedd: forall (a1 : nat) (l : list nat) (_ : sortedd l), sortedd (insert a1 l).
- Declarations: 
From lfind Require Import LFind.
From VFA Require Import Perm.

Proof Context
* Goal State: sortedd (@cons nat a0 (@nil nat))

* Hypothesis:
H0 : le a a0
H1 : @eq bool (Nat.leb a0 a) false
a0 : nat
H : sortedd (@cons nat a (@nil nat))
IHl : forall (_ : sortedd (@nil nat)) (a1 : nat), sortedd (insert a1 (@nil nat))
a : nat

* Types:
Set
Prop
bool
nat
list nat

* Polymorphic Types:


* Variables:
a0 : nat
a : nat

* Terms:
sortedd (@cons nat a (@nil nat)) : Prop
@eq bool (Nat.leb a0 a) false : Prop
insert _UNBOUND_REL_1 (@nil nat) : list nat
@cons nat a (@nil nat) : list nat
forall (_ : sortedd (@nil nat)) (a1 : nat), sortedd (insert a1 (@nil nat)) : Prop
sortedd (@cons nat a0 (@nil nat)) : Prop
sortedd (@nil nat) : Prop
false : bool
nat : Set
forall a1 : nat, sortedd (insert a1 (@nil nat)) : Prop
bool : Set
le a a0 : Prop
a0 : nat
Nat.leb a0 a : bool
sortedd (insert _UNBOUND_REL_1 (@nil nat)) : Prop
a : nat
@nil nat : list nat
@cons nat a0 (@nil nat) : list nat

* Functions:
insert  : forall (_ : nat) (_ : list nat), list nat
le  : forall (_ : nat) (_ : nat), Prop
@nil  : forall A : Type, list A
@cons  : forall (A : Type) (_ : A) (_ : list A), list A
Nat.leb  : forall (_ : nat) (_ : nat), bool
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
sortedd  : forall _ : list nat, Prop

<---GENERALIZATION--->
Time elapsed: 4 seconds
Generalized Variables:
lf1 : list nat = @cons nat a0 (@nil nat)
lf2 : list nat = @nil nat

Generalizations:
Lemma conj1: forall (lf1 : list nat), sortedd lf1.
Lemma conj3: forall (lf2 : list nat) (a0 : nat), sortedd (@cons nat a0 lf2).
Lemma conj4: forall (a0 : nat), sortedd (@cons nat a0 (@nil nat)).


<---VALIDITY CHECKS--->
Time elapsed: 25 seconds
Valid:
Lemma conj4: forall (a0 : nat), sortedd (@cons nat a0 (@nil nat)).

Invalid:
Lemma conj3: forall (lf2 : list nat) (a0 : nat), sortedd (@cons nat a0 lf2).
Lemma conj1: forall (lf1 : list nat), sortedd lf1.

<---ADD IMPLICATIONS--->
Time elapsed: 41 seconds
Generalizations:
Lemma conj3: forall (lf2 : list nat) (a0 : nat), sortedd (@cons nat a0 lf2).
Lemma conj3_imp: forall (lf2 : list nat) (a0 : nat) (a : nat), sortedd (@cons nat a lf2) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> sortedd (@cons nat a0 lf2).
Lemma conj1: forall (lf1 : list nat), sortedd lf1.
Lemma conj1_imp: forall (a0 : nat) (lf1 : list nat) (a : nat), @eq bool (Nat.leb a0 a) false -> le a a0 -> sortedd lf1.


<---VALIDITY CHECKS--->
Time elapsed: 49 seconds
Valid:

Invalid:
Lemma conj1_imp: forall (a0 : nat) (lf1 : list nat) (a : nat), @eq bool (Nat.leb a0 a) false -> le a a0 -> sortedd lf1.
Lemma conj1: forall (lf1 : list nat), sortedd lf1.
Lemma conj3_imp: forall (lf2 : list nat) (a0 : nat) (a : nat), sortedd (@cons nat a lf2) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> sortedd (@cons nat a0 lf2).
Lemma conj3: forall (lf2 : list nat) (a0 : nat), sortedd (@cons nat a0 lf2).


<---CREATE SKETCHES--->
Time elapsed: 50 seconds
Sketches:
Sketch conj1_imp_sketch0 : forall _ : forall _ : @eq bool (Nat.leb a0 a) (##hole##), le a a0,
sortedd lf1
Sketch conj1_imp_sketch1 : forall _ : forall _ : @eq bool (##hole##) false, le a a0, sortedd lf1
Sketch conj1_imp_term_sketch0 : @eq bool false (##hole##)
Sketch conj1_imp_term_sketch1 : @eq bool (Nat.leb a0 a) (##hole##)
Sketch conj3_imp_sketch0 : forall
  _ : forall (_ : sortedd (@cons nat a lf2))
        (_ : @eq bool (Nat.leb a0 a) false), le a a0, 
sortedd (##hole##)
Sketch conj3_imp_sketch1 : forall
  _ : forall (_ : sortedd (@cons nat a lf2))
        (_ : @eq bool (Nat.leb a0 a) (##hole##)), 
      le a a0, sortedd (@cons nat a0 lf2)
Sketch conj3_imp_sketch2 : forall
  _ : forall (_ : sortedd (##hole##)) (_ : @eq bool (Nat.leb a0 a) false),
      le a a0, sortedd (@cons nat a0 lf2)
Sketch conj3_imp_sketch3 : forall
  _ : forall (_ : sortedd (@cons nat a lf2)) (_ : @eq bool (##hole##) false),
      le a a0, sortedd (@cons nat a0 lf2)
Sketch conj3_imp_term_sketch0 : @eq (list nat) (@cons nat a0 lf2) (##hole##)
Sketch conj3_imp_term_sketch1 : @eq bool false (##hole##)
Sketch conj3_imp_term_sketch2 : @eq (list nat) (@cons nat a lf2) (##hole##)
Sketch conj3_imp_term_sketch3 : @eq bool (Nat.leb a0 a) (##hole##)
Sketch conj3_sketch0 : sortedd (##hole##)
Sketch conj3_term_sketch0 : @eq (list nat) (@cons nat a0 lf2) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 152 seconds
Problems per Sketch:
Sketch conj3_imp_term_sketch0 --> Problem  synth_9
Sketch conj3_sketch0 --> Problem  synth_11
Sketch conj3_imp_sketch3 --> Problem  synth_8
Sketch conj1_imp_sketch1 --> Problem  synth_2
Sketch conj3_term_sketch0 --> Problem  synth_9
Sketch conj3_imp_term_sketch2 --> Problem  synth_10
Sketch conj3_imp_term_sketch1 --> Problem  synth_3
Sketch conj3_imp_term_sketch3 --> Problem  synth_4
Sketch conj3_imp_sketch1 --> Problem  synth_6
Sketch conj3_imp_sketch0 --> Problem  synth_5
Sketch conj1_imp_term_sketch1 --> Problem  synth_4
Sketch conj3_imp_sketch2 --> Problem  synth_7
Sketch conj1_imp_term_sketch0 --> Problem  synth_3
Sketch conj1_imp_sketch0 --> Problem  synth_1


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 216 seconds

Problem: synth_10
 insert a (sort lf2)
 @cons nat a (sort lf2)
 insert a lf2
 @cons nat a lf2
 @cons nat a (@nil nat)

Problem: synth_8
 Nat.leb a0 a

Problem: synth_3
 false

Problem: synth_9
 insert a0 (sort lf2)
 @cons nat a0 (sort lf2)
 insert a0 lf2
 @cons nat a0 lf2
 @cons nat a0 (@nil nat)

Problem: synth_6
 match a with | S (S m'0) => Nat.leb a m'0 | _ => false end
 match a0 with | S (S m'0) => Nat.leb a0 m'0 | _ => false end
 match a with | O => false | S m' => Nat.leb a m' end
 match a0 with | O => false | S m' => Nat.leb a0 m' end
 false

Problem: synth_11

Problem: synth_7
 insert a (sort lf2)
 @cons nat a (sort lf2)
 insert a lf2
 @cons nat a lf2
 @cons nat a (@nil nat)

Problem: synth_5
 insert a0 (sort lf2)
 @cons nat a0 (sort lf2)
 insert a0 lf2
 @cons nat a0 lf2
 @cons nat a0 (@nil nat)

Problem: synth_4
 Nat.leb a0 a

Problem: synth_1
 match a with | S (S m'0) => Nat.leb a m'0 | _ => false end
 match a0 with | S (S m'0) => Nat.leb a0 m'0 | _ => false end
 match a with | O => false | S m' => Nat.leb a m' end
 match a0 with | O => false | S m' => Nat.leb a0 m' end
 false

Problem: synth_2
 Nat.leb a0 a

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 217 seconds
Lemmas:
Lemma candidate_1: forall (a0 : nat), sortedd (@cons nat a0 (@nil nat)).
Lemma candidate_2: forall (a : nat) (lf1 : list nat) (a0 : nat), @eq bool (Nat.leb a0 a)   (match a with | S (S m'0) => Nat.leb a m'0 | _ => false end) -> le a a0 -> sortedd lf1.
Lemma candidate_3: forall (a : nat) (lf1 : list nat) (a0 : nat), @eq bool (Nat.leb a0 a)   (match a0 with | S (S m'0) => Nat.leb a0 m'0 | _ => false end) -> le a a0 -> sortedd lf1.
Lemma candidate_4: forall (a : nat) (lf1 : list nat) (a0 : nat), @eq bool (Nat.leb a0 a)   (match a with | O => false | S m' => Nat.leb a m' end) -> le a a0 -> sortedd lf1.
Lemma candidate_5: forall (a : nat) (lf1 : list nat) (a0 : nat), @eq bool (Nat.leb a0 a)   (match a0 with | O => false | S m' => Nat.leb a0 m' end) -> le a a0 -> sortedd lf1.
Lemma candidate_6: forall (a : nat) (lf1 : list nat) (a0 : nat), @eq bool (Nat.leb a0 a) (false) -> le a a0 -> sortedd lf1.
Lemma candidate_7: forall (a : nat) (lf1 : list nat) (a0 : nat), @eq bool (Nat.leb a0 a) false -> le a a0 -> sortedd lf1.
Lemma candidate_8: @eq bool false (false).
Lemma candidate_9: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.leb a0 a).
Lemma candidate_10: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd (@cons nat a lf2) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> sortedd (insert a0 (sort lf2)).
Lemma candidate_11: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd (@cons nat a lf2) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> sortedd (@cons nat a0 (sort lf2)).
Lemma candidate_12: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd (@cons nat a lf2) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> sortedd (insert a0 lf2).
Lemma candidate_13: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd (@cons nat a lf2) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> sortedd (@cons nat a0 lf2).
Lemma candidate_14: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd (@cons nat a lf2) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> sortedd (@cons nat a0 (@nil nat)).
Lemma candidate_15: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd (@cons nat a lf2) -> @eq bool (Nat.leb a0 a)   (match a with | S (S m'0) => Nat.leb a m'0 | _ => false end) -> le a a0 -> sortedd (@cons nat a0 lf2).
Lemma candidate_16: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd (@cons nat a lf2) -> @eq bool (Nat.leb a0 a)   (match a0 with | S (S m'0) => Nat.leb a0 m'0 | _ => false end) -> le a a0 -> sortedd (@cons nat a0 lf2).
Lemma candidate_17: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd (@cons nat a lf2) -> @eq bool (Nat.leb a0 a)   (match a with | O => false | S m' => Nat.leb a m' end) -> le a a0 -> sortedd (@cons nat a0 lf2).
Lemma candidate_18: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd (@cons nat a lf2) -> @eq bool (Nat.leb a0 a)   (match a0 with | O => false | S m' => Nat.leb a0 m' end) -> le a a0 -> sortedd (@cons nat a0 lf2).
Lemma candidate_19: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd (@cons nat a lf2) -> @eq bool (Nat.leb a0 a) (false) -> le a a0 -> sortedd (@cons nat a0 lf2).
Lemma candidate_20: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd (insert a (sort lf2)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> sortedd (@cons nat a0 lf2).
Lemma candidate_21: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd (@cons nat a (sort lf2)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> sortedd (@cons nat a0 lf2).
Lemma candidate_22: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd (insert a lf2) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> sortedd (@cons nat a0 lf2).
Lemma candidate_23: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd (@cons nat a lf2) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> sortedd (@cons nat a0 lf2).
Lemma candidate_24: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd (@cons nat a (@nil nat)) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> sortedd (@cons nat a0 lf2).
Lemma candidate_25: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd (@cons nat a lf2) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> sortedd (@cons nat a0 lf2).
Lemma candidate_26: forall (a0 : nat) (lf2 : list nat), @eq (list nat) (@cons nat a0 lf2) (insert a0 (sort lf2)).
Lemma candidate_27: forall (a0 : nat) (lf2 : list nat), @eq (list nat) (@cons nat a0 lf2) (@cons nat a0 (sort lf2)).
Lemma candidate_28: forall (a0 : nat) (lf2 : list nat), @eq (list nat) (@cons nat a0 lf2) (insert a0 lf2).
Lemma candidate_29: forall (a0 : nat) (lf2 : list nat), @eq (list nat) (@cons nat a0 lf2) (@cons nat a0 lf2).
Lemma candidate_30: forall (a0 : nat) (lf2 : list nat), @eq (list nat) (@cons nat a0 lf2) (@cons nat a0 (@nil nat)).
Lemma candidate_31: @eq bool false (false).
Lemma candidate_32: forall (a : nat) (lf2 : list nat), @eq (list nat) (@cons nat a lf2) (insert a (sort lf2)).
Lemma candidate_33: forall (a : nat) (lf2 : list nat), @eq (list nat) (@cons nat a lf2) (@cons nat a (sort lf2)).
Lemma candidate_34: forall (a : nat) (lf2 : list nat), @eq (list nat) (@cons nat a lf2) (insert a lf2).
Lemma candidate_35: forall (a : nat) (lf2 : list nat), @eq (list nat) (@cons nat a lf2) (@cons nat a lf2).
Lemma candidate_36: forall (a : nat) (lf2 : list nat), @eq (list nat) (@cons nat a lf2) (@cons nat a (@nil nat)).
Lemma candidate_37: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.leb a0 a).
Lemma candidate_38: forall (a0 : nat) (lf2 : list nat), @eq (list nat) (@cons nat a0 lf2) (insert a0 (sort lf2)).
Lemma candidate_39: forall (a0 : nat) (lf2 : list nat), @eq (list nat) (@cons nat a0 lf2) (@cons nat a0 (sort lf2)).
Lemma candidate_40: forall (a0 : nat) (lf2 : list nat), @eq (list nat) (@cons nat a0 lf2) (insert a0 lf2).
Lemma candidate_41: forall (a0 : nat) (lf2 : list nat), @eq (list nat) (@cons nat a0 lf2) (@cons nat a0 lf2).
Lemma candidate_42: forall (a0 : nat) (lf2 : list nat), @eq (list nat) (@cons nat a0 lf2) (@cons nat a0 (@nil nat)).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 286 seconds
Duplicates removed: 10
Filtered by Quickchick: 25
Filtered by script: 4
Remaining: 3

Lemmas: 
Lemma candidate_12: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd (@cons nat a lf2) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> sortedd (insert a0 lf2).
Lemma candidate_10: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd (@cons nat a lf2) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> sortedd (insert a0 (sort lf2)).
Lemma candidate_14: forall (a : nat) (a0 : nat) (lf2 : list nat), sortedd (@cons nat a lf2) -> @eq bool (Nat.leb a0 a) false -> le a a0 -> sortedd (@cons nat a0 (@nil nat)).