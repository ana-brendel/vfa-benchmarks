File Information
- File name: Sort
- Original Directory: /home/anabrendel/lfind/vfa-benchmarks/Sort/benchmarks/sources/sort_lemma_sorted_remove_2_IN_insert_sortedd
- LFind Directory: /home/anabrendel/lfind/vfa-benchmarks/Sort/benchmarks/sources/_lfind_sort_lemma_sorted_remove_2_IN_insert_sortedd
- Namespace: vfa_benchmark
- Proof name: insert_sortedd
- Theorem: Theorem insert_sortedd: forall (a1 : nat) (l0 : list nat) (_ : sortedd l0), sortedd (insert a1 l0).
- Declarations: 
From lfind Require Import LFind.
From VFA Require Import Perm.

Proof Context
* Goal State: sortedd (@cons nat n (insert a0 l))

* Hypothesis:
Q : forall (i j iv jv : nat) (_ : lt i j)
  (_ : @eq (option nat) (@nth_error nat (@cons nat a (@cons nat n l)) i)
         (@Some nat iv))
  (_ : @eq (option nat) (@nth_error nat (@cons nat a (@cons nat n l)) j)
         (@Some nat jv)), le iv jv
H0 : le a a0
H2 : gt a0 n
H1 : @eq bool (Nat.leb a0 a) false
R : le a n
a0 : nat
H : sortedd (@cons nat a (@cons nat n l))
IHl : forall (_ : sortedd (@cons nat n l)) (a1 : nat),
sortedd (insert a1 (@cons nat n l))
l : list nat
n : nat
a : nat
P : forall _ : @eq bool true true,
or (@eq bool (Nat.eqb a0 a) true) (@eq bool (Nat.leb a0 a) false)

* Types:
Set
option nat
Prop
bool
nat
list nat

* Polymorphic Types:
list nat
option nat

* Variables:
a0 : nat
l : list nat
n : nat
a : nat

* Terms:
list nat : Set
@eq bool (Nat.leb a0 a) false : Prop
forall _ : @eq bool true true,
or (@eq bool (Nat.eqb a0 a) true) (@eq bool (Nat.leb a0 a) false) : Prop
@eq (option nat)
  (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
  (@Some nat _UNBOUND_REL_3) : Prop
true : bool
@cons nat n (insert a0 l) : list nat
@eq bool true true : Prop
insert _UNBOUND_REL_1 (@cons nat n l) : list nat
le _UNBOUND_REL_5 _UNBOUND_REL_4 : Prop
Nat.eqb a0 a : bool
le a a0 : Prop
sortedd (@cons nat n (insert a0 l)) : Prop
insert a0 l : list nat
forall
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat _UNBOUND_REL_3))
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat _UNBOUND_REL_3)), le _UNBOUND_REL_5 _UNBOUND_REL_4 : Prop
n : nat
@Some nat _UNBOUND_REL_3 : option nat
sortedd (@cons nat n l) : Prop
forall (i j iv jv : nat) (_ : lt i j)
  (_ : @eq (option nat) (@nth_error nat (@cons nat a (@cons nat n l)) i)
         (@Some nat iv))
  (_ : @eq (option nat) (@nth_error nat (@cons nat a (@cons nat n l)) j)
         (@Some nat jv)), le iv jv : Prop
forall a1 : nat, sortedd (insert a1 (@cons nat n l)) : Prop
lt _UNBOUND_REL_4 _UNBOUND_REL_3 : Prop
le a n : Prop
option nat : Set
forall
  _ : @eq (option nat)
        (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
        (@Some nat _UNBOUND_REL_3), le _UNBOUND_REL_5 _UNBOUND_REL_4 : Prop
l : list nat
@eq bool (Nat.eqb a0 a) true : Prop
forall (jv : nat) (_ : lt _UNBOUND_REL_4 _UNBOUND_REL_3)
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat _UNBOUND_REL_3))
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat jv)), le _UNBOUND_REL_5 jv : Prop
or (@eq bool (Nat.eqb a0 a) true) (@eq bool (Nat.leb a0 a) false) : Prop
false : bool
nat : Set
sortedd (insert _UNBOUND_REL_1 (@cons nat n l)) : Prop
bool : Set
@cons nat n l : list nat
@cons nat a (@cons nat n l) : list nat
a0 : nat
forall (_ : sortedd (@cons nat n l)) (a1 : nat),
sortedd (insert a1 (@cons nat n l)) : Prop
forall (_ : lt _UNBOUND_REL_4 _UNBOUND_REL_3)
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat _UNBOUND_REL_3))
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat _UNBOUND_REL_3)), le _UNBOUND_REL_5 _UNBOUND_REL_4 : Prop
forall (j iv jv : nat) (_ : lt _UNBOUND_REL_4 j)
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat iv))
  (_ : @eq (option nat) (@nth_error nat (@cons nat a (@cons nat n l)) j)
         (@Some nat jv)), le iv jv : Prop
gt a0 n : Prop
@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5 : option nat
Nat.leb a0 a : bool
forall (iv jv : nat) (_ : lt _UNBOUND_REL_4 _UNBOUND_REL_3)
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat iv))
  (_ : @eq (option nat)
         (@nth_error nat (@cons nat a (@cons nat n l)) _UNBOUND_REL_5)
         (@Some nat jv)), le iv jv : Prop
sortedd (@cons nat a (@cons nat n l)) : Prop
a : nat

* Functions:
insert  : forall (_ : nat) (_ : list nat), list nat
gt  : forall (_ : nat) (_ : nat), Prop
le  : forall (_ : nat) (_ : nat), Prop
Nat.eqb  : forall (_ : nat) (_ : nat), bool
list  : forall _ : Type, Type
@Some  : forall (A : Type) (_ : A), option A
@cons  : forall (A : Type) (_ : A) (_ : list A), list A
option  : forall _ : Type, Type
Nat.leb  : forall (_ : nat) (_ : nat), bool
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
sortedd  : forall _ : list nat, Prop
or  : forall (_ : Prop) (_ : Prop), Prop
lt  : forall (_ : nat) (_ : nat), Prop
nth_error  : forall (A : Type) (_ : list A) (_ : nat), option A

<---GENERALIZATION--->
Time elapsed: 4 seconds
Generalized Variables:
lf1 : list nat = @cons nat n (insert a0 l)
lf2 : list nat = insert a0 l

Generalizations:
Lemma conj1: forall (lf1 : list nat), sortedd lf1.
Lemma conj3: forall (lf2 : list nat) (n : nat), sortedd (@cons nat n lf2).
Lemma conj4: forall (a0 : nat) (l : list nat) (n : nat), sortedd (@cons nat n (insert a0 l)).


<---VALIDITY CHECKS--->
Time elapsed: 12 seconds
Valid:

Invalid:
Lemma conj4: forall (a0 : nat) (l : list nat) (n : nat), sortedd (@cons nat n (insert a0 l)).
Lemma conj3: forall (lf2 : list nat) (n : nat), sortedd (@cons nat n lf2).
Lemma conj1: forall (lf1 : list nat), sortedd lf1.

<---ADD IMPLICATIONS--->
Time elapsed: 37 seconds
Generalizations:
Lemma conj4: forall (a0 : nat) (l : list nat) (n : nat), sortedd (@cons nat n (insert a0 l)).
Lemma conj4_imp: forall (a0 : nat) (l : list nat) (n : nat) (a : nat), sortedd (@cons nat a (@cons nat n l)) -> le a a0 -> @eq bool (Nat.leb a0 a) false -> le a n -> gt a0 n -> sortedd (@cons nat n (insert a0 l)).
Lemma conj3: forall (lf2 : list nat) (n : nat), sortedd (@cons nat n lf2).
Lemma conj3_imp: forall (lf2 : list nat) (a0 : nat) (n : nat) (l : list nat) (a : nat), sortedd (@cons nat a (@cons nat n l)) -> le a a0 -> @eq bool (Nat.leb a0 a) false -> le a n -> gt a0 n -> sortedd (@cons nat n lf2).
Lemma conj1: forall (lf1 : list nat), sortedd lf1.
Lemma conj1_imp: forall (a0 : nat) (lf1 : list nat) (n : nat) (l : list nat) (a : nat), sortedd (@cons nat a (@cons nat n l)) -> le a a0 -> @eq bool (Nat.leb a0 a) false -> le a n -> gt a0 n -> sortedd lf1.


<---VALIDITY CHECKS--->
Time elapsed: 46 seconds
Valid:
Lemma conj4_imp: forall (a0 : nat) (l : list nat) (n : nat) (a : nat), sortedd (@cons nat a (@cons nat n l)) -> le a a0 -> @eq bool (Nat.leb a0 a) false -> le a n -> gt a0 n -> sortedd (@cons nat n (insert a0 l)).

Invalid:
Lemma conj1_imp: forall (a0 : nat) (lf1 : list nat) (n : nat) (l : list nat) (a : nat), sortedd (@cons nat a (@cons nat n l)) -> le a a0 -> @eq bool (Nat.leb a0 a) false -> le a n -> gt a0 n -> sortedd lf1.
Lemma conj1: forall (lf1 : list nat), sortedd lf1.
Lemma conj3_imp: forall (lf2 : list nat) (a0 : nat) (n : nat) (l : list nat) (a : nat), sortedd (@cons nat a (@cons nat n l)) -> le a a0 -> @eq bool (Nat.leb a0 a) false -> le a n -> gt a0 n -> sortedd (@cons nat n lf2).
Lemma conj3: forall (lf2 : list nat) (n : nat), sortedd (@cons nat n lf2).
Lemma conj4: forall (a0 : nat) (l : list nat) (n : nat), sortedd (@cons nat n (insert a0 l)).


<---CREATE SKETCHES--->
Time elapsed: 47 seconds
Sketches:
Sketch conj1_imp_sketch0 : forall
  _ : forall (_ : sortedd (@cons nat a (@cons nat n l))) 
        (_ : le a a0) (_ : @eq bool (Nat.leb a0 a) (##hole##)) 
        (_ : le a n), gt a0 n, sortedd lf1
Sketch conj1_imp_sketch1 : forall
  _ : forall (_ : sortedd (@cons nat a (##hole##))) 
        (_ : le a a0) (_ : @eq bool (Nat.leb a0 a) false) 
        (_ : le a n), gt a0 n, sortedd lf1
Sketch conj1_imp_sketch2 : forall
  _ : forall (_ : sortedd (##hole##)) (_ : le a a0)
        (_ : @eq bool (Nat.leb a0 a) false) (_ : le a n), 
      gt a0 n, sortedd lf1
Sketch conj1_imp_sketch3 : forall
  _ : forall (_ : sortedd (@cons nat a (@cons nat n l))) 
        (_ : le a a0) (_ : @eq bool (##hole##) false) 
        (_ : le a n), gt a0 n, sortedd lf1
Sketch conj1_imp_term_sketch0 : @eq bool false (##hole##)
Sketch conj1_imp_term_sketch1 : @eq (list nat) (@cons nat n l) (##hole##)
Sketch conj1_imp_term_sketch2 : @eq (list nat) (@cons nat a (@cons nat n l)) (##hole##)
Sketch conj1_imp_term_sketch3 : @eq bool (Nat.leb a0 a) (##hole##)
Sketch conj3_imp_sketch0 : forall
  _ : forall (_ : sortedd (@cons nat a (@cons nat n l))) 
        (_ : le a a0) (_ : @eq bool (Nat.leb a0 a) false) 
        (_ : le a n), gt a0 n, sortedd (##hole##)
Sketch conj3_imp_sketch1 : forall
  _ : forall (_ : sortedd (@cons nat a (@cons nat n l))) 
        (_ : le a a0) (_ : @eq bool (Nat.leb a0 a) (##hole##)) 
        (_ : le a n), gt a0 n, sortedd (@cons nat n lf2)
Sketch conj3_imp_sketch2 : forall
  _ : forall (_ : sortedd (@cons nat a (##hole##))) 
        (_ : le a a0) (_ : @eq bool (Nat.leb a0 a) false) 
        (_ : le a n), gt a0 n, sortedd (@cons nat n lf2)
Sketch conj3_imp_sketch3 : forall
  _ : forall (_ : sortedd (##hole##)) (_ : le a a0)
        (_ : @eq bool (Nat.leb a0 a) false) (_ : le a n), 
      gt a0 n, sortedd (@cons nat n lf2)
Sketch conj3_imp_sketch4 : forall
  _ : forall (_ : sortedd (@cons nat a (@cons nat n l))) 
        (_ : le a a0) (_ : @eq bool (##hole##) false) 
        (_ : le a n), gt a0 n, sortedd (@cons nat n lf2)
Sketch conj3_imp_term_sketch0 : @eq (list nat) (@cons nat n lf2) (##hole##)
Sketch conj3_imp_term_sketch1 : @eq bool false (##hole##)
Sketch conj3_imp_term_sketch2 : @eq (list nat) (@cons nat n l) (##hole##)
Sketch conj3_imp_term_sketch3 : @eq (list nat) (@cons nat a (@cons nat n l)) (##hole##)
Sketch conj3_imp_term_sketch4 : @eq bool (Nat.leb a0 a) (##hole##)
Sketch conj3_sketch0 : sortedd (##hole##)
Sketch conj3_term_sketch0 : @eq (list nat) (@cons nat n lf2) (##hole##)
Sketch conj4_sketch0 : sortedd (@cons nat n (##hole##))
Sketch conj4_sketch1 : sortedd (##hole##)
Sketch conj4_term_sketch0 : @eq (list nat) (insert a0 l) (##hole##)
Sketch conj4_term_sketch1 : @eq (list nat) (@cons nat n (insert a0 l)) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 84 seconds
Problems per Sketch:
Sketch conj3_imp_term_sketch0 --> Problem  synth_14
Sketch conj1_imp_term_sketch3 --> Problem  synth_8
Sketch conj3_imp_sketch4 --> Problem  synth_13
Sketch conj3_imp_sketch3 --> Problem  synth_12
Sketch conj1_imp_sketch1 --> Problem  synth_2
Sketch conj3_term_sketch0 --> Problem  synth_14
Sketch conj3_imp_term_sketch2 --> Problem  synth_6
Sketch conj3_imp_term_sketch1 --> Problem  synth_5
Sketch conj3_imp_term_sketch3 --> Problem  synth_7
Sketch conj1_imp_term_sketch2 --> Problem  synth_7
Sketch conj3_imp_sketch1 --> Problem  synth_10
Sketch conj3_imp_sketch0 --> Problem  synth_9
Sketch conj1_imp_sketch3 --> Problem  synth_4
Sketch conj4_sketch0 --> Problem  synth_16
Sketch conj1_imp_term_sketch0 --> Problem  synth_5
Sketch conj1_imp_sketch2 --> Problem  synth_3
Sketch conj4_sketch1 --> Problem  synth_15
Sketch conj1_imp_sketch0 --> Problem  synth_1
Sketch conj4_term_sketch1 --> Problem  synth_18
Sketch conj3_sketch0 --> Problem  synth_15
Sketch conj4_term_sketch0 --> Problem  synth_17
Sketch conj3_imp_term_sketch4 --> Problem  synth_8
Sketch conj1_imp_term_sketch1 --> Problem  synth_6
Sketch conj3_imp_sketch2 --> Problem  synth_11


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 174 seconds

Problem: synth_18

Problem: synth_17

Problem: synth_9

Problem: synth_13

Problem: synth_6

Problem: synth_11

Problem: synth_7

Problem: synth_4

Problem: synth_1

Problem: synth_16

Problem: synth_15

Problem: synth_14
 @cons nat n (sort (sort (sort (sort lf2))))
 @cons nat n (sort (sort (sort lf2)))
 @cons nat n (sort (sort lf2))
 @cons nat n (sort lf2)
 @cons nat n lf2

Problem: synth_10

Problem: synth_8
 Nat.leb a0 a
 Nat.eqb a a0
 match a0 with | O => true | S _ => false end
 Nat.eqb a0 O
 Nat.leb a0 O

Problem: synth_3

Problem: synth_12

Problem: synth_5
 false

Problem: synth_2

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 175 seconds
Lemmas:
Lemma candidate_1: forall (a : nat) (n : nat) (l : list nat) (a0 : nat), sortedd (@cons nat a (@cons nat n l)) -> le a a0 -> @eq bool (Nat.leb a0 a) false -> le a n -> gt a0 n -> sortedd (@cons nat n (insert a0 l)).
Lemma candidate_2: @eq bool false (false).
Lemma candidate_3: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.leb a0 a).
Lemma candidate_4: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.eqb a a0).
Lemma candidate_5: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (match a0 with | O => true | S _ => false end).
Lemma candidate_6: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.eqb a0 O).
Lemma candidate_7: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.leb a0 O).
Lemma candidate_8: forall (n : nat) (lf2 : list nat), @eq (list nat) (@cons nat n lf2)   (@cons nat n (sort (sort (sort (sort lf2))))).
Lemma candidate_9: forall (n : nat) (lf2 : list nat), @eq (list nat) (@cons nat n lf2) (@cons nat n (sort (sort (sort lf2)))).
Lemma candidate_10: forall (n : nat) (lf2 : list nat), @eq (list nat) (@cons nat n lf2) (@cons nat n (sort (sort lf2))).
Lemma candidate_11: forall (n : nat) (lf2 : list nat), @eq (list nat) (@cons nat n lf2) (@cons nat n (sort lf2)).
Lemma candidate_12: forall (n : nat) (lf2 : list nat), @eq (list nat) (@cons nat n lf2) (@cons nat n lf2).
Lemma candidate_13: @eq bool false (false).
Lemma candidate_14: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.leb a0 a).
Lemma candidate_15: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.eqb a a0).
Lemma candidate_16: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (match a0 with | O => true | S _ => false end).
Lemma candidate_17: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.eqb a0 O).
Lemma candidate_18: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.leb a0 O).
Lemma candidate_19: forall (n : nat) (lf2 : list nat), @eq (list nat) (@cons nat n lf2)   (@cons nat n (sort (sort (sort (sort lf2))))).
Lemma candidate_20: forall (n : nat) (lf2 : list nat), @eq (list nat) (@cons nat n lf2) (@cons nat n (sort (sort (sort lf2)))).
Lemma candidate_21: forall (n : nat) (lf2 : list nat), @eq (list nat) (@cons nat n lf2) (@cons nat n (sort (sort lf2))).
Lemma candidate_22: forall (n : nat) (lf2 : list nat), @eq (list nat) (@cons nat n lf2) (@cons nat n (sort lf2)).
Lemma candidate_23: forall (n : nat) (lf2 : list nat), @eq (list nat) (@cons nat n lf2) (@cons nat n lf2).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 196 seconds
Duplicates removed: 11
Filtered by Quickchick: 8
Filtered by script: 3
Remaining: 1

Lemmas: 
Lemma candidate_1: forall (a : nat) (n : nat) (l : list nat) (a0 : nat), sortedd (@cons nat a (@cons nat n l)) -> le a a0 -> @eq bool (Nat.leb a0 a) false -> le a n -> gt a0 n -> sortedd (@cons nat n (insert a0 l)).