File Information
- File name: Sort
- Original Directory: /home/anabrendel/lfind/vfa-benchmarks/Sort/benchmarks/sources/sort_lemma_sorted_remove_cons_1_IN_insert_sortedd
- LFind Directory: /home/anabrendel/lfind/vfa-benchmarks/Sort/benchmarks/sources/_lfind_sort_lemma_sorted_remove_cons_1_IN_insert_sortedd
- Namespace: vfa_benchmark
- Proof name: insert_sortedd
- Theorem: Theorem insert_sortedd: forall (a1 : nat) (l : list nat) (_ : sortedd l), sortedd (insert a1 l).
- Declarations: 
From lfind Require Import LFind.
From VFA Require Import Perm.

Proof Context
* Goal State: sortedd (@cons nat a (@cons nat a0 (@nil nat)))

* Hypothesis:
H0 : le a a0
H1 : @eq bool (Nat.leb a0 a) false
a0 : nat
H : sortedd (@cons nat a (@nil nat))
IHl : forall (_ : sortedd (@nil nat)) (a1 : nat), sortedd (insert a1 (@nil nat))
a : nat
P : forall _ : @eq bool true true,
or (@eq bool (Nat.eqb a0 a) true) (@eq bool (Nat.leb a0 a) false)

* Types:
Set
Prop
bool
nat
list nat

* Polymorphic Types:


* Variables:
a0 : nat
a : nat

* Terms:
@eq bool (Nat.leb a0 a) false : Prop
sortedd (@cons nat a (@nil nat)) : Prop
insert _UNBOUND_REL_1 (@nil nat) : list nat
@cons nat a (@nil nat) : list nat
forall (_ : sortedd (@nil nat)) (a1 : nat), sortedd (insert a1 (@nil nat)) : Prop
forall _ : @eq bool true true,
or (@eq bool (Nat.eqb a0 a) true) (@eq bool (Nat.leb a0 a) false) : Prop
sortedd (@nil nat) : Prop
true : bool
sortedd (@cons nat a (@cons nat a0 (@nil nat))) : Prop
@eq bool true true : Prop
@eq bool (Nat.eqb a0 a) true : Prop
or (@eq bool (Nat.eqb a0 a) true) (@eq bool (Nat.leb a0 a) false) : Prop
false : bool
nat : Set
bool : Set
forall a1 : nat, sortedd (insert a1 (@nil nat)) : Prop
Nat.eqb a0 a : bool
le a a0 : Prop
@cons nat a (@cons nat a0 (@nil nat)) : list nat
a0 : nat
Nat.leb a0 a : bool
a : nat
sortedd (insert _UNBOUND_REL_1 (@nil nat)) : Prop
@nil nat : list nat
@cons nat a0 (@nil nat) : list nat

* Functions:
insert  : forall (_ : nat) (_ : list nat), list nat
le  : forall (_ : nat) (_ : nat), Prop
Nat.eqb  : forall (_ : nat) (_ : nat), bool
@nil  : forall A : Type, list A
@cons  : forall (A : Type) (_ : A) (_ : list A), list A
Nat.leb  : forall (_ : nat) (_ : nat), bool
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
sortedd  : forall _ : list nat, Prop
or  : forall (_ : Prop) (_ : Prop), Prop

<---GENERALIZATION--->
Time elapsed: 3 seconds
Generalized Variables:
lf3 : list nat = @nil nat
lf1 : list nat = @cons nat a (@cons nat a0 (@nil nat))
lf2 : list nat = @cons nat a0 (@nil nat)

Generalizations:
Lemma conj1: forall (lf1 : list nat), sortedd lf1.
Lemma conj3: forall (lf2 : list nat) (a : nat), sortedd (@cons nat a lf2).
Lemma conj4: forall (a0 : nat) (a : nat) (lf3 : list nat), sortedd (@cons nat a (@cons nat a0 lf3)).
Lemma conj8: forall (a0 : nat) (a : nat), sortedd (@cons nat a (@cons nat a0 (@nil nat))).


<---VALIDITY CHECKS--->
Time elapsed: 16 seconds
Valid:

Invalid:
Lemma conj8: forall (a0 : nat) (a : nat), sortedd (@cons nat a (@cons nat a0 (@nil nat))).
Lemma conj4: forall (a0 : nat) (a : nat) (lf3 : list nat), sortedd (@cons nat a (@cons nat a0 lf3)).
Lemma conj3: forall (lf2 : list nat) (a : nat), sortedd (@cons nat a lf2).
Lemma conj1: forall (lf1 : list nat), sortedd lf1.

<---ADD IMPLICATIONS--->
Time elapsed: 34 seconds
Generalizations:
Lemma conj8: forall (a0 : nat) (a : nat), sortedd (@cons nat a (@cons nat a0 (@nil nat))).
Lemma conj8_imp: forall (a0 : nat) (a : nat), forall _ : forall _ : le a a0, @eq bool (Nat.leb a0 a) false,
sortedd (@cons nat a (@cons nat a0 (@nil nat))).
Lemma conj4: forall (a0 : nat) (a : nat) (lf3 : list nat), sortedd (@cons nat a (@cons nat a0 lf3)).
Lemma conj4_imp: forall (a0 : nat) (a : nat) (lf3 : list nat), forall _ : forall _ : le a a0, @eq bool (Nat.leb a0 a) false,
sortedd (@cons nat a (@cons nat a0 lf3)).
Lemma conj3: forall (lf2 : list nat) (a : nat), sortedd (@cons nat a lf2).
Lemma conj1: forall (lf1 : list nat), sortedd lf1.


<---VALIDITY CHECKS--->
Time elapsed: 43 seconds
Valid:

Invalid:
Lemma conj1: forall (lf1 : list nat), sortedd lf1.
Lemma conj3: forall (lf2 : list nat) (a : nat), sortedd (@cons nat a lf2).
Lemma conj4_imp: forall (a0 : nat) (a : nat) (lf3 : list nat), forall _ : forall _ : le a a0, @eq bool (Nat.leb a0 a) false,
sortedd (@cons nat a (@cons nat a0 lf3)).
Lemma conj4: forall (a0 : nat) (a : nat) (lf3 : list nat), sortedd (@cons nat a (@cons nat a0 lf3)).
Lemma conj8_imp: forall (a0 : nat) (a : nat), forall _ : forall _ : le a a0, @eq bool (Nat.leb a0 a) false,
sortedd (@cons nat a (@cons nat a0 (@nil nat))).
Lemma conj8: forall (a0 : nat) (a : nat), sortedd (@cons nat a (@cons nat a0 (@nil nat))).


<---CREATE SKETCHES--->
Time elapsed: 43 seconds
Sketches:
Sketch conj3_sketch0 : sortedd (##hole##)
Sketch conj3_term_sketch0 : @eq (list nat) (@cons nat a lf2) (##hole##)
Sketch conj4_imp_sketch0 : forall _ : forall _ : le a a0, @eq bool (Nat.leb a0 a) (##hole##),
sortedd (@cons nat a (@cons nat a0 lf3))
Sketch conj4_imp_sketch1 : forall _ : forall _ : le a a0, @eq bool (Nat.leb a0 a) false,
sortedd (##hole##)
Sketch conj4_imp_sketch2 : forall _ : forall _ : le a a0, @eq bool (##hole##) false,
sortedd (@cons nat a (@cons nat a0 lf3))
Sketch conj4_imp_sketch3 : forall _ : forall _ : le a a0, @eq bool (Nat.leb a0 a) false,
sortedd (@cons nat a (##hole##))
Sketch conj4_imp_term_sketch0 : @eq bool false (##hole##)
Sketch conj4_imp_term_sketch1 : @eq (list nat) (@cons nat a (@cons nat a0 lf3)) (##hole##)
Sketch conj4_imp_term_sketch2 : @eq bool (Nat.leb a0 a) (##hole##)
Sketch conj4_imp_term_sketch3 : @eq (list nat) (@cons nat a0 lf3) (##hole##)
Sketch conj4_sketch0 : sortedd (##hole##)
Sketch conj4_sketch1 : sortedd (@cons nat a (##hole##))
Sketch conj4_term_sketch0 : @eq (list nat) (@cons nat a (@cons nat a0 lf3)) (##hole##)
Sketch conj4_term_sketch1 : @eq (list nat) (@cons nat a0 lf3) (##hole##)
Sketch conj8_imp_sketch0 : forall _ : forall _ : le a a0, @eq bool (Nat.leb a0 a) (##hole##),
sortedd (@cons nat a (@cons nat a0 (@nil nat)))
Sketch conj8_imp_sketch1 : forall _ : forall _ : le a a0, @eq bool (Nat.leb a0 a) false,
sortedd (##hole##)
Sketch conj8_imp_sketch2 : forall _ : forall _ : le a a0, @eq bool (##hole##) false,
sortedd (@cons nat a (@cons nat a0 (@nil nat)))
Sketch conj8_imp_sketch3 : forall _ : forall _ : le a a0, @eq bool (Nat.leb a0 a) false,
sortedd (@cons nat a (@cons nat a0 (##hole##)))
Sketch conj8_imp_sketch4 : forall _ : forall _ : le a a0, @eq bool (Nat.leb a0 a) false,
sortedd (@cons nat a (##hole##))
Sketch conj8_imp_term_sketch0 : @eq bool false (##hole##)
Sketch conj8_imp_term_sketch1 : @eq (list nat) (@cons nat a (@cons nat a0 (@nil nat))) (##hole##)
Sketch conj8_imp_term_sketch2 : @eq bool (Nat.leb a0 a) (##hole##)
Sketch conj8_imp_term_sketch3 : @eq (list nat) (@nil nat) (##hole##)
Sketch conj8_imp_term_sketch4 : @eq (list nat) (@cons nat a0 (@nil nat)) (##hole##)
Sketch conj8_sketch0 : sortedd (##hole##)
Sketch conj8_sketch1 : sortedd (@cons nat a (@cons nat a0 (##hole##)))
Sketch conj8_sketch2 : sortedd (@cons nat a (##hole##))
Sketch conj8_term_sketch0 : @eq (list nat) (@cons nat a (@cons nat a0 (@nil nat))) (##hole##)
Sketch conj8_term_sketch1 : @eq (list nat) (@nil nat) (##hole##)
Sketch conj8_term_sketch2 : @eq (list nat) (@cons nat a0 (@nil nat)) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 118 seconds
Problems per Sketch:
Sketch conj4_imp_sketch2 --> Problem  synth_5
Sketch conj3_term_sketch0 --> Problem  synth_2
Sketch conj4_imp_term_sketch2 --> Problem  synth_9
Sketch conj8_imp_sketch3 --> Problem  synth_13
Sketch conj4_imp_term_sketch0 --> Problem  synth_7
Sketch conj8_imp_term_sketch4 --> Problem  synth_15
Sketch conj4_imp_term_sketch3 --> Problem  synth_10
Sketch conj8_sketch1 --> Problem  synth_13
Sketch conj4_sketch0 --> Problem  synth_1
Sketch conj8_imp_term_sketch0 --> Problem  synth_7
Sketch conj4_sketch1 --> Problem  synth_11
Sketch conj8_imp_sketch0 --> Problem  synth_12
Sketch conj4_term_sketch1 --> Problem  synth_10
Sketch conj4_imp_sketch1 --> Problem  synth_4
Sketch conj8_term_sketch0 --> Problem  synth_4
Sketch conj4_imp_term_sketch1 --> Problem  synth_8
Sketch conj3_sketch0 --> Problem  synth_1
Sketch conj8_sketch2 --> Problem  synth_11
Sketch conj8_sketch0 --> Problem  synth_1
Sketch conj8_imp_sketch2 --> Problem  synth_9
Sketch conj8_imp_term_sketch2 --> Problem  synth_9
Sketch conj8_term_sketch1 --> Problem  synth_14
Sketch conj8_imp_term_sketch3 --> Problem  synth_14
Sketch conj4_term_sketch0 --> Problem  synth_8
Sketch conj8_term_sketch2 --> Problem  synth_15
Sketch conj8_imp_sketch1 --> Problem  synth_4
Sketch conj4_imp_sketch0 --> Problem  synth_3
Sketch conj8_imp_term_sketch1 --> Problem  synth_4
Sketch conj8_imp_sketch4 --> Problem  synth_6
Sketch conj4_imp_sketch3 --> Problem  synth_6


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 242 seconds

Problem: synth_15
 @cons nat a0 (@nil nat)

Problem: synth_14
 @nil nat

Problem: synth_10
 insert a0 (sort lf3)
 @cons nat a0 (sort lf3)
 insert a0 lf3
 @cons nat a0 lf3
 @cons nat a0 (@nil nat)

Problem: synth_8
 @cons nat a (insert a0 (sort lf3))
 @cons nat a (@cons nat a0 (sort lf3))
 @cons nat a (insert a0 lf3)
 @cons nat a (@cons nat a0 lf3)
 @cons nat a (@cons nat a0 (@nil nat))

Problem: synth_3
 match a0 with | O => false | S m' => Nat.leb a0 m' end
 Nat.eqb a (S a)
 Nat.eqb a (S a0)
 Nat.eqb a0 (S a0)
 false

Problem: synth_9
 Nat.leb a0 a

Problem: synth_13
 @nil nat

Problem: synth_12
 match a0 with | O => false | S m' => Nat.leb a0 m' end
 Nat.eqb a (S a)
 Nat.eqb a (S a0)
 Nat.eqb a0 (S a0)
 false

Problem: synth_6
 @cons nat a0 (@nil nat)

Problem: synth_11

Problem: synth_7
 false

Problem: synth_5
 Nat.leb a0 a

Problem: synth_4
 @cons nat a (@cons nat a0 (@nil nat))

Problem: synth_1

Problem: synth_2
 @cons nat a (sort (sort (sort (sort lf2))))
 @cons nat a (sort (sort (sort lf2)))
 @cons nat a (sort (sort lf2))
 @cons nat a (sort lf2)
 @cons nat a lf2

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 242 seconds
Lemmas:
Lemma candidate_1: forall (a : nat) (lf2 : list nat), @eq (list nat) (@cons nat a lf2)   (@cons nat a (sort (sort (sort (sort lf2))))).
Lemma candidate_2: forall (a : nat) (lf2 : list nat), @eq (list nat) (@cons nat a lf2) (@cons nat a (sort (sort (sort lf2)))).
Lemma candidate_3: forall (a : nat) (lf2 : list nat), @eq (list nat) (@cons nat a lf2) (@cons nat a (sort (sort lf2))).
Lemma candidate_4: forall (a : nat) (lf2 : list nat), @eq (list nat) (@cons nat a lf2) (@cons nat a (sort lf2)).
Lemma candidate_5: forall (a : nat) (lf2 : list nat), @eq (list nat) (@cons nat a lf2) (@cons nat a lf2).
Lemma candidate_6: forall (lf3 : list nat) (a : nat) (a0 : nat), le a a0 -> @eq bool (Nat.leb a0 a)   (match a0 with | O => false | S m' => Nat.leb a0 m' end) -> sortedd (@cons nat a (@cons nat a0 lf3)).
Lemma candidate_7: forall (lf3 : list nat) (a : nat) (a0 : nat), le a a0 -> @eq bool (Nat.leb a0 a) (Nat.eqb a (S a)) -> sortedd (@cons nat a (@cons nat a0 lf3)).
Lemma candidate_8: forall (lf3 : list nat) (a : nat) (a0 : nat), le a a0 -> @eq bool (Nat.leb a0 a) (Nat.eqb a (S a0)) -> sortedd (@cons nat a (@cons nat a0 lf3)).
Lemma candidate_9: forall (lf3 : list nat) (a : nat) (a0 : nat), le a a0 -> @eq bool (Nat.leb a0 a) (Nat.eqb a0 (S a0)) -> sortedd (@cons nat a (@cons nat a0 lf3)).
Lemma candidate_10: forall (lf3 : list nat) (a : nat) (a0 : nat), le a a0 -> @eq bool (Nat.leb a0 a) (false) -> sortedd (@cons nat a (@cons nat a0 lf3)).
Lemma candidate_11: forall (a : nat) (a0 : nat), le a a0 -> @eq bool (Nat.leb a0 a) false -> sortedd (@cons nat a (@cons nat a0 (@nil nat))).
Lemma candidate_12: forall (lf3 : list nat) (a : nat) (a0 : nat), le a a0 -> @eq bool (Nat.leb a0 a) false -> sortedd (@cons nat a (@cons nat a0 lf3)).
Lemma candidate_13: forall (a : nat) (a0 : nat), le a a0 -> @eq bool (Nat.leb a0 a) false -> sortedd (@cons nat a (@cons nat a0 (@nil nat))).
Lemma candidate_14: @eq bool false (false).
Lemma candidate_15: forall (lf3 : list nat) (a : nat) (a0 : nat), @eq (list nat) (@cons nat a (@cons nat a0 lf3))   (@cons nat a (insert a0 (sort lf3))).
Lemma candidate_16: forall (lf3 : list nat) (a : nat) (a0 : nat), @eq (list nat) (@cons nat a (@cons nat a0 lf3))   (@cons nat a (@cons nat a0 (sort lf3))).
Lemma candidate_17: forall (lf3 : list nat) (a : nat) (a0 : nat), @eq (list nat) (@cons nat a (@cons nat a0 lf3)) (@cons nat a (insert a0 lf3)).
Lemma candidate_18: forall (lf3 : list nat) (a : nat) (a0 : nat), @eq (list nat) (@cons nat a (@cons nat a0 lf3))   (@cons nat a (@cons nat a0 lf3)).
Lemma candidate_19: forall (lf3 : list nat) (a : nat) (a0 : nat), @eq (list nat) (@cons nat a (@cons nat a0 lf3))   (@cons nat a (@cons nat a0 (@nil nat))).
Lemma candidate_20: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.leb a0 a).
Lemma candidate_21: forall (lf3 : list nat) (a0 : nat), @eq (list nat) (@cons nat a0 lf3) (insert a0 (sort lf3)).
Lemma candidate_22: forall (lf3 : list nat) (a0 : nat), @eq (list nat) (@cons nat a0 lf3) (@cons nat a0 (sort lf3)).
Lemma candidate_23: forall (lf3 : list nat) (a0 : nat), @eq (list nat) (@cons nat a0 lf3) (insert a0 lf3).
Lemma candidate_24: forall (lf3 : list nat) (a0 : nat), @eq (list nat) (@cons nat a0 lf3) (@cons nat a0 lf3).
Lemma candidate_25: forall (lf3 : list nat) (a0 : nat), @eq (list nat) (@cons nat a0 lf3) (@cons nat a0 (@nil nat)).
Lemma candidate_26: forall (lf3 : list nat) (a : nat) (a0 : nat), @eq (list nat) (@cons nat a (@cons nat a0 lf3))   (@cons nat a (insert a0 (sort lf3))).
Lemma candidate_27: forall (lf3 : list nat) (a : nat) (a0 : nat), @eq (list nat) (@cons nat a (@cons nat a0 lf3))   (@cons nat a (@cons nat a0 (sort lf3))).
Lemma candidate_28: forall (lf3 : list nat) (a : nat) (a0 : nat), @eq (list nat) (@cons nat a (@cons nat a0 lf3)) (@cons nat a (insert a0 lf3)).
Lemma candidate_29: forall (lf3 : list nat) (a : nat) (a0 : nat), @eq (list nat) (@cons nat a (@cons nat a0 lf3))   (@cons nat a (@cons nat a0 lf3)).
Lemma candidate_30: forall (lf3 : list nat) (a : nat) (a0 : nat), @eq (list nat) (@cons nat a (@cons nat a0 lf3))   (@cons nat a (@cons nat a0 (@nil nat))).
Lemma candidate_31: forall (lf3 : list nat) (a0 : nat), @eq (list nat) (@cons nat a0 lf3) (insert a0 (sort lf3)).
Lemma candidate_32: forall (lf3 : list nat) (a0 : nat), @eq (list nat) (@cons nat a0 lf3) (@cons nat a0 (sort lf3)).
Lemma candidate_33: forall (lf3 : list nat) (a0 : nat), @eq (list nat) (@cons nat a0 lf3) (insert a0 lf3).
Lemma candidate_34: forall (lf3 : list nat) (a0 : nat), @eq (list nat) (@cons nat a0 lf3) (@cons nat a0 lf3).
Lemma candidate_35: forall (lf3 : list nat) (a0 : nat), @eq (list nat) (@cons nat a0 lf3) (@cons nat a0 (@nil nat)).
Lemma candidate_36: forall (a : nat) (a0 : nat), le a a0 -> @eq bool (Nat.leb a0 a)   (match a0 with | O => false | S m' => Nat.leb a0 m' end) -> sortedd (@cons nat a (@cons nat a0 (@nil nat))).
Lemma candidate_37: forall (a : nat) (a0 : nat), le a a0 -> @eq bool (Nat.leb a0 a) (Nat.eqb a (S a)) -> sortedd (@cons nat a (@cons nat a0 (@nil nat))).
Lemma candidate_38: forall (a : nat) (a0 : nat), le a a0 -> @eq bool (Nat.leb a0 a) (Nat.eqb a (S a0)) -> sortedd (@cons nat a (@cons nat a0 (@nil nat))).
Lemma candidate_39: forall (a : nat) (a0 : nat), le a a0 -> @eq bool (Nat.leb a0 a) (Nat.eqb a0 (S a0)) -> sortedd (@cons nat a (@cons nat a0 (@nil nat))).
Lemma candidate_40: forall (a : nat) (a0 : nat), le a a0 -> @eq bool (Nat.leb a0 a) (false) -> sortedd (@cons nat a (@cons nat a0 (@nil nat))).
Lemma candidate_41: forall (a : nat) (a0 : nat), le a a0 -> @eq bool (Nat.leb a0 a) false -> sortedd (@cons nat a (@cons nat a0 (@nil nat))).
Lemma candidate_42: forall (a : nat) (a0 : nat), le a a0 -> @eq bool (Nat.leb a0 a) false -> sortedd (@cons nat a (@cons nat a0 (@nil nat))).
Lemma candidate_43: forall (a : nat) (a0 : nat), le a a0 -> @eq bool (Nat.leb a0 a) false -> sortedd (@cons nat a (@cons nat a0 (@nil nat))).
Lemma candidate_44: forall (a : nat) (a0 : nat), le a a0 -> @eq bool (Nat.leb a0 a) false -> sortedd (@cons nat a (@cons nat a0 (@nil nat))).
Lemma candidate_45: @eq bool false (false).
Lemma candidate_46: forall (a : nat) (a0 : nat), @eq (list nat) (@cons nat a (@cons nat a0 (@nil nat)))   (@cons nat a (@cons nat a0 (@nil nat))).
Lemma candidate_47: forall (a : nat) (a0 : nat), @eq bool (Nat.leb a0 a) (Nat.leb a0 a).
Lemma candidate_48: @eq (list nat) (@nil nat) (@nil nat).
Lemma candidate_49: forall (a0 : nat), @eq (list nat) (@cons nat a0 (@nil nat)) (@cons nat a0 (@nil nat)).
Lemma candidate_50: forall (a : nat) (a0 : nat), sortedd (@cons nat a (@cons nat a0 (@nil nat))).
Lemma candidate_51: forall (a : nat) (a0 : nat), @eq (list nat) (@cons nat a (@cons nat a0 (@nil nat)))   (@cons nat a (@cons nat a0 (@nil nat))).
Lemma candidate_52: @eq (list nat) (@nil nat) (@nil nat).
Lemma candidate_53: forall (a0 : nat), @eq (list nat) (@cons nat a0 (@nil nat)) (@cons nat a0 (@nil nat)).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 302 seconds
Duplicates removed: 21
Filtered by Quickchick: 18
Filtered by script: 8
Remaining: 6

Lemmas: 
Lemma candidate_11: forall (a : nat) (a0 : nat), le a a0 -> @eq bool (Nat.leb a0 a) false -> sortedd (@cons nat a (@cons nat a0 (@nil nat))).
Lemma candidate_40: forall (a : nat) (a0 : nat), le a a0 -> @eq bool (Nat.leb a0 a) (false) -> sortedd (@cons nat a (@cons nat a0 (@nil nat))).
Lemma candidate_37: forall (a : nat) (a0 : nat), le a a0 -> @eq bool (Nat.leb a0 a) (Nat.eqb a (S a)) -> sortedd (@cons nat a (@cons nat a0 (@nil nat))).
Lemma candidate_38: forall (a : nat) (a0 : nat), le a a0 -> @eq bool (Nat.leb a0 a) (Nat.eqb a (S a0)) -> sortedd (@cons nat a (@cons nat a0 (@nil nat))).
Lemma candidate_39: forall (a : nat) (a0 : nat), le a a0 -> @eq bool (Nat.leb a0 a) (Nat.eqb a0 (S a0)) -> sortedd (@cons nat a (@cons nat a0 (@nil nat))).
Lemma candidate_36: forall (a : nat) (a0 : nat), le a a0 -> @eq bool (Nat.leb a0 a)   (match a0 with | O => false | S m' => Nat.leb a0 m' end) -> sortedd (@cons nat a (@cons nat a0 (@nil nat))).