File Information
- File name: Sort
- Original Directory: /home/anabrendel/lfind/vfa-benchmarks/Sort/benchmarks/sources/sort_lemma_insert_perm_IN_sort_perm
- LFind Directory: /home/anabrendel/lfind/vfa-benchmarks/Sort/benchmarks/sources/_lfind_sort_lemma_insert_perm_IN_sort_perm
- Namespace: vfa_benchmark
- Proof name: sort_perm
- Theorem: Theorem sort_perm: forall l0 : list nat, @Permutation nat l0 (sort l0).
- Declarations: 
From lfind Require Import LFind.
From VFA Require Import Perm.

Proof Context
* Goal State: @Permutation nat (@cons nat a (sort l)) (insert a (sort l))

* Hypothesis:
IHl : @Permutation nat l (sort l)
l : list nat
a : nat

* Types:
Set
Prop
nat
list nat

* Polymorphic Types:
list nat

* Variables:
l : list nat
a : nat

* Terms:
list nat : Set
nat : Set
@Permutation nat l (sort l) : Prop
sort l : list nat
@cons nat a (sort l) : list nat
@Permutation nat (@cons nat a (sort l)) (insert a (sort l)) : Prop
l : list nat
a : nat
insert a (sort l) : list nat

* Functions:
sort  : forall _ : list nat, list nat
insert  : forall (_ : nat) (_ : list nat), list nat
list  : forall _ : Type, Type
@cons  : forall (A : Type) (_ : A) (_ : list A), list A
Permutation  : forall (A : Type) (_ : list A) (_ : list A), Prop

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : list nat = sort l
lf1 : list nat = @cons nat a (sort l)
lf2 : list nat = insert a (sort l)

Generalizations:
Lemma conj1: forall (lf2 : list nat) (lf1 : list nat), @Permutation nat lf1 lf2.
Lemma conj2: forall (lf1 : list nat) (a : nat) (lf3 : list nat), @Permutation nat lf1 (insert a lf3).
Lemma conj3: forall (lf2 : list nat) (a : nat) (lf3 : list nat), @Permutation nat (@cons nat a lf3) lf2.
Lemma conj4: forall (a : nat) (lf3 : list nat), @Permutation nat (@cons nat a lf3) (insert a lf3).
Lemma conj6: forall (lf1 : list nat) (l : list nat) (a : nat), @Permutation nat lf1 (insert a (sort l)).
Lemma conj7: forall (lf2 : list nat) (l : list nat) (a : nat), @Permutation nat (@cons nat a (sort l)) lf2.
Lemma conj8: forall (l : list nat) (a : nat), @Permutation nat (@cons nat a (sort l)) (insert a (sort l)).


<---VALIDITY CHECKS--->
Time elapsed: 46 seconds
Valid:
Lemma conj8: forall (l : list nat) (a : nat), @Permutation nat (@cons nat a (sort l)) (insert a (sort l)).
Lemma conj4: forall (a : nat) (lf3 : list nat), @Permutation nat (@cons nat a lf3) (insert a lf3).

Invalid:
Lemma conj7: forall (lf2 : list nat) (l : list nat) (a : nat), @Permutation nat (@cons nat a (sort l)) lf2.
Lemma conj6: forall (lf1 : list nat) (l : list nat) (a : nat), @Permutation nat lf1 (insert a (sort l)).
Lemma conj3: forall (lf2 : list nat) (a : nat) (lf3 : list nat), @Permutation nat (@cons nat a lf3) lf2.
Lemma conj2: forall (lf1 : list nat) (a : nat) (lf3 : list nat), @Permutation nat lf1 (insert a lf3).
Lemma conj1: forall (lf2 : list nat) (lf1 : list nat), @Permutation nat lf1 lf2.

<---ADD IMPLICATIONS--->
Time elapsed: 53 seconds
Generalizations:
Lemma conj7: forall (lf2 : list nat) (l : list nat) (a : nat), @Permutation nat (@cons nat a (sort l)) lf2.
Lemma conj6: forall (lf1 : list nat) (l : list nat) (a : nat), @Permutation nat lf1 (insert a (sort l)).
Lemma conj3: forall (lf2 : list nat) (a : nat) (lf3 : list nat), @Permutation nat (@cons nat a lf3) lf2.
Lemma conj2: forall (lf1 : list nat) (a : nat) (lf3 : list nat), @Permutation nat lf1 (insert a lf3).
Lemma conj1: forall (lf2 : list nat) (lf1 : list nat), @Permutation nat lf1 lf2.


<---VALIDITY CHECKS--->
Time elapsed: 63 seconds
Valid:

Invalid:
Lemma conj1: forall (lf2 : list nat) (lf1 : list nat), @Permutation nat lf1 lf2.
Lemma conj2: forall (lf1 : list nat) (a : nat) (lf3 : list nat), @Permutation nat lf1 (insert a lf3).
Lemma conj3: forall (lf2 : list nat) (a : nat) (lf3 : list nat), @Permutation nat (@cons nat a lf3) lf2.
Lemma conj6: forall (lf1 : list nat) (l : list nat) (a : nat), @Permutation nat lf1 (insert a (sort l)).
Lemma conj7: forall (lf2 : list nat) (l : list nat) (a : nat), @Permutation nat (@cons nat a (sort l)) lf2.


<---CREATE SKETCHES--->
Time elapsed: 63 seconds
Sketches:
Sketch conj2_sketch0 : @Permutation nat lf1 (##hole##)
Sketch conj2_term_sketch0 : @eq (list nat) (insert a lf3) (##hole##)
Sketch conj3_sketch0 : @Permutation nat (##hole##) lf2
Sketch conj3_term_sketch0 : @eq (list nat) (@cons nat a lf3) (##hole##)
Sketch conj6_sketch0 : @Permutation nat lf1 (insert a (##hole##))
Sketch conj6_sketch1 : @Permutation nat lf1 (##hole##)
Sketch conj6_term_sketch0 : @eq (list nat) (sort l) (##hole##)
Sketch conj6_term_sketch1 : @eq (list nat) (insert a (sort l)) (##hole##)
Sketch conj7_sketch0 : @Permutation nat (@cons nat a (##hole##)) lf2
Sketch conj7_sketch1 : @Permutation nat (##hole##) lf2
Sketch conj7_term_sketch0 : @eq (list nat) (sort l) (##hole##)
Sketch conj7_term_sketch1 : @eq (list nat) (@cons nat a (sort l)) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 193 seconds
Problems per Sketch:
Sketch conj2_term_sketch0 --> Problem  synth_2
Sketch conj3_sketch0 --> Problem  synth_3
Sketch conj7_sketch1 --> Problem  synth_3
Sketch conj6_sketch1 --> Problem  synth_1
Sketch conj3_term_sketch0 --> Problem  synth_4
Sketch conj7_term_sketch1 --> Problem  synth_9
Sketch conj7_term_sketch0 --> Problem  synth_6
Sketch conj6_term_sketch1 --> Problem  synth_7
Sketch conj6_sketch0 --> Problem  synth_5
Sketch conj7_sketch0 --> Problem  synth_8
Sketch conj2_sketch0 --> Problem  synth_1
Sketch conj6_term_sketch0 --> Problem  synth_6


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 244 seconds

Problem: synth_8

Problem: synth_3

Problem: synth_9

Problem: synth_6

Problem: synth_7

Problem: synth_5

Problem: synth_4
 @cons nat a (sort (sort (sort (sort (sort lf3)))))
 @cons nat a (sort (sort (sort (sort lf3))))
 @cons nat a (sort (sort (sort lf3)))
 @cons nat a (sort (sort lf3))
 @cons nat a (sort lf3)
 @cons nat a lf3

Problem: synth_1
 sort (sort (sort (sort (sort (sort lf1)))))
 sort (sort (sort (sort (sort lf1))))
 sort (sort (sort (sort lf1)))
 sort (sort (sort lf1))
 sort (sort lf1)
 sort lf1

Problem: synth_2
 sort (sort (insert a lf3))
 sort (insert a (sort lf3))
 insert a (sort (sort lf3))
 sort (insert a lf3)
 insert a (sort lf3)
 insert a lf3

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 244 seconds
Lemmas:
Lemma candidate_1: forall (a : nat) (l : list nat), @Permutation nat (@cons nat a (sort l)) (insert a (sort l)).
Lemma candidate_2: forall (lf3 : list nat) (a : nat), @Permutation nat (@cons nat a lf3) (insert a lf3).
Lemma candidate_3: forall (lf1 : list nat), @Permutation nat lf1 (sort (sort (sort (sort (sort (sort lf1)))))).
Lemma candidate_4: forall (lf1 : list nat), @Permutation nat lf1 (sort (sort (sort (sort (sort lf1))))).
Lemma candidate_5: forall (lf1 : list nat), @Permutation nat lf1 (sort (sort (sort (sort lf1)))).
Lemma candidate_6: forall (lf1 : list nat), @Permutation nat lf1 (sort (sort (sort lf1))).
Lemma candidate_7: forall (lf1 : list nat), @Permutation nat lf1 (sort (sort lf1)).
Lemma candidate_8: forall (lf1 : list nat), @Permutation nat lf1 (sort lf1).
Lemma candidate_9: forall (lf3 : list nat) (a : nat), @eq (list nat) (insert a lf3) (sort (sort (insert a lf3))).
Lemma candidate_10: forall (lf3 : list nat) (a : nat), @eq (list nat) (insert a lf3) (sort (insert a (sort lf3))).
Lemma candidate_11: forall (lf3 : list nat) (a : nat), @eq (list nat) (insert a lf3) (insert a (sort (sort lf3))).
Lemma candidate_12: forall (lf3 : list nat) (a : nat), @eq (list nat) (insert a lf3) (sort (insert a lf3)).
Lemma candidate_13: forall (lf3 : list nat) (a : nat), @eq (list nat) (insert a lf3) (insert a (sort lf3)).
Lemma candidate_14: forall (lf3 : list nat) (a : nat), @eq (list nat) (insert a lf3) (insert a lf3).
Lemma candidate_15: forall (lf3 : list nat) (a : nat), @eq (list nat) (@cons nat a lf3)   (@cons nat a (sort (sort (sort (sort (sort lf3)))))).
Lemma candidate_16: forall (lf3 : list nat) (a : nat), @eq (list nat) (@cons nat a lf3)   (@cons nat a (sort (sort (sort (sort lf3))))).
Lemma candidate_17: forall (lf3 : list nat) (a : nat), @eq (list nat) (@cons nat a lf3) (@cons nat a (sort (sort (sort lf3)))).
Lemma candidate_18: forall (lf3 : list nat) (a : nat), @eq (list nat) (@cons nat a lf3) (@cons nat a (sort (sort lf3))).
Lemma candidate_19: forall (lf3 : list nat) (a : nat), @eq (list nat) (@cons nat a lf3) (@cons nat a (sort lf3)).
Lemma candidate_20: forall (lf3 : list nat) (a : nat), @eq (list nat) (@cons nat a lf3) (@cons nat a lf3).
Lemma candidate_21: forall (lf1 : list nat), @Permutation nat lf1 (sort (sort (sort (sort (sort (sort lf1)))))).
Lemma candidate_22: forall (lf1 : list nat), @Permutation nat lf1 (sort (sort (sort (sort (sort lf1))))).
Lemma candidate_23: forall (lf1 : list nat), @Permutation nat lf1 (sort (sort (sort (sort lf1)))).
Lemma candidate_24: forall (lf1 : list nat), @Permutation nat lf1 (sort (sort (sort lf1))).
Lemma candidate_25: forall (lf1 : list nat), @Permutation nat lf1 (sort (sort lf1)).
Lemma candidate_26: forall (lf1 : list nat), @Permutation nat lf1 (sort lf1).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 299 seconds
Duplicates removed: 7
Filtered by Quickchick: 10
Filtered by script: 3
Remaining: 6

Lemmas: 
Lemma candidate_7: forall (lf1 : list nat), @Permutation nat lf1 (sort (sort lf1)).
Lemma candidate_6: forall (lf1 : list nat), @Permutation nat lf1 (sort (sort (sort lf1))).
Lemma candidate_2: forall (lf3 : list nat) (a : nat), @Permutation nat (@cons nat a lf3) (insert a lf3).
Lemma candidate_5: forall (lf1 : list nat), @Permutation nat lf1 (sort (sort (sort (sort lf1)))).
Lemma candidate_4: forall (lf1 : list nat), @Permutation nat lf1 (sort (sort (sort (sort (sort lf1))))).
Lemma candidate_3: forall (lf1 : list nat), @Permutation nat lf1 (sort (sort (sort (sort (sort (sort lf1)))))).