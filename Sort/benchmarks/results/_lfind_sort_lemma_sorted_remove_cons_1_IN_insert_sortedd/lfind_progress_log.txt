File Information
- File name: Sort
- Original Directory: /home/anabrendel/lfind/vfa-benchmarks/Sort/benchmarks/sources/sort_lemma_sorted_remove_cons_1_IN_insert_sortedd
- LFind Directory: /home/anabrendel/lfind/vfa-benchmarks/Sort/benchmarks/sources/_lfind_sort_lemma_sorted_remove_cons_1_IN_insert_sortedd
- Namespace: vfa_benchmark
- Proof name: insert_sorted'
- Theorem: Theorem insert_sorted': forall (a1 : nat) (l : list nat) (_ : sorted' l), sorted' (insert a1 l).
- Declarations: 
From lfind Require Import LFind.
From VFA Require Import Perm.

Proof Context
* Goal State: sorted' (@cons nat a (@cons nat a0 (@nil nat)))

* Hypothesis:
H0 : le a a0
H1 : @eq bool (Nat.leb a0 a) false
a0 : nat
H : sorted' (@cons nat a (@nil nat))
IHl : forall (_ : sorted' (@nil nat)) (a1 : nat), sorted' (insert a1 (@nil nat))
a : nat
P : forall _ : @eq bool true true,
or (@eq bool (Nat.eqb a0 a) true) (@eq bool (Nat.leb a0 a) false)

* Types:
Set
Prop
bool
nat
list nat

* Polymorphic Types:


* Variables:
a0 : nat
a : nat

* Terms:
@eq bool (Nat.leb a0 a) false : Prop
sorted' (insert _UNBOUND_REL_1 (@nil nat)) : Prop
insert _UNBOUND_REL_1 (@nil nat) : list nat
@cons nat a (@nil nat) : list nat
sorted' (@nil nat) : Prop
forall _ : @eq bool true true,
or (@eq bool (Nat.eqb a0 a) true) (@eq bool (Nat.leb a0 a) false) : Prop
true : bool
sorted' (@cons nat a (@nil nat)) : Prop
@eq bool true true : Prop
@eq bool (Nat.eqb a0 a) true : Prop
or (@eq bool (Nat.eqb a0 a) true) (@eq bool (Nat.leb a0 a) false) : Prop
false : bool
nat : Set
bool : Set
sorted' (@cons nat a (@cons nat a0 (@nil nat))) : Prop
Nat.eqb a0 a : bool
le a a0 : Prop
@cons nat a (@cons nat a0 (@nil nat)) : list nat
a0 : nat
forall a1 : nat, sorted' (insert a1 (@nil nat)) : Prop
forall (_ : sorted' (@nil nat)) (a1 : nat), sorted' (insert a1 (@nil nat)) : Prop
Nat.leb a0 a : bool
a : nat
@nil nat : list nat
@cons nat a0 (@nil nat) : list nat

* Functions:
insert  : forall (_ : nat) (_ : list nat), list nat
sorted'  : forall _ : list nat, Prop
le  : forall (_ : nat) (_ : nat), Prop
Nat.eqb  : forall (_ : nat) (_ : nat), bool
@nil  : forall A : Type, list A
@cons  : forall (A : Type) (_ : A) (_ : list A), list A
Nat.leb  : forall (_ : nat) (_ : nat), bool
@eq  : forall (A : Type) (_ : A) (_ : A), Prop
or  : forall (_ : Prop) (_ : Prop), Prop

<---GENERALIZATION--->
Time elapsed: 3 seconds
Generalized Variables:
lf3 : list nat = @nil nat
lf1 : list nat = @cons nat a (@cons nat a0 (@nil nat))
lf2 : list nat = @cons nat a0 (@nil nat)

Generalizations:
Lemma conj1: forall (lf1 : list nat), sorted' lf1.
Lemma conj3: forall (lf2 : list nat) (a : nat), sorted' (@cons nat a lf2).
Lemma conj4: forall (a0 : nat) (a : nat) (lf3 : list nat), sorted' (@cons nat a (@cons nat a0 lf3)).
Lemma conj8: forall (a0 : nat) (a : nat), sorted' (@cons nat a (@cons nat a0 (@nil nat))).


<---VALIDITY CHECKS--->
Time elapsed: 13 seconds
Valid:

Invalid:
Lemma conj8: forall (a0 : nat) (a : nat), sorted' (@cons nat a (@cons nat a0 (@nil nat))).
Lemma conj4: forall (a0 : nat) (a : nat) (lf3 : list nat), sorted' (@cons nat a (@cons nat a0 lf3)).
Lemma conj3: forall (lf2 : list nat) (a : nat), sorted' (@cons nat a lf2).
Lemma conj1: forall (lf1 : list nat), sorted' lf1.

<---ADD IMPLICATIONS--->
Time elapsed: 35 seconds
Generalizations:
Lemma conj8: forall (a0 : nat) (a : nat), sorted' (@cons nat a (@cons nat a0 (@nil nat))).
Lemma conj8_imp: forall (a0 : nat) (a : nat), forall _ : forall _ : le a a0, @eq bool (Nat.leb a0 a) false,
sorted' (@cons nat a (@cons nat a0 (@nil nat))).
Lemma conj4: forall (a0 : nat) (a : nat) (lf3 : list nat), sorted' (@cons nat a (@cons nat a0 lf3)).
Lemma conj3: forall (lf2 : list nat) (a : nat), sorted' (@cons nat a lf2).
Lemma conj1: forall (lf1 : list nat), sorted' lf1.


<---VALIDITY CHECKS--->
Time elapsed: 46 seconds
Valid:

Invalid:
Lemma conj1: forall (lf1 : list nat), sorted' lf1.
Lemma conj3: forall (lf2 : list nat) (a : nat), sorted' (@cons nat a lf2).
Lemma conj4: forall (a0 : nat) (a : nat) (lf3 : list nat), sorted' (@cons nat a (@cons nat a0 lf3)).
Lemma conj8_imp: forall (a0 : nat) (a : nat), forall _ : forall _ : le a a0, @eq bool (Nat.leb a0 a) false,
sorted' (@cons nat a (@cons nat a0 (@nil nat))).
Lemma conj8: forall (a0 : nat) (a : nat), sorted' (@cons nat a (@cons nat a0 (@nil nat))).


<---CREATE SKETCHES--->
Time elapsed: 46 seconds
Sketches:
Sketch conj3_sketch0 : sorted' (##hole##)
Sketch conj3_term_sketch0 : @eq (list nat) (@cons nat a lf2) (##hole##)
Sketch conj4_sketch0 : sorted' (##hole##)
Sketch conj4_sketch1 : sorted' (@cons nat a (##hole##))
Sketch conj4_term_sketch0 : @eq (list nat) (@cons nat a (@cons nat a0 lf3)) (##hole##)
Sketch conj4_term_sketch1 : @eq (list nat) (@cons nat a0 lf3) (##hole##)
Sketch conj8_imp_sketch0 : forall _ : forall _ : le a a0, @eq bool (Nat.leb a0 a) (##hole##),
sorted' (@cons nat a (@cons nat a0 (@nil nat)))
Sketch conj8_imp_sketch1 : forall _ : forall _ : le a a0, @eq bool (Nat.leb a0 a) false,
sorted' (##hole##)
Sketch conj8_imp_sketch2 : forall _ : forall _ : le a a0, @eq bool (##hole##) false,
sorted' (@cons nat a (@cons nat a0 (@nil nat)))
Sketch conj8_imp_sketch3 : forall _ : forall _ : le a a0, @eq bool (Nat.leb a0 a) false,
sorted' (@cons nat a (@cons nat a0 (##hole##)))
Sketch conj8_imp_sketch4 : forall _ : forall _ : le a a0, @eq bool (Nat.leb a0 a) false,
sorted' (@cons nat a (##hole##))
Sketch conj8_imp_term_sketch0 : @eq bool false (##hole##)
Sketch conj8_imp_term_sketch1 : @eq (list nat) (@cons nat a (@cons nat a0 (@nil nat))) (##hole##)
Sketch conj8_imp_term_sketch2 : @eq bool (Nat.leb a0 a) (##hole##)
Sketch conj8_imp_term_sketch3 : @eq (list nat) (@nil nat) (##hole##)
Sketch conj8_imp_term_sketch4 : @eq (list nat) (@cons nat a0 (@nil nat)) (##hole##)
Sketch conj8_sketch0 : sorted' (##hole##)
Sketch conj8_sketch1 : sorted' (@cons nat a (@cons nat a0 (##hole##)))
Sketch conj8_sketch2 : sorted' (@cons nat a (##hole##))
Sketch conj8_term_sketch0 : @eq (list nat) (@cons nat a (@cons nat a0 (@nil nat))) (##hole##)
Sketch conj8_term_sketch1 : @eq (list nat) (@nil nat) (##hole##)
Sketch conj8_term_sketch2 : @eq (list nat) (@cons nat a0 (@nil nat)) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 59 seconds
Problems per Sketch:
Sketch conj3_term_sketch0 --> Problem  synth_2
Sketch conj8_imp_sketch3 --> Problem  synth_9
Sketch conj8_imp_term_sketch4 --> Problem  synth_13
Sketch conj8_sketch1 --> Problem  synth_9
Sketch conj4_sketch0 --> Problem  synth_1
Sketch conj8_imp_term_sketch0 --> Problem  synth_11
Sketch conj4_sketch1 --> Problem  synth_3
Sketch conj8_imp_sketch0 --> Problem  synth_6
Sketch conj4_term_sketch1 --> Problem  synth_5
Sketch conj8_term_sketch0 --> Problem  synth_7
Sketch conj3_sketch0 --> Problem  synth_1
Sketch conj8_sketch2 --> Problem  synth_3
Sketch conj8_sketch0 --> Problem  synth_1
Sketch conj8_imp_sketch2 --> Problem  synth_8
Sketch conj8_imp_term_sketch2 --> Problem  synth_8
Sketch conj8_term_sketch1 --> Problem  synth_12
Sketch conj8_imp_term_sketch3 --> Problem  synth_12
Sketch conj4_term_sketch0 --> Problem  synth_4
Sketch conj8_term_sketch2 --> Problem  synth_13
Sketch conj8_imp_sketch1 --> Problem  synth_7
Sketch conj8_imp_term_sketch1 --> Problem  synth_7
Sketch conj8_imp_sketch4 --> Problem  synth_10


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 59 seconds

Problem: synth_10

Problem: synth_8

Problem: synth_3

Problem: synth_9

Problem: synth_13

Problem: synth_12

Problem: synth_6

Problem: synth_11

Problem: synth_7

Problem: synth_5

Problem: synth_4

Problem: synth_1

Problem: synth_2

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 60 seconds
Lemmas:

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 60 seconds
Duplicates removed: 0
Filtered by Quickchick: 0
Filtered by script: 0
Remaining: 0

Lemmas: 