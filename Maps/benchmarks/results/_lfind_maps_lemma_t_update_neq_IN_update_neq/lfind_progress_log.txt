File Information
- File name: Maps
- Original Directory: /home/anabrendel/lfind/vfa-benchmarks/Maps/benchmarks/sources/maps_lemma_t_update_neq_IN_update_neq
- LFind Directory: /home/anabrendel/lfind/vfa-benchmarks/Maps/benchmarks/sources/_lfind_maps_lemma_t_update_neq_IN_update_neq
- Namespace: vfa_benchmark
- Proof name: update_neq
- Theorem: Theorem update_neq: forall (X0 : Type) (v0 : X0) (x0 x3 : nat) (m0 : partial_map X0)
  (_ : not (@eq nat x3 x0)), @eq (option X0) (@update X0 m0 x3 v0 x0) (m0 x0).
- Declarations: 
From lfind Require Import LFind.
From Coq Require Import Bool.Bool.
From Coq Require Import Logic.FunctionalExtensionality.
From VFA Require Import Perm.

Proof Context
* Goal State: @eq (option X) (@t_update (option X) m x2 (@Some X v) x1) (m x1)

* Hypothesis:
H : not (@eq nat x2 x1)
m : partial_map X
v : X
x1 : nat
x2 : nat
X : Type

* Types:
Set
partial_map X
X
Prop
Type
nat
option X

* Polymorphic Types:
option X
partial_map X

* Variables:
v : X
m : partial_map X
x1 : nat
X : Type
x2 : nat

* Terms:
option X : Type
@eq nat x2 x1 : Prop
nat : Set
@Some X v : option X
v : X
m : partial_map X
m x1 : option X
x1 : nat
Type : Type
X : Type
partial_map X : Type
x2 : nat
@t_update (option X) m x2 (@Some X v) x1 : option X
@eq (option X) (@t_update (option X) m x2 (@Some X v) x1) (m x1) : Prop
not (@eq nat x2 x1) : Prop

* Functions:
m  : partial_map X
@Some (X) : forall (A : Type) (_ : A), option A
option (X) : forall _ : Type, Type
not  : forall _ : Prop, Prop
@eq (option X) : forall (A : Type) (_ : A) (_ : A), Prop
partial_map (X) : forall _ : Type, Type
@t_update (option X) : forall (A : Type) (_ : total_map A) (_ : nat) (_ : A), total_map A

<---GENERALIZATION--->
Time elapsed: 3 seconds
Generalized Variables:
lf3 : option X = m x1
lf1 : option X = @t_update (option X) m x2 (@Some X v) x1
lf2 : option X = @Some X v

Generalizations:
Lemma conj1: forall {X} (lf1 : option X) (lf3 : option X), @eq (option X) lf1 lf3.
Lemma conj3: forall {X} (lf2 : option X) (m : partial_map X) (x1 : nat) (x2 : nat) (lf3 : option X), @eq (option X) (@t_update (option X) m x2 lf2 x1) lf3.
Lemma conj4: forall {X} (v : X) (m : partial_map X) (x1 : nat) (x2 : nat) (lf3 : option X), @eq (option X) (@t_update (option X) m x2 (@Some X v) x1) lf3.
Lemma conj5: forall {X} (m : partial_map X) (x1 : nat) (lf1 : option X), @eq (option X) lf1 (m x1).
Lemma conj7: forall {X} (lf2 : option X) (m : partial_map X) (x1 : nat) (x2 : nat), @eq (option X) (@t_update (option X) m x2 lf2 x1) (m x1).
Lemma conj8: forall {X} (m : partial_map X) (v : X) (x1 : nat) (x2 : nat), @eq (option X) (@t_update (option X) m x2 (@Some X v) x1) (m x1).


<---VALIDITY CHECKS--->
Time elapsed: 22 seconds
Valid:

Invalid:
Lemma conj8: forall {X} (m : partial_map X) (v : X) (x1 : nat) (x2 : nat), @eq (option X) (@t_update (option X) m x2 (@Some X v) x1) (m x1).
Lemma conj7: forall {X} (lf2 : option X) (m : partial_map X) (x1 : nat) (x2 : nat), @eq (option X) (@t_update (option X) m x2 lf2 x1) (m x1).
Lemma conj5: forall {X} (m : partial_map X) (x1 : nat) (lf1 : option X), @eq (option X) lf1 (m x1).
Lemma conj4: forall {X} (v : X) (m : partial_map X) (x1 : nat) (x2 : nat) (lf3 : option X), @eq (option X) (@t_update (option X) m x2 (@Some X v) x1) lf3.
Lemma conj3: forall {X} (lf2 : option X) (m : partial_map X) (x1 : nat) (x2 : nat) (lf3 : option X), @eq (option X) (@t_update (option X) m x2 lf2 x1) lf3.
Lemma conj1: forall {X} (lf1 : option X) (lf3 : option X), @eq (option X) lf1 lf3.

<---ADD IMPLICATIONS--->
Time elapsed: 36 seconds
Generalizations:
Lemma conj8: forall {X} (m : partial_map X) (v : X) (x1 : nat) (x2 : nat), @eq (option X) (@t_update (option X) m x2 (@Some X v) x1) (m x1).
Lemma conj8_imp: forall {X} (m : partial_map X) (v : X) (x1 : nat) (x2 : nat), forall _ : not (@eq nat x2 x1),
@eq (option X) (@t_update (option X) m x2 (@Some X v) x1) (m x1).
Lemma conj7: forall {X} (lf2 : option X) (m : partial_map X) (x1 : nat) (x2 : nat), @eq (option X) (@t_update (option X) m x2 lf2 x1) (m x1).
Lemma conj7_imp: forall {X} (lf2 : option X) (m : partial_map X) (x1 : nat) (x2 : nat), forall _ : not (@eq nat x2 x1),
@eq (option X) (@t_update (option X) m x2 lf2 x1) (m x1).
Lemma conj5: forall {X} (m : partial_map X) (x1 : nat) (lf1 : option X), @eq (option X) lf1 (m x1).
Lemma conj4: forall {X} (v : X) (m : partial_map X) (x1 : nat) (x2 : nat) (lf3 : option X), @eq (option X) (@t_update (option X) m x2 (@Some X v) x1) lf3.
Lemma conj4_imp: forall {X} (v : X) (m : partial_map X) (x1 : nat) (x2 : nat) (lf3 : option X), forall _ : not (@eq nat x2 x1),
@eq (option X) (@t_update (option X) m x2 (@Some X v) x1) lf3.
Lemma conj3: forall {X} (lf2 : option X) (m : partial_map X) (x1 : nat) (x2 : nat) (lf3 : option X), @eq (option X) (@t_update (option X) m x2 lf2 x1) lf3.
Lemma conj1: forall {X} (lf1 : option X) (lf3 : option X), @eq (option X) lf1 lf3.


<---VALIDITY CHECKS--->
Time elapsed: 51 seconds
Valid:
Lemma conj7_imp: forall {X} (lf2 : option X) (m : partial_map X) (x1 : nat) (x2 : nat), forall _ : not (@eq nat x2 x1),
@eq (option X) (@t_update (option X) m x2 lf2 x1) (m x1).
Lemma conj8_imp: forall {X} (m : partial_map X) (v : X) (x1 : nat) (x2 : nat), forall _ : not (@eq nat x2 x1),
@eq (option X) (@t_update (option X) m x2 (@Some X v) x1) (m x1).

Invalid:
Lemma conj1: forall {X} (lf1 : option X) (lf3 : option X), @eq (option X) lf1 lf3.
Lemma conj3: forall {X} (lf2 : option X) (m : partial_map X) (x1 : nat) (x2 : nat) (lf3 : option X), @eq (option X) (@t_update (option X) m x2 lf2 x1) lf3.
Lemma conj4_imp: forall {X} (v : X) (m : partial_map X) (x1 : nat) (x2 : nat) (lf3 : option X), forall _ : not (@eq nat x2 x1),
@eq (option X) (@t_update (option X) m x2 (@Some X v) x1) lf3.
Lemma conj4: forall {X} (v : X) (m : partial_map X) (x1 : nat) (x2 : nat) (lf3 : option X), @eq (option X) (@t_update (option X) m x2 (@Some X v) x1) lf3.
Lemma conj5: forall {X} (m : partial_map X) (x1 : nat) (lf1 : option X), @eq (option X) lf1 (m x1).
Lemma conj7: forall {X} (lf2 : option X) (m : partial_map X) (x1 : nat) (x2 : nat), @eq (option X) (@t_update (option X) m x2 lf2 x1) (m x1).
Lemma conj8: forall {X} (m : partial_map X) (v : X) (x1 : nat) (x2 : nat), @eq (option X) (@t_update (option X) m x2 (@Some X v) x1) (m x1).


<---CREATE SKETCHES--->
Time elapsed: 51 seconds
Sketches:
Sketch conj3_sketch0 : @eq (option X) (##hole##) lf3
Sketch conj3_term_sketch0 : @eq (option X) (@t_update (option X) m x2 lf2 x1) (##hole##)
Sketch conj4_imp_sketch0 : forall _ : not (@eq nat x2 x1),
@eq (option X) (@t_update (option X) m x2 (##hole##) x1) lf3
Sketch conj4_imp_sketch1 : forall _ : not (@eq nat x2 x1), @eq (option X) (##hole##) lf3
Sketch conj4_imp_term_sketch0 : @eq (option X) (@Some X v) (##hole##)
Sketch conj4_imp_term_sketch1 : @eq (option X) (@t_update (option X) m x2 (@Some X v) x1) (##hole##)
Sketch conj4_sketch0 : @eq (option X) (@t_update (option X) m x2 (##hole##) x1) lf3
Sketch conj4_sketch1 : @eq (option X) (##hole##) lf3
Sketch conj4_term_sketch0 : @eq (option X) (@Some X v) (##hole##)
Sketch conj4_term_sketch1 : @eq (option X) (@t_update (option X) m x2 (@Some X v) x1) (##hole##)
Sketch conj5_sketch0 : @eq (option X) lf1 (##hole##)
Sketch conj5_term_sketch0 : @eq (option X) (m x1) (##hole##)
Sketch conj7_sketch0 : @eq (option X) (@t_update (option X) m x2 lf2 x1) (##hole##)
Sketch conj7_sketch1 : @eq (option X) (##hole##) (m x1)
Sketch conj7_term_sketch0 : @eq (option X) (m x1) (##hole##)
Sketch conj7_term_sketch1 : @eq (option X) (@t_update (option X) m x2 lf2 x1) (##hole##)
Sketch conj8_sketch0 : @eq (option X) (@t_update (option X) m x2 (##hole##) x1) (m x1)
Sketch conj8_sketch1 : @eq (option X) (@t_update (option X) m x2 (@Some X v) x1) (##hole##)
Sketch conj8_sketch2 : @eq (option X) (##hole##) (m x1)
Sketch conj8_term_sketch0 : @eq (option X) (@Some X v) (##hole##)
Sketch conj8_term_sketch1 : @eq (option X) (m x1) (##hole##)
Sketch conj8_term_sketch2 : @eq (option X) (@t_update (option X) m x2 (@Some X v) x1) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 105 seconds
Problems per Sketch:
Sketch conj7_sketch1 --> Problem  synth_10
Sketch conj5_sketch0 --> Problem  synth_7
Sketch conj3_term_sketch0 --> Problem  synth_2
Sketch conj7_term_sketch0 --> Problem  synth_8
Sketch conj4_imp_term_sketch0 --> Problem  synth_5
Sketch conj8_sketch1 --> Problem  synth_12
Sketch conj7_sketch0 --> Problem  synth_9
Sketch conj4_sketch0 --> Problem  synth_3
Sketch conj4_sketch1 --> Problem  synth_1
Sketch conj4_term_sketch1 --> Problem  synth_6
Sketch conj4_imp_sketch1 --> Problem  synth_4
Sketch conj8_term_sketch0 --> Problem  synth_5
Sketch conj4_imp_term_sketch1 --> Problem  synth_6
Sketch conj3_sketch0 --> Problem  synth_1
Sketch conj8_sketch2 --> Problem  synth_10
Sketch conj8_sketch0 --> Problem  synth_11
Sketch conj7_term_sketch1 --> Problem  synth_2
Sketch conj8_term_sketch1 --> Problem  synth_8
Sketch conj4_term_sketch0 --> Problem  synth_5
Sketch conj8_term_sketch2 --> Problem  synth_6
Sketch conj5_term_sketch0 --> Problem  synth_8
Sketch conj4_imp_sketch0 --> Problem  synth_3


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 112 seconds

Problem: synth_10

Problem: synth_8

Problem: synth_3

Problem: synth_9

Problem: synth_12

Problem: synth_6

Problem: synth_11

Problem: synth_7

Problem: synth_5

Problem: synth_4

Problem: synth_1

Problem: synth_2

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 112 seconds
Lemmas:
Lemma candidate_1: forall {X} (x2 : nat) (x1 : nat) (m : partial_map X) (lf2 : option X), not (not (@eq nat x2 x1)) \/ (@eq (option X) (@t_update (option X) m x2 lf2 x1) (m x1)).
Lemma candidate_2: forall {X} (x2 : nat) (x1 : nat) (v : X) (m : partial_map X), not (not (@eq nat x2 x1)) \/ (@eq (option X) (@t_update (option X) m x2 (@Some X v) x1) (m x1)).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 122 seconds
Duplicates removed: 0
Filtered by Quickchick: 0
Filtered by script: 0
Remaining: 2

Lemmas: 
Lemma candidate_1: forall {X} (x2 : nat) (x1 : nat) (m : partial_map X) (lf2 : option X), not (not (@eq nat x2 x1)) \/ (@eq (option X) (@t_update (option X) m x2 lf2 x1) (m x1)).
Lemma candidate_2: forall {X} (x2 : nat) (x1 : nat) (v : X) (m : partial_map X), not (not (@eq nat x2 x1)) \/ (@eq (option X) (@t_update (option X) m x2 (@Some X v) x1) (m x1)).