File Information
- File name: Maps
- Original Directory: /home/anabrendel/lfind/vfa-benchmarks/Maps/benchmarks/maps_lemma_t_incr_update_IN_t_update_neq
- LFind Directory: /home/anabrendel/lfind/vfa-benchmarks/Maps/benchmarks/_lfind_maps_lemma_t_incr_update_IN_t_update_neq
- Namespace: vfa_benchmark
- Proof name: t_update_neq
- Theorem: Theorem t_update_neq: forall (T0 : Type) (x0 x3 : nat) (v0 : T0) (m : total_map T0)
  (_ : not (@eq nat x0 x3)),
@eq T0 (@find T0 (@t_update T0 m x0 v0) x3) (@find T0 m x3).
- Declarations: 
From lfind Require Import LFind.
From Coq Require Import Bool.Bool.
From Coq Require Import Logic.FunctionalExtensionality.
From VFA Require Import Perm.

Proof Context
* Goal State: @eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l))
  (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l))

* Hypothesis:
T : Type
G : forall _ : not (@eq nat x1 x2), @eq bool (Nat.eqb x1 x2) false
H : not (@eq nat x1 x2)
v : T
t0 : T
x1 : nat
IHl : @eq T (@find T (@pair (list (prod nat T)) T (@update_helper T x1 v l) t) x2)
  (@find T (@pair (list (prod nat T)) T l t) x2)
t : T
l : list (prod nat T)
n : nat
x2 : nat
n0 : not (@eq nat n x1)

* Types:
Set
Prop
Type
list (prod nat T)
bool
prod nat T
nat
prod (list (prod nat T)) T
T

* Polymorphic Types:
prod (list (prod nat T)) T
prod nat T
list (prod nat T)

* Variables:
T : Type
v : T
t0 : T
x1 : nat
t : T
l : list (prod nat T)
n : nat
x2 : nat

* Terms:
forall _ : not (@eq nat x1 x2), @eq bool (Nat.eqb x1 x2) false : Prop
prod nat T : Type
v : T
list (prod nat T) : Type
@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l) : list (prod nat T)
@eq T (@find T (@pair (list (prod nat T)) T (@update_helper T x1 v l) t) x2)
  (@find T (@pair (list (prod nat T)) T l t) x2) : Prop
not (@eq nat x1 x2) : Prop
@find T (@pair (list (prod nat T)) T l t) x2 : T
@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l) : list (prod nat T)
l : list (prod nat T)
@update_helper T x1 v l : list (prod nat T)
@pair nat T n t0 : prod nat T
T : Type
@find T (@pair (list (prod nat T)) T (@update_helper T x1 v l) t) x2 : T
not (@eq nat n x1) : Prop
false : bool
nat : Set
bool : Set
@pair (list (prod nat T)) T (@update_helper T x1 v l) t : prod (list (prod nat T)) T
Nat.eqb x1 x2 : bool
x1 : nat
@eq bool (Nat.eqb x1 x2) false : Prop
t0 : T
Type : Type
t : T
@cons (prod nat T) (@pair nat T n t0) l : list (prod nat T)
n : nat
x2 : nat
@pair (list (prod nat T)) T l t : prod (list (prod nat T)) T
@eq nat n x1 : Prop
@eq nat x1 x2 : Prop
@eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l))
  (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l)) : Prop

* Functions:
prod (T) : forall (_ : Type) (_ : Type), Type
@pair (T) : forall (A B : Type) (_ : A) (_ : B), prod A B
Nat.eqb  : forall (_ : nat) (_ : nat), bool
@update_helper (T) : forall (A : Type) (_ : nat) (_ : A) (_ : list (prod nat A)),
list (prod nat A)
list (prod nat T) : forall _ : Type, Type
@cons (prod nat T) : forall (T0 : Type) (_ : T0) (_ : list T0), list T0
not  : forall _ : Prop, Prop
@eq (list (prod nat T)) : forall (A : Type) (_ : A) (_ : A), Prop
@find (T) : forall (A : Type) (_ : total_map A) (_ : nat), A

<---GENERALIZATION--->
Time elapsed: 2 seconds
Generalized Variables:
lf3 : list (prod nat T) = @cons (prod nat T) (@pair nat T n t0) l
lf1 : list (prod nat T) = @update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l)
lf4 : list (prod nat T) = @update_helper T x1 v l
lf5 : prod nat T = @pair nat T n t0
lf2 : list (prod nat T) = @cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l)

Generalizations:
Lemma conj1: forall {T} (lf2 : list (prod nat T)) (lf1 : list (prod nat T)), @eq (list (prod nat T)) lf2 lf1.
Lemma conj2: forall {T} (lf5 : prod nat T) (lf4 : list (prod nat T)) (lf1 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4) lf1.
Lemma conj4: forall {T} (lf4 : list (prod nat T)) (lf1 : list (prod nat T)) (t0 : T) (n : nat), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4) lf1.
Lemma conj6: forall {T} (lf5 : prod nat T) (v : T) (lf1 : list (prod nat T)) (x1 : nat) (l : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) lf5 (@update_helper T x1 v l))
  lf1.
Lemma conj8: forall {T} (v : T) (lf1 : list (prod nat T)) (x1 : nat) (t0 : T) (l : list (prod nat T)) (n : nat), @eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l)) lf1.
Lemma conj9: forall {T} (lf2 : list (prod nat T)) (v : T) (x1 : nat) (lf3 : list (prod nat T)), @eq (list (prod nat T)) lf2 (@update_helper T x1 v lf3).
Lemma conj10: forall {T} (lf5 : prod nat T) (v : T) (lf4 : list (prod nat T)) (x1 : nat) (lf3 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4)
  (@update_helper T x1 v lf3).
Lemma conj12: forall {T} (v : T) (lf4 : list (prod nat T)) (x1 : nat) (t0 : T) (n : nat) (lf3 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)
  (@update_helper T x1 v lf3).
Lemma conj14: forall {T} (lf5 : prod nat T) (v : T) (x1 : nat) (l : list (prod nat T)) (lf3 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) lf5 (@update_helper T x1 v l))
  (@update_helper T x1 v lf3).
Lemma conj16: forall {T} (v : T) (x1 : nat) (t0 : T) (l : list (prod nat T)) (n : nat) (lf3 : list (prod nat T)), @eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l))
  (@update_helper T x1 v lf3).
Lemma conj25: forall {T} (lf2 : list (prod nat T)) (lf5 : prod nat T) (v : T) (x1 : nat) (l : list (prod nat T)), @eq (list (prod nat T)) lf2
  (@update_helper T x1 v (@cons (prod nat T) lf5 l)).
Lemma conj26: forall {T} (lf5 : prod nat T) (v : T) (lf4 : list (prod nat T)) (x1 : nat) (l : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4)
  (@update_helper T x1 v (@cons (prod nat T) lf5 l)).
Lemma conj27: forall {T} (lf2 : list (prod nat T)) (v : T) (t0 : T) (x1 : nat) (l : list (prod nat T)) (n : nat), @eq (list (prod nat T)) lf2
  (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l)).
Lemma conj28: forall {T} (v : T) (lf4 : list (prod nat T)) (t0 : T) (x1 : nat) (l : list (prod nat T)) (n : nat), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)
  (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l)).
Lemma conj30: forall {T} (lf5 : prod nat T) (v : T) (x1 : nat) (l : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) lf5 (@update_helper T x1 v l))
  (@update_helper T x1 v (@cons (prod nat T) lf5 l)).
Lemma conj32: forall {T} (v : T) (t0 : T) (x1 : nat) (l : list (prod nat T)) (n : nat), @eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l))
  (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l)).


<---VALIDITY CHECKS--->
Time elapsed: 30 seconds
Valid:

Invalid:
Lemma conj32: forall {T} (v : T) (t0 : T) (x1 : nat) (l : list (prod nat T)) (n : nat), @eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l))
  (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l)).
Lemma conj30: forall {T} (lf5 : prod nat T) (v : T) (x1 : nat) (l : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) lf5 (@update_helper T x1 v l))
  (@update_helper T x1 v (@cons (prod nat T) lf5 l)).
Lemma conj28: forall {T} (v : T) (lf4 : list (prod nat T)) (t0 : T) (x1 : nat) (l : list (prod nat T)) (n : nat), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)
  (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l)).
Lemma conj27: forall {T} (lf2 : list (prod nat T)) (v : T) (t0 : T) (x1 : nat) (l : list (prod nat T)) (n : nat), @eq (list (prod nat T)) lf2
  (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l)).
Lemma conj26: forall {T} (lf5 : prod nat T) (v : T) (lf4 : list (prod nat T)) (x1 : nat) (l : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4)
  (@update_helper T x1 v (@cons (prod nat T) lf5 l)).
Lemma conj25: forall {T} (lf2 : list (prod nat T)) (lf5 : prod nat T) (v : T) (x1 : nat) (l : list (prod nat T)), @eq (list (prod nat T)) lf2
  (@update_helper T x1 v (@cons (prod nat T) lf5 l)).
Lemma conj16: forall {T} (v : T) (x1 : nat) (t0 : T) (l : list (prod nat T)) (n : nat) (lf3 : list (prod nat T)), @eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l))
  (@update_helper T x1 v lf3).
Lemma conj14: forall {T} (lf5 : prod nat T) (v : T) (x1 : nat) (l : list (prod nat T)) (lf3 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) lf5 (@update_helper T x1 v l))
  (@update_helper T x1 v lf3).
Lemma conj12: forall {T} (v : T) (lf4 : list (prod nat T)) (x1 : nat) (t0 : T) (n : nat) (lf3 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)
  (@update_helper T x1 v lf3).
Lemma conj10: forall {T} (lf5 : prod nat T) (v : T) (lf4 : list (prod nat T)) (x1 : nat) (lf3 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4)
  (@update_helper T x1 v lf3).
Lemma conj9: forall {T} (lf2 : list (prod nat T)) (v : T) (x1 : nat) (lf3 : list (prod nat T)), @eq (list (prod nat T)) lf2 (@update_helper T x1 v lf3).
Lemma conj8: forall {T} (v : T) (lf1 : list (prod nat T)) (x1 : nat) (t0 : T) (l : list (prod nat T)) (n : nat), @eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l)) lf1.
Lemma conj6: forall {T} (lf5 : prod nat T) (v : T) (lf1 : list (prod nat T)) (x1 : nat) (l : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) lf5 (@update_helper T x1 v l))
  lf1.
Lemma conj4: forall {T} (lf4 : list (prod nat T)) (lf1 : list (prod nat T)) (t0 : T) (n : nat), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4) lf1.
Lemma conj2: forall {T} (lf5 : prod nat T) (lf4 : list (prod nat T)) (lf1 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4) lf1.
Lemma conj1: forall {T} (lf2 : list (prod nat T)) (lf1 : list (prod nat T)), @eq (list (prod nat T)) lf2 lf1.

<---ADD IMPLICATIONS--->
Time elapsed: 65 seconds
Generalizations:
Lemma conj32: forall {T} (v : T) (t0 : T) (x1 : nat) (l : list (prod nat T)) (n : nat), @eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l))
  (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l)).
Lemma conj32_imp: forall {T} (v : T) (t0 : T) (x1 : nat) (l : list (prod nat T)) (n : nat), forall _ : not (@eq nat n x1),
@eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l))
  (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l)).
Lemma conj30: forall {T} (lf5 : prod nat T) (v : T) (x1 : nat) (l : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) lf5 (@update_helper T x1 v l))
  (@update_helper T x1 v (@cons (prod nat T) lf5 l)).
Lemma conj28: forall {T} (v : T) (lf4 : list (prod nat T)) (t0 : T) (x1 : nat) (l : list (prod nat T)) (n : nat), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)
  (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l)).
Lemma conj27: forall {T} (lf2 : list (prod nat T)) (v : T) (t0 : T) (x1 : nat) (l : list (prod nat T)) (n : nat), @eq (list (prod nat T)) lf2
  (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l)).
Lemma conj27_imp: forall {T} (lf2 : list (prod nat T)) (v : T) (t0 : T) (x1 : nat) (l : list (prod nat T)) (n : nat), forall _ : not (@eq nat n x1),
@eq (list (prod nat T)) lf2
  (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l)).
Lemma conj26: forall {T} (lf5 : prod nat T) (v : T) (lf4 : list (prod nat T)) (x1 : nat) (l : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4)
  (@update_helper T x1 v (@cons (prod nat T) lf5 l)).
Lemma conj25: forall {T} (lf2 : list (prod nat T)) (lf5 : prod nat T) (v : T) (x1 : nat) (l : list (prod nat T)), @eq (list (prod nat T)) lf2
  (@update_helper T x1 v (@cons (prod nat T) lf5 l)).
Lemma conj16: forall {T} (v : T) (x1 : nat) (t0 : T) (l : list (prod nat T)) (n : nat) (lf3 : list (prod nat T)), @eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l))
  (@update_helper T x1 v lf3).
Lemma conj16_imp: forall {T} (v : T) (x1 : nat) (t0 : T) (l : list (prod nat T)) (n : nat) (lf3 : list (prod nat T)), forall _ : not (@eq nat n x1),
@eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l))
  (@update_helper T x1 v lf3).
Lemma conj14: forall {T} (lf5 : prod nat T) (v : T) (x1 : nat) (l : list (prod nat T)) (lf3 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) lf5 (@update_helper T x1 v l))
  (@update_helper T x1 v lf3).
Lemma conj12: forall {T} (v : T) (lf4 : list (prod nat T)) (x1 : nat) (t0 : T) (n : nat) (lf3 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)
  (@update_helper T x1 v lf3).
Lemma conj10: forall {T} (lf5 : prod nat T) (v : T) (lf4 : list (prod nat T)) (x1 : nat) (lf3 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4)
  (@update_helper T x1 v lf3).
Lemma conj9: forall {T} (lf2 : list (prod nat T)) (v : T) (x1 : nat) (lf3 : list (prod nat T)), @eq (list (prod nat T)) lf2 (@update_helper T x1 v lf3).
Lemma conj8: forall {T} (v : T) (lf1 : list (prod nat T)) (x1 : nat) (t0 : T) (l : list (prod nat T)) (n : nat), @eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l)) lf1.
Lemma conj8_imp: forall {T} (v : T) (lf1 : list (prod nat T)) (x1 : nat) (t0 : T) (l : list (prod nat T)) (n : nat), forall _ : not (@eq nat n x1),
@eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l)) lf1.
Lemma conj6: forall {T} (lf5 : prod nat T) (v : T) (lf1 : list (prod nat T)) (x1 : nat) (l : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) lf5 (@update_helper T x1 v l))
  lf1.
Lemma conj4: forall {T} (lf4 : list (prod nat T)) (lf1 : list (prod nat T)) (t0 : T) (n : nat), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4) lf1.
Lemma conj2: forall {T} (lf5 : prod nat T) (lf4 : list (prod nat T)) (lf1 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4) lf1.
Lemma conj1: forall {T} (lf2 : list (prod nat T)) (lf1 : list (prod nat T)), @eq (list (prod nat T)) lf2 lf1.


<---VALIDITY CHECKS--->
Time elapsed: 97 seconds
Valid:
Lemma conj32_imp: forall {T} (v : T) (t0 : T) (x1 : nat) (l : list (prod nat T)) (n : nat), forall _ : not (@eq nat n x1),
@eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l))
  (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l)).

Invalid:
Lemma conj1: forall {T} (lf2 : list (prod nat T)) (lf1 : list (prod nat T)), @eq (list (prod nat T)) lf2 lf1.
Lemma conj2: forall {T} (lf5 : prod nat T) (lf4 : list (prod nat T)) (lf1 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4) lf1.
Lemma conj4: forall {T} (lf4 : list (prod nat T)) (lf1 : list (prod nat T)) (t0 : T) (n : nat), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4) lf1.
Lemma conj6: forall {T} (lf5 : prod nat T) (v : T) (lf1 : list (prod nat T)) (x1 : nat) (l : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) lf5 (@update_helper T x1 v l))
  lf1.
Lemma conj8_imp: forall {T} (v : T) (lf1 : list (prod nat T)) (x1 : nat) (t0 : T) (l : list (prod nat T)) (n : nat), forall _ : not (@eq nat n x1),
@eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l)) lf1.
Lemma conj8: forall {T} (v : T) (lf1 : list (prod nat T)) (x1 : nat) (t0 : T) (l : list (prod nat T)) (n : nat), @eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l)) lf1.
Lemma conj9: forall {T} (lf2 : list (prod nat T)) (v : T) (x1 : nat) (lf3 : list (prod nat T)), @eq (list (prod nat T)) lf2 (@update_helper T x1 v lf3).
Lemma conj10: forall {T} (lf5 : prod nat T) (v : T) (lf4 : list (prod nat T)) (x1 : nat) (lf3 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4)
  (@update_helper T x1 v lf3).
Lemma conj12: forall {T} (v : T) (lf4 : list (prod nat T)) (x1 : nat) (t0 : T) (n : nat) (lf3 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)
  (@update_helper T x1 v lf3).
Lemma conj14: forall {T} (lf5 : prod nat T) (v : T) (x1 : nat) (l : list (prod nat T)) (lf3 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) lf5 (@update_helper T x1 v l))
  (@update_helper T x1 v lf3).
Lemma conj16_imp: forall {T} (v : T) (x1 : nat) (t0 : T) (l : list (prod nat T)) (n : nat) (lf3 : list (prod nat T)), forall _ : not (@eq nat n x1),
@eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l))
  (@update_helper T x1 v lf3).
Lemma conj16: forall {T} (v : T) (x1 : nat) (t0 : T) (l : list (prod nat T)) (n : nat) (lf3 : list (prod nat T)), @eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l))
  (@update_helper T x1 v lf3).
Lemma conj25: forall {T} (lf2 : list (prod nat T)) (lf5 : prod nat T) (v : T) (x1 : nat) (l : list (prod nat T)), @eq (list (prod nat T)) lf2
  (@update_helper T x1 v (@cons (prod nat T) lf5 l)).
Lemma conj26: forall {T} (lf5 : prod nat T) (v : T) (lf4 : list (prod nat T)) (x1 : nat) (l : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4)
  (@update_helper T x1 v (@cons (prod nat T) lf5 l)).
Lemma conj27_imp: forall {T} (lf2 : list (prod nat T)) (v : T) (t0 : T) (x1 : nat) (l : list (prod nat T)) (n : nat), forall _ : not (@eq nat n x1),
@eq (list (prod nat T)) lf2
  (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l)).
Lemma conj27: forall {T} (lf2 : list (prod nat T)) (v : T) (t0 : T) (x1 : nat) (l : list (prod nat T)) (n : nat), @eq (list (prod nat T)) lf2
  (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l)).
Lemma conj28: forall {T} (v : T) (lf4 : list (prod nat T)) (t0 : T) (x1 : nat) (l : list (prod nat T)) (n : nat), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)
  (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l)).
Lemma conj30: forall {T} (lf5 : prod nat T) (v : T) (x1 : nat) (l : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) lf5 (@update_helper T x1 v l))
  (@update_helper T x1 v (@cons (prod nat T) lf5 l)).
Lemma conj32: forall {T} (v : T) (t0 : T) (x1 : nat) (l : list (prod nat T)) (n : nat), @eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l))
  (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l)).


<---CREATE SKETCHES--->
Time elapsed: 97 seconds
Sketches:
Sketch conj2_sketch0 : @eq (list (prod nat T)) (##hole##) lf1
Sketch conj2_term_sketch0 : @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4) (##hole##)
Sketch conj4_sketch0 : @eq (list (prod nat T)) (##hole##) lf1
Sketch conj4_sketch1 : @eq (list (prod nat T)) (@cons (prod nat T) (##hole##) lf4) lf1
Sketch conj4_term_sketch0 : @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)
  (##hole##)
Sketch conj4_term_sketch1 : @eq (prod nat T) (@pair nat T n t0) (##hole##)
Sketch conj6_sketch0 : @eq (list (prod nat T)) (##hole##) lf1
Sketch conj6_sketch1 : @eq (list (prod nat T)) (@cons (prod nat T) lf5 (##hole##)) lf1
Sketch conj6_term_sketch0 : @eq (list (prod nat T)) (@cons (prod nat T) lf5 (@update_helper T x1 v l))
  (##hole##)
Sketch conj6_term_sketch1 : @eq (list (prod nat T)) (@update_helper T x1 v l) (##hole##)
Sketch conj8_imp_sketch0 : forall _ : not (@eq nat n x1), @eq (list (prod nat T)) (##hole##) lf1
Sketch conj8_imp_sketch1 : forall _ : not (@eq nat n x1),
@eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) (##hole##))
  lf1
Sketch conj8_imp_sketch2 : forall _ : not (@eq nat n x1),
@eq (list (prod nat T))
  (@cons (prod nat T) (##hole##) (@update_helper T x1 v l)) lf1
Sketch conj8_imp_term_sketch0 : @eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l))
  (##hole##)
Sketch conj8_imp_term_sketch1 : @eq (list (prod nat T)) (@update_helper T x1 v l) (##hole##)
Sketch conj8_imp_term_sketch2 : @eq (prod nat T) (@pair nat T n t0) (##hole##)
Sketch conj8_sketch0 : @eq (list (prod nat T)) (##hole##) lf1
Sketch conj8_sketch1 : @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) (##hole##))
  lf1
Sketch conj8_sketch2 : @eq (list (prod nat T))
  (@cons (prod nat T) (##hole##) (@update_helper T x1 v l)) lf1
Sketch conj8_term_sketch0 : @eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l))
  (##hole##)
Sketch conj8_term_sketch1 : @eq (list (prod nat T)) (@update_helper T x1 v l) (##hole##)
Sketch conj8_term_sketch2 : @eq (prod nat T) (@pair nat T n t0) (##hole##)
Sketch conj9_sketch0 : @eq (list (prod nat T)) lf2 (##hole##)
Sketch conj9_term_sketch0 : @eq (list (prod nat T)) (@update_helper T x1 v lf3) (##hole##)
Sketch conj10_sketch0 : @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4) (##hole##)
Sketch conj10_sketch1 : @eq (list (prod nat T)) (##hole##) (@update_helper T x1 v lf3)
Sketch conj10_term_sketch0 : @eq (list (prod nat T)) (@update_helper T x1 v lf3) (##hole##)
Sketch conj10_term_sketch1 : @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4) (##hole##)
Sketch conj12_sketch0 : @eq (list (prod nat T)) (##hole##) (@update_helper T x1 v lf3)
Sketch conj12_sketch1 : @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)
  (##hole##)
Sketch conj12_sketch2 : @eq (list (prod nat T)) (@cons (prod nat T) (##hole##) lf4)
  (@update_helper T x1 v lf3)
Sketch conj12_term_sketch0 : @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)
  (##hole##)
Sketch conj12_term_sketch1 : @eq (list (prod nat T)) (@update_helper T x1 v lf3) (##hole##)
Sketch conj12_term_sketch2 : @eq (prod nat T) (@pair nat T n t0) (##hole##)
Sketch conj14_sketch0 : @eq (list (prod nat T)) (@cons (prod nat T) lf5 (@update_helper T x1 v l))
  (##hole##)
Sketch conj14_sketch1 : @eq (list (prod nat T)) (##hole##) (@update_helper T x1 v lf3)
Sketch conj14_sketch2 : @eq (list (prod nat T)) (@cons (prod nat T) lf5 (##hole##))
  (@update_helper T x1 v lf3)
Sketch conj14_term_sketch0 : @eq (list (prod nat T)) (@update_helper T x1 v lf3) (##hole##)
Sketch conj14_term_sketch1 : @eq (list (prod nat T)) (@cons (prod nat T) lf5 (@update_helper T x1 v l))
  (##hole##)
Sketch conj14_term_sketch2 : @eq (list (prod nat T)) (@update_helper T x1 v l) (##hole##)
Sketch conj16_imp_sketch3 : forall _ : not (@eq nat n x1),
@eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l))
  (##hole##)
Sketch conj16_imp_sketch0 : forall _ : not (@eq nat n x1),
@eq (list (prod nat T)) (##hole##) (@update_helper T x1 v lf3)
Sketch conj16_imp_sketch1 : forall _ : not (@eq nat n x1),
@eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) (##hole##))
  (@update_helper T x1 v lf3)
Sketch conj16_imp_sketch2 : forall _ : not (@eq nat n x1),
@eq (list (prod nat T))
  (@cons (prod nat T) (##hole##) (@update_helper T x1 v l))
  (@update_helper T x1 v lf3)
Sketch conj16_imp_term_sketch3 : @eq (list (prod nat T)) (@update_helper T x1 v lf3) (##hole##)
Sketch conj16_imp_term_sketch0 : @eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l))
  (##hole##)
Sketch conj16_imp_term_sketch1 : @eq (list (prod nat T)) (@update_helper T x1 v l) (##hole##)
Sketch conj16_imp_term_sketch2 : @eq (prod nat T) (@pair nat T n t0) (##hole##)
Sketch conj16_sketch0 : @eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l))
  (##hole##)
Sketch conj16_sketch1 : @eq (list (prod nat T)) (##hole##) (@update_helper T x1 v lf3)
Sketch conj16_sketch2 : @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) (##hole##))
  (@update_helper T x1 v lf3)
Sketch conj16_sketch3 : @eq (list (prod nat T))
  (@cons (prod nat T) (##hole##) (@update_helper T x1 v l))
  (@update_helper T x1 v lf3)
Sketch conj16_term_sketch0 : @eq (list (prod nat T)) (@update_helper T x1 v lf3) (##hole##)
Sketch conj16_term_sketch1 : @eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l))
  (##hole##)
Sketch conj16_term_sketch2 : @eq (list (prod nat T)) (@update_helper T x1 v l) (##hole##)
Sketch conj16_term_sketch3 : @eq (prod nat T) (@pair nat T n t0) (##hole##)
Sketch conj25_sketch0 : @eq (list (prod nat T)) lf2 (@update_helper T x1 v (##hole##))
Sketch conj25_sketch1 : @eq (list (prod nat T)) lf2 (##hole##)
Sketch conj25_term_sketch0 : @eq (list (prod nat T)) (@cons (prod nat T) lf5 l) (##hole##)
Sketch conj25_term_sketch1 : @eq (list (prod nat T)) (@update_helper T x1 v (@cons (prod nat T) lf5 l))
  (##hole##)
Sketch conj26_sketch0 : @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4)
  (@update_helper T x1 v (##hole##))
Sketch conj26_sketch1 : @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4) (##hole##)
Sketch conj26_sketch2 : @eq (list (prod nat T)) (##hole##)
  (@update_helper T x1 v (@cons (prod nat T) lf5 l))
Sketch conj26_term_sketch0 : @eq (list (prod nat T)) (@cons (prod nat T) lf5 l) (##hole##)
Sketch conj26_term_sketch1 : @eq (list (prod nat T)) (@update_helper T x1 v (@cons (prod nat T) lf5 l))
  (##hole##)
Sketch conj26_term_sketch2 : @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4) (##hole##)
Sketch conj27_imp_sketch0 : forall _ : not (@eq nat n x1), @eq (list (prod nat T)) lf2 (##hole##)
Sketch conj27_imp_sketch1 : forall _ : not (@eq nat n x1),
@eq (list (prod nat T)) lf2 (@update_helper T x1 v (##hole##))
Sketch conj27_imp_sketch2 : forall _ : not (@eq nat n x1),
@eq (list (prod nat T)) lf2
  (@update_helper T x1 v (@cons (prod nat T) (##hole##) l))
Sketch conj27_imp_term_sketch0 : @eq (list (prod nat T))
  (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l))
  (##hole##)
Sketch conj27_imp_term_sketch1 : @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) l) (##hole##)
Sketch conj27_imp_term_sketch2 : @eq (prod nat T) (@pair nat T n t0) (##hole##)
Sketch conj27_sketch0 : @eq (list (prod nat T)) lf2 (##hole##)
Sketch conj27_sketch1 : @eq (list (prod nat T)) lf2 (@update_helper T x1 v (##hole##))
Sketch conj27_sketch2 : @eq (list (prod nat T)) lf2
  (@update_helper T x1 v (@cons (prod nat T) (##hole##) l))
Sketch conj27_term_sketch0 : @eq (list (prod nat T))
  (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l))
  (##hole##)
Sketch conj27_term_sketch1 : @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) l) (##hole##)
Sketch conj27_term_sketch2 : @eq (prod nat T) (@pair nat T n t0) (##hole##)
Sketch conj28_sketch0 : @eq (list (prod nat T)) (##hole##)
  (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l))
Sketch conj28_sketch1 : @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)
  (##hole##)
Sketch conj28_sketch2 : @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)
  (@update_helper T x1 v (##hole##))
Sketch conj28_sketch3 : @eq (list (prod nat T)) (@cons (prod nat T) (##hole##) lf4)
  (@update_helper T x1 v (@cons (prod nat T) (##hole##) l))
Sketch conj28_term_sketch0 : @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)
  (##hole##)
Sketch conj28_term_sketch1 : @eq (list (prod nat T))
  (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l))
  (##hole##)
Sketch conj28_term_sketch2 : @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) l) (##hole##)
Sketch conj28_term_sketch3 : @eq (prod nat T) (@pair nat T n t0) (##hole##)
Sketch conj30_sketch0 : @eq (list (prod nat T)) (@cons (prod nat T) lf5 (@update_helper T x1 v l))
  (@update_helper T x1 v (##hole##))
Sketch conj30_sketch1 : @eq (list (prod nat T)) (##hole##)
  (@update_helper T x1 v (@cons (prod nat T) lf5 l))
Sketch conj30_sketch2 : @eq (list (prod nat T)) (@cons (prod nat T) lf5 (@update_helper T x1 v l))
  (##hole##)
Sketch conj30_sketch3 : @eq (list (prod nat T)) (@cons (prod nat T) lf5 (##hole##))
  (@update_helper T x1 v (@cons (prod nat T) lf5 l))
Sketch conj30_term_sketch0 : @eq (list (prod nat T)) (@cons (prod nat T) lf5 l) (##hole##)
Sketch conj30_term_sketch1 : @eq (list (prod nat T)) (@cons (prod nat T) lf5 (@update_helper T x1 v l))
  (##hole##)
Sketch conj30_term_sketch2 : @eq (list (prod nat T)) (@update_helper T x1 v (@cons (prod nat T) lf5 l))
  (##hole##)
Sketch conj30_term_sketch3 : @eq (list (prod nat T)) (@update_helper T x1 v l) (##hole##)
Sketch conj32_sketch0 : @eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l))
  (##hole##)
Sketch conj32_sketch1 : @eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l))
  (@update_helper T x1 v (##hole##))
Sketch conj32_sketch2 : @eq (list (prod nat T)) (##hole##)
  (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l))
Sketch conj32_sketch3 : @eq (list (prod nat T))
  (@cons (prod nat T) (##hole##) (@update_helper T x1 v l))
  (@update_helper T x1 v (@cons (prod nat T) (##hole##) l))
Sketch conj32_sketch4 : @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) (##hole##))
  (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l))
Sketch conj32_term_sketch0 : @eq (list (prod nat T))
  (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l))
  (##hole##)
Sketch conj32_term_sketch1 : @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) l) (##hole##)
Sketch conj32_term_sketch2 : @eq (list (prod nat T))
  (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l))
  (##hole##)
Sketch conj32_term_sketch3 : @eq (prod nat T) (@pair nat T n t0) (##hole##)
Sketch conj32_term_sketch4 : @eq (list (prod nat T)) (@update_helper T x1 v l) (##hole##)


<---CREATE SYNTHESIS PROBLEMS--->
Time elapsed: 157 seconds
Problems per Sketch:
Sketch conj32_term_sketch4 --> Problem  synth_8
Sketch conj30_sketch0 --> Problem  synth_21
Sketch conj16_imp_sketch3 --> Problem  synth_23
Sketch conj12_sketch0 --> Problem  synth_18
Sketch conj28_sketch0 --> Problem  synth_38
Sketch conj16_sketch3 --> Problem  synth_29
Sketch conj26_sketch2 --> Problem  synth_7
Sketch conj25_sketch1 --> Problem  synth_15
Sketch conj16_term_sketch1 --> Problem  synth_12
Sketch conj14_term_sketch2 --> Problem  synth_8
Sketch conj8_sketch1 --> Problem  synth_13
Sketch conj4_sketch0 --> Problem  synth_1
Sketch conj6_term_sketch0 --> Problem  synth_7
Sketch conj30_term_sketch3 --> Problem  synth_8
Sketch conj8_term_sketch0 --> Problem  synth_12
Sketch conj28_term_sketch1 --> Problem  synth_23
Sketch conj26_term_sketch2 --> Problem  synth_2
Sketch conj16_imp_term_sketch0 --> Problem  synth_12
Sketch conj14_term_sketch1 --> Problem  synth_7
Sketch conj8_imp_term_sketch2 --> Problem  synth_5
Sketch conj12_term_sketch0 --> Problem  synth_4
Sketch conj8_term_sketch1 --> Problem  synth_8
Sketch conj32_sketch0 --> Problem  synth_27
Sketch conj30_sketch2 --> Problem  synth_21
Sketch conj16_imp_term_sketch1 --> Problem  synth_8
Sketch conj8_imp_sketch1 --> Problem  synth_10
Sketch conj10_sketch1 --> Problem  synth_18
Sketch conj8_imp_term_sketch1 --> Problem  synth_8
Sketch conj9_term_sketch0 --> Problem  synth_16
Sketch conj2_sketch0 --> Problem  synth_1
Sketch conj28_term_sketch3 --> Problem  synth_5
Sketch conj16_sketch1 --> Problem  synth_18
Sketch conj12_sketch1 --> Problem  synth_19
Sketch conj27_term_sketch2 --> Problem  synth_5
Sketch conj12_sketch2 --> Problem  synth_20
Sketch conj32_sketch3 --> Problem  synth_41
Sketch conj32_term_sketch3 --> Problem  synth_5
Sketch conj28_sketch2 --> Problem  synth_39
Sketch conj26_term_sketch0 --> Problem  synth_31
Sketch conj16_term_sketch2 --> Problem  synth_8
Sketch conj30_term_sketch1 --> Problem  synth_7
Sketch conj27_imp_sketch0 --> Problem  synth_33
Sketch conj16_imp_term_sketch3 --> Problem  synth_16
Sketch conj16_imp_term_sketch2 --> Problem  synth_5
Sketch conj27_sketch2 --> Problem  synth_37
Sketch conj28_term_sketch2 --> Problem  synth_36
Sketch conj4_term_sketch1 --> Problem  synth_5
Sketch conj27_sketch1 --> Problem  synth_30
Sketch conj30_term_sketch0 --> Problem  synth_31
Sketch conj8_sketch0 --> Problem  synth_1
Sketch conj32_term_sketch2 --> Problem  synth_12
Sketch conj12_term_sketch2 --> Problem  synth_5
Sketch conj10_sketch0 --> Problem  synth_17
Sketch conj8_term_sketch2 --> Problem  synth_5
Sketch conj32_sketch2 --> Problem  synth_38
Sketch conj14_sketch1 --> Problem  synth_18
Sketch conj32_sketch1 --> Problem  synth_27
Sketch conj26_term_sketch1 --> Problem  synth_21
Sketch conj14_sketch2 --> Problem  synth_22
Sketch conj27_term_sketch1 --> Problem  synth_36
Sketch conj16_sketch2 --> Problem  synth_28
Sketch conj10_term_sketch1 --> Problem  synth_2
Sketch conj30_sketch3 --> Problem  synth_21
Sketch conj25_term_sketch1 --> Problem  synth_21
Sketch conj30_sketch1 --> Problem  synth_7
Sketch conj26_sketch0 --> Problem  synth_32
Sketch conj8_imp_sketch0 --> Problem  synth_9
Sketch conj2_term_sketch0 --> Problem  synth_2
Sketch conj27_imp_term_sketch0 --> Problem  synth_23
Sketch conj16_imp_sketch0 --> Problem  synth_24
Sketch conj12_term_sketch1 --> Problem  synth_16
Sketch conj9_sketch0 --> Problem  synth_15
Sketch conj8_sketch2 --> Problem  synth_14
Sketch conj26_sketch1 --> Problem  synth_17
Sketch conj28_term_sketch0 --> Problem  synth_4
Sketch conj4_term_sketch0 --> Problem  synth_4
Sketch conj6_sketch0 --> Problem  synth_1
Sketch conj16_imp_sketch1 --> Problem  synth_25
Sketch conj27_sketch0 --> Problem  synth_15
Sketch conj32_term_sketch0 --> Problem  synth_23
Sketch conj6_sketch1 --> Problem  synth_6
Sketch conj30_term_sketch2 --> Problem  synth_21
Sketch conj10_term_sketch0 --> Problem  synth_16
Sketch conj16_imp_sketch2 --> Problem  synth_26
Sketch conj28_sketch3 --> Problem  synth_40
Sketch conj27_imp_term_sketch2 --> Problem  synth_5
Sketch conj25_sketch0 --> Problem  synth_30
Sketch conj28_sketch1 --> Problem  synth_19
Sketch conj32_sketch4 --> Problem  synth_27
Sketch conj27_imp_sketch1 --> Problem  synth_34
Sketch conj32_term_sketch1 --> Problem  synth_36
Sketch conj27_imp_term_sketch1 --> Problem  synth_36
Sketch conj6_term_sketch1 --> Problem  synth_8
Sketch conj8_imp_term_sketch0 --> Problem  synth_12
Sketch conj4_sketch1 --> Problem  synth_3
Sketch conj27_imp_sketch2 --> Problem  synth_35
Sketch conj16_sketch0 --> Problem  synth_27
Sketch conj14_sketch0 --> Problem  synth_21
Sketch conj14_term_sketch0 --> Problem  synth_16
Sketch conj16_term_sketch0 --> Problem  synth_16
Sketch conj8_imp_sketch2 --> Problem  synth_11
Sketch conj16_term_sketch3 --> Problem  synth_5
Sketch conj27_term_sketch0 --> Problem  synth_23
Sketch conj25_term_sketch0 --> Problem  synth_31


<--- SYNTHESIS PROBLEM RESULTS--->
Time elapsed: 337 seconds

Problem: synth_28
 @cons (prod nat T) (@pair nat T x1 t0) (@nil (prod nat T))
 @cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T))
 @cons (prod nat T) (@pair nat T n v) (@nil (prod nat T))
 @cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))
 @cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))
 lf3

Problem: synth_17
 @cons (prod nat T) lf5 (@nil (prod nat T))
 lf4

Problem: synth_29

Problem: synth_26

Problem: synth_9

Problem: synth_30
 @update_helper T O v (if match x1 with | O => true | S _ => false end then @cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))))
 if Nat.eqb x1 x1 then @cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T x1 v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)))
 if Nat.eqb x1 O then @cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T x1 v) (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)))
 if match x1 with | O => true | S _ => false end then @cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)))
 @cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))
 @cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))

Problem: synth_11

Problem: synth_39
 @cons (prod nat T) (@pair nat T x1 t0) (@nil (prod nat T))
 @cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T))
 @cons (prod nat T) (@pair nat T n v) (@nil (prod nat T))
 @cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))
 @cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))
 lf4

Problem: synth_1

Problem: synth_15

Problem: synth_31

Problem: synth_14

Problem: synth_8

Problem: synth_34
 if Nat.eqb x1 O then @cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T x1 v) (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)))
 if match n with | O => true | S _ => false end then @cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T n v) (@nil (prod nat T)))
 if match x1 with | O => true | S _ => false end then @cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)))
 @cons (prod nat T) (@pair nat T n v) (@nil (prod nat T))
 @cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))
 @cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))

Problem: synth_12

Problem: synth_5
 @pair nat T n t0
 @pair nat T O t0

Problem: synth_37

Problem: synth_2
 @cons (prod nat T) lf5 (@cons (prod nat T) lf5 (@nil (prod nat T)))
 @cons (prod nat T) lf5 lf4

Problem: synth_22
 @update_helper T x1 v lf3
 @update_helper T O v lf3
 @cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))
 @cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))
 @cons (prod nat T) lf5 (@nil (prod nat T))
 lf3

Problem: synth_20
 @pair nat T x1 v
 @pair nat T O v

Problem: synth_18
 @cons (prod nat T) (@pair nat T x1 v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)))
 @cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)))
 @cons (prod nat T) (@pair nat T x1 v) (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)))
 @cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)))
 @cons (prod nat T) (@pair nat T x1 v) lf3
 @cons (prod nat T) (@pair nat T O v) lf3

Problem: synth_21

Problem: synth_41

Problem: synth_25
 @cons (prod nat T) (@pair nat T x1 t0) (@nil (prod nat T))
 @cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T))
 @cons (prod nat T) (@pair nat T n v) (@nil (prod nat T))
 @cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))
 @cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))
 lf3

Problem: synth_13
 if match n with | O => true | S _ => false end then @cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T O t0) (@cons (prod nat T) (@pair nat T n t0) (@nil (prod nat T)))
 @update_helper T n t0 lf1
 @update_helper T O t0 lf1
 @cons (prod nat T) (@pair nat T n t0) (@nil (prod nat T))
 @cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T))
 lf1

Problem: synth_6
 @cons (prod nat T) lf5 (@nil (prod nat T))
 lf1

Problem: synth_7

Problem: synth_4
 @cons (prod nat T) (@pair nat T n t0) (@cons (prod nat T) (@pair nat T n t0) (@nil (prod nat T)))
 @cons (prod nat T) (@pair nat T O t0) (@cons (prod nat T) (@pair nat T n t0) (@nil (prod nat T)))
 @cons (prod nat T) (@pair nat T n t0) (@cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T)))
 @cons (prod nat T) (@pair nat T O t0) (@cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T)))
 @cons (prod nat T) (@pair nat T n t0) lf4
 @cons (prod nat T) (@pair nat T O t0) lf4

Problem: synth_38

Problem: synth_23

Problem: synth_27

Problem: synth_16
 if match x1 with | O => true | S _ => false end then @cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)))
 @update_helper T x1 v lf3
 @update_helper T O v lf3
 @cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))
 @cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))
 lf3

Problem: synth_19
 if match n with | O => true | S _ => false end then @cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T O t0) (@cons (prod nat T) (@pair nat T n t0) (@nil (prod nat T)))
 @update_helper T n t0 lf4
 @update_helper T O t0 lf4
 @cons (prod nat T) (@pair nat T n t0) (@nil (prod nat T))
 @cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T))
 lf4

Problem: synth_40

Problem: synth_10
 @update_helper T x1 t0 lf1
 @update_helper T O t0 lf1
 @cons (prod nat T) (@pair nat T n t0) (@nil (prod nat T))
 @cons (prod nat T) (@pair nat T x1 t0) (@nil (prod nat T))
 @cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T))
 lf1

Problem: synth_33

Problem: synth_24
 @cons (prod nat T) (@pair nat T n v) (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)))
 @cons (prod nat T) (@pair nat T x1 v) (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)))
 @cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)))
 @cons (prod nat T) (@pair nat T n v) lf3
 @cons (prod nat T) (@pair nat T x1 v) lf3
 @cons (prod nat T) (@pair nat T O v) lf3

Problem: synth_3

Problem: synth_32
 @update_helper T x1 v lf4
 @update_helper T O v lf4
 @cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))
 @cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))
 @cons (prod nat T) lf5 (@nil (prod nat T))
 lf4

Problem: synth_36

Problem: synth_35

<---INITIAL CANDIDATE LEMMAS--->
Time elapsed: 337 seconds
Lemmas:
Lemma candidate_1: forall {T} (n : nat) (l : list (prod nat T)) (x1 : nat) (t0 : T) (v : T), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l))   (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l))).
Lemma candidate_2: forall {T} (lf4 : list (prod nat T)) (lf5 : prod nat T), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4)   (@cons (prod nat T) lf5 (@cons (prod nat T) lf5 (@nil (prod nat T)))).
Lemma candidate_3: forall {T} (lf4 : list (prod nat T)) (lf5 : prod nat T), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4)   (@cons (prod nat T) lf5 lf4).
Lemma candidate_4: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@cons (prod nat T) (@pair nat T n t0) (@cons (prod nat T) (@pair nat T n t0) (@nil (prod nat T)))).
Lemma candidate_5: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@cons (prod nat T) (@pair nat T O t0) (@cons (prod nat T) (@pair nat T n t0) (@nil (prod nat T)))).
Lemma candidate_6: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@cons (prod nat T) (@pair nat T n t0) (@cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T)))).
Lemma candidate_7: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@cons (prod nat T) (@pair nat T O t0) (@cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T)))).
Lemma candidate_8: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@cons (prod nat T) (@pair nat T n t0) lf4).
Lemma candidate_9: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@cons (prod nat T) (@pair nat T O t0) lf4).
Lemma candidate_10: forall {T} (n : nat) (t0 : T), @eq (prod nat T) (@pair nat T n t0) (@pair nat T n t0).
Lemma candidate_11: forall {T} (n : nat) (t0 : T), @eq (prod nat T) (@pair nat T n t0) (@pair nat T O t0).
Lemma candidate_12: forall {T} (lf1 : list (prod nat T)) (lf5 : prod nat T), @eq (list (prod nat T))   (@cons (prod nat T) lf5 (@cons (prod nat T) lf5 (@nil (prod nat T)))) lf1.
Lemma candidate_13: forall {T} (lf1 : list (prod nat T)) (lf5 : prod nat T), @eq (list (prod nat T)) (@cons (prod nat T) lf5 (lf1)) lf1.
Lemma candidate_14: forall {T} (n : nat) (lf1 : list (prod nat T)) (t0 : T) (x1 : nat), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 t0 lf1)) lf1).
Lemma candidate_15: forall {T} (n : nat) (lf1 : list (prod nat T)) (t0 : T) (x1 : nat), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T n t0) (@update_helper T O t0 lf1)) lf1).
Lemma candidate_16: forall {T} (n : nat) (lf1 : list (prod nat T)) (t0 : T) (x1 : nat), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T n t0)      (@cons (prod nat T) (@pair nat T n t0) (@nil (prod nat T)))) lf1).
Lemma candidate_17: forall {T} (n : nat) (lf1 : list (prod nat T)) (t0 : T) (x1 : nat), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T n t0)      (@cons (prod nat T) (@pair nat T x1 t0) (@nil (prod nat T)))) lf1).
Lemma candidate_18: forall {T} (n : nat) (lf1 : list (prod nat T)) (t0 : T) (x1 : nat), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T n t0)      (@cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T)))) lf1).
Lemma candidate_19: forall {T} (n : nat) (lf1 : list (prod nat T)) (t0 : T) (x1 : nat), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) (lf1)) lf1).
Lemma candidate_20: forall {T} (n : nat) (t0 : T), @eq (prod nat T) (@pair nat T n t0) (@pair nat T n t0).
Lemma candidate_21: forall {T} (n : nat) (t0 : T), @eq (prod nat T) (@pair nat T n t0) (@pair nat T O t0).
Lemma candidate_22: forall {T} (n : nat) (lf1 : list (prod nat T)) (t0 : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T n t0)      (if match n with | O => true | S _ => false end then @cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T O t0) (@cons (prod nat T) (@pair nat T n t0) (@nil (prod nat T)))))   lf1.
Lemma candidate_23: forall {T} (n : nat) (lf1 : list (prod nat T)) (t0 : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T n t0) (@update_helper T n t0 lf1)) lf1.
Lemma candidate_24: forall {T} (n : nat) (lf1 : list (prod nat T)) (t0 : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T n t0) (@update_helper T O t0 lf1)) lf1.
Lemma candidate_25: forall {T} (n : nat) (lf1 : list (prod nat T)) (t0 : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T n t0)      (@cons (prod nat T) (@pair nat T n t0) (@nil (prod nat T)))) lf1.
Lemma candidate_26: forall {T} (n : nat) (lf1 : list (prod nat T)) (t0 : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T n t0)      (@cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T)))) lf1.
Lemma candidate_27: forall {T} (n : nat) (lf1 : list (prod nat T)) (t0 : T), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) (lf1)) lf1.
Lemma candidate_28: forall {T} (n : nat) (t0 : T), @eq (prod nat T) (@pair nat T n t0) (@pair nat T n t0).
Lemma candidate_29: forall {T} (n : nat) (t0 : T), @eq (prod nat T) (@pair nat T n t0) (@pair nat T O t0).
Lemma candidate_30: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (if match x1 with | O => true | S _ => false end then @cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)))).
Lemma candidate_31: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (@update_helper T x1 v lf3).
Lemma candidate_32: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (@update_helper T O v lf3).
Lemma candidate_33: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))).
Lemma candidate_34: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))).
Lemma candidate_35: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3) (lf3).
Lemma candidate_36: forall {T} (lf4 : list (prod nat T)) (lf5 : prod nat T), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4)   (@cons (prod nat T) lf5 (@nil (prod nat T))).
Lemma candidate_37: forall {T} (lf4 : list (prod nat T)) (lf5 : prod nat T), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4) (lf4).
Lemma candidate_38: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T x1 v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))))   (@update_helper T x1 v lf3).
Lemma candidate_39: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))))   (@update_helper T x1 v lf3).
Lemma candidate_40: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T x1 v) (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))))   (@update_helper T x1 v lf3).
Lemma candidate_41: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))))   (@update_helper T x1 v lf3).
Lemma candidate_42: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T x1 v) lf3)   (@update_helper T x1 v lf3).
Lemma candidate_43: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T O v) lf3)   (@update_helper T x1 v lf3).
Lemma candidate_44: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (if match x1 with | O => true | S _ => false end then @cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)))).
Lemma candidate_45: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (@update_helper T x1 v lf3).
Lemma candidate_46: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (@update_helper T O v lf3).
Lemma candidate_47: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))).
Lemma candidate_48: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))).
Lemma candidate_49: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3) (lf3).
Lemma candidate_50: forall {T} (lf4 : list (prod nat T)) (lf5 : prod nat T), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4)   (@cons (prod nat T) lf5 (@cons (prod nat T) lf5 (@nil (prod nat T)))).
Lemma candidate_51: forall {T} (lf4 : list (prod nat T)) (lf5 : prod nat T), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4)   (@cons (prod nat T) lf5 lf4).
Lemma candidate_52: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T x1 v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))))   (@update_helper T x1 v lf3).
Lemma candidate_53: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))))   (@update_helper T x1 v lf3).
Lemma candidate_54: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T x1 v) (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))))   (@update_helper T x1 v lf3).
Lemma candidate_55: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))))   (@update_helper T x1 v lf3).
Lemma candidate_56: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T x1 v) lf3)   (@update_helper T x1 v lf3).
Lemma candidate_57: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T O v) lf3)   (@update_helper T x1 v lf3).
Lemma candidate_58: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (if match n with | O => true | S _ => false end then @cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T O t0) (@cons (prod nat T) (@pair nat T n t0) (@nil (prod nat T)))).
Lemma candidate_59: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@update_helper T n t0 lf4).
Lemma candidate_60: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@update_helper T O t0 lf4).
Lemma candidate_61: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@cons (prod nat T) (@pair nat T n t0) (@nil (prod nat T))).
Lemma candidate_62: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T))).
Lemma candidate_63: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4) (lf4).
Lemma candidate_64: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (lf4 : list (prod nat T)) (v : T), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T x1 v) lf4)   (@update_helper T x1 v lf3).
Lemma candidate_65: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (lf4 : list (prod nat T)) (v : T), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T O v) lf4)   (@update_helper T x1 v lf3).
Lemma candidate_66: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@cons (prod nat T) (@pair nat T n t0) (@cons (prod nat T) (@pair nat T n t0) (@nil (prod nat T)))).
Lemma candidate_67: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@cons (prod nat T) (@pair nat T O t0) (@cons (prod nat T) (@pair nat T n t0) (@nil (prod nat T)))).
Lemma candidate_68: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@cons (prod nat T) (@pair nat T n t0) (@cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T)))).
Lemma candidate_69: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@cons (prod nat T) (@pair nat T O t0) (@cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T)))).
Lemma candidate_70: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@cons (prod nat T) (@pair nat T n t0) lf4).
Lemma candidate_71: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@cons (prod nat T) (@pair nat T O t0) lf4).
Lemma candidate_72: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (if match x1 with | O => true | S _ => false end then @cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)))).
Lemma candidate_73: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (@update_helper T x1 v lf3).
Lemma candidate_74: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (@update_helper T O v lf3).
Lemma candidate_75: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))).
Lemma candidate_76: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))).
Lemma candidate_77: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3) (lf3).
Lemma candidate_78: forall {T} (n : nat) (t0 : T), @eq (prod nat T) (@pair nat T n t0) (@pair nat T n t0).
Lemma candidate_79: forall {T} (n : nat) (t0 : T), @eq (prod nat T) (@pair nat T n t0) (@pair nat T O t0).
Lemma candidate_80: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T x1 v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))))   (@update_helper T x1 v lf3).
Lemma candidate_81: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))))   (@update_helper T x1 v lf3).
Lemma candidate_82: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T x1 v) (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))))   (@update_helper T x1 v lf3).
Lemma candidate_83: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))))   (@update_helper T x1 v lf3).
Lemma candidate_84: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T x1 v) lf3)   (@update_helper T x1 v lf3).
Lemma candidate_85: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T O v) lf3)   (@update_helper T x1 v lf3).
Lemma candidate_86: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T) (lf5 : prod nat T), @eq (list (prod nat T)) (@cons (prod nat T) lf5 (@update_helper T x1 v lf3))   (@update_helper T x1 v lf3).
Lemma candidate_87: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T) (lf5 : prod nat T), @eq (list (prod nat T)) (@cons (prod nat T) lf5 (@update_helper T O v lf3))   (@update_helper T x1 v lf3).
Lemma candidate_88: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T) (lf5 : prod nat T), @eq (list (prod nat T))   (@cons (prod nat T) lf5      (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))))   (@update_helper T x1 v lf3).
Lemma candidate_89: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T) (lf5 : prod nat T), @eq (list (prod nat T))   (@cons (prod nat T) lf5      (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))))   (@update_helper T x1 v lf3).
Lemma candidate_90: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T) (lf5 : prod nat T), @eq (list (prod nat T))   (@cons (prod nat T) lf5 (@cons (prod nat T) lf5 (@nil (prod nat T))))   (@update_helper T x1 v lf3).
Lemma candidate_91: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T) (lf5 : prod nat T), @eq (list (prod nat T)) (@cons (prod nat T) lf5 (lf3))   (@update_helper T x1 v lf3).
Lemma candidate_92: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (if match x1 with | O => true | S _ => false end then @cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)))).
Lemma candidate_93: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (@update_helper T x1 v lf3).
Lemma candidate_94: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (@update_helper T O v lf3).
Lemma candidate_95: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))).
Lemma candidate_96: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))).
Lemma candidate_97: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3) (lf3).
Lemma candidate_98: forall {T} (lf3 : list (prod nat T)) (n : nat) (x1 : nat) (v : T), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T n v) (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))))   (@update_helper T x1 v lf3)).
Lemma candidate_99: forall {T} (lf3 : list (prod nat T)) (n : nat) (x1 : nat) (v : T), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T x1 v) (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))))   (@update_helper T x1 v lf3)).
Lemma candidate_100: forall {T} (lf3 : list (prod nat T)) (n : nat) (x1 : nat) (v : T), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))))   (@update_helper T x1 v lf3)).
Lemma candidate_101: forall {T} (lf3 : list (prod nat T)) (n : nat) (x1 : nat) (v : T), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n v) lf3)   (@update_helper T x1 v lf3)).
Lemma candidate_102: forall {T} (lf3 : list (prod nat T)) (n : nat) (x1 : nat) (v : T), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T x1 v) lf3)   (@update_helper T x1 v lf3)).
Lemma candidate_103: forall {T} (lf3 : list (prod nat T)) (n : nat) (x1 : nat) (v : T), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T O v) lf3)   (@update_helper T x1 v lf3)).
Lemma candidate_104: forall {T} (lf3 : list (prod nat T)) (n : nat) (t0 : T) (x1 : nat) (v : T), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T n t0)      (@cons (prod nat T) (@pair nat T x1 t0) (@nil (prod nat T))))   (@update_helper T x1 v lf3)).
Lemma candidate_105: forall {T} (lf3 : list (prod nat T)) (n : nat) (t0 : T) (x1 : nat) (v : T), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T n t0)      (@cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T))))   (@update_helper T x1 v lf3)).
Lemma candidate_106: forall {T} (lf3 : list (prod nat T)) (n : nat) (t0 : T) (x1 : nat) (v : T), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T n t0)      (@cons (prod nat T) (@pair nat T n v) (@nil (prod nat T))))   (@update_helper T x1 v lf3)).
Lemma candidate_107: forall {T} (lf3 : list (prod nat T)) (n : nat) (t0 : T) (x1 : nat) (v : T), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T n t0)      (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))))   (@update_helper T x1 v lf3)).
Lemma candidate_108: forall {T} (lf3 : list (prod nat T)) (n : nat) (t0 : T) (x1 : nat) (v : T), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T n t0)      (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))))   (@update_helper T x1 v lf3)).
Lemma candidate_109: forall {T} (lf3 : list (prod nat T)) (n : nat) (t0 : T) (x1 : nat) (v : T), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) (lf3))   (@update_helper T x1 v lf3)).
Lemma candidate_110: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (if match x1 with | O => true | S _ => false end then @cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)))).
Lemma candidate_111: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (@update_helper T x1 v lf3).
Lemma candidate_112: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (@update_helper T O v lf3).
Lemma candidate_113: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))).
Lemma candidate_114: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))).
Lemma candidate_115: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3) (lf3).
Lemma candidate_116: forall {T} (n : nat) (t0 : T), @eq (prod nat T) (@pair nat T n t0) (@pair nat T n t0).
Lemma candidate_117: forall {T} (n : nat) (t0 : T), @eq (prod nat T) (@pair nat T n t0) (@pair nat T O t0).
Lemma candidate_118: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T x1 v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))))   (@update_helper T x1 v lf3).
Lemma candidate_119: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))))   (@update_helper T x1 v lf3).
Lemma candidate_120: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T x1 v) (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))))   (@update_helper T x1 v lf3).
Lemma candidate_121: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))))   (@update_helper T x1 v lf3).
Lemma candidate_122: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T x1 v) lf3)   (@update_helper T x1 v lf3).
Lemma candidate_123: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T O v) lf3)   (@update_helper T x1 v lf3).
Lemma candidate_124: forall {T} (lf3 : list (prod nat T)) (n : nat) (x1 : nat) (t0 : T) (v : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T n t0)      (@cons (prod nat T) (@pair nat T x1 t0) (@nil (prod nat T))))   (@update_helper T x1 v lf3).
Lemma candidate_125: forall {T} (lf3 : list (prod nat T)) (n : nat) (x1 : nat) (t0 : T) (v : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T n t0)      (@cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T))))   (@update_helper T x1 v lf3).
Lemma candidate_126: forall {T} (lf3 : list (prod nat T)) (n : nat) (x1 : nat) (t0 : T) (v : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T n t0)      (@cons (prod nat T) (@pair nat T n v) (@nil (prod nat T))))   (@update_helper T x1 v lf3).
Lemma candidate_127: forall {T} (lf3 : list (prod nat T)) (n : nat) (x1 : nat) (t0 : T) (v : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T n t0)      (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))))   (@update_helper T x1 v lf3).
Lemma candidate_128: forall {T} (lf3 : list (prod nat T)) (n : nat) (x1 : nat) (t0 : T) (v : T), @eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T n t0)      (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))))   (@update_helper T x1 v lf3).
Lemma candidate_129: forall {T} (lf3 : list (prod nat T)) (n : nat) (x1 : nat) (t0 : T) (v : T), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) (lf3))   (@update_helper T x1 v lf3).
Lemma candidate_130: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (if match x1 with | O => true | S _ => false end then @cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)))).
Lemma candidate_131: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (@update_helper T x1 v lf3).
Lemma candidate_132: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (@update_helper T O v lf3).
Lemma candidate_133: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))).
Lemma candidate_134: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3)   (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))).
Lemma candidate_135: forall {T} (lf3 : list (prod nat T)) (x1 : nat) (v : T), @eq (list (prod nat T)) (@update_helper T x1 v lf3) (lf3).
Lemma candidate_136: forall {T} (n : nat) (t0 : T), @eq (prod nat T) (@pair nat T n t0) (@pair nat T n t0).
Lemma candidate_137: forall {T} (n : nat) (t0 : T), @eq (prod nat T) (@pair nat T n t0) (@pair nat T O t0).
Lemma candidate_138: forall {T} (x1 : nat) (v : T) (lf2 : list (prod nat T)), @eq (list (prod nat T)) lf2   (@update_helper T x1 v      (@update_helper T O v (if match x1 with | O => true | S _ => false end then @cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)))))).
Lemma candidate_139: forall {T} (x1 : nat) (v : T) (lf2 : list (prod nat T)), @eq (list (prod nat T)) lf2   (@update_helper T x1 v      (if Nat.eqb x1 x1 then @cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T x1 v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))))).
Lemma candidate_140: forall {T} (x1 : nat) (v : T) (lf2 : list (prod nat T)), @eq (list (prod nat T)) lf2   (@update_helper T x1 v      (if Nat.eqb x1 O then @cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T x1 v) (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))))).
Lemma candidate_141: forall {T} (x1 : nat) (v : T) (lf2 : list (prod nat T)), @eq (list (prod nat T)) lf2   (@update_helper T x1 v      (if match x1 with | O => true | S _ => false end then @cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))))).
Lemma candidate_142: forall {T} (x1 : nat) (v : T) (lf2 : list (prod nat T)), @eq (list (prod nat T)) lf2   (@update_helper T x1 v      (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)))).
Lemma candidate_143: forall {T} (x1 : nat) (v : T) (lf2 : list (prod nat T)), @eq (list (prod nat T)) lf2   (@update_helper T x1 v      (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)))).
Lemma candidate_144: forall {T} (x1 : nat) (lf4 : list (prod nat T)) (v : T) (lf5 : prod nat T), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4)   (@update_helper T x1 v (@update_helper T x1 v lf4)).
Lemma candidate_145: forall {T} (x1 : nat) (lf4 : list (prod nat T)) (v : T) (lf5 : prod nat T), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4)   (@update_helper T x1 v (@update_helper T O v lf4)).
Lemma candidate_146: forall {T} (x1 : nat) (lf4 : list (prod nat T)) (v : T) (lf5 : prod nat T), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4)   (@update_helper T x1 v      (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)))).
Lemma candidate_147: forall {T} (x1 : nat) (lf4 : list (prod nat T)) (v : T) (lf5 : prod nat T), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4)   (@update_helper T x1 v      (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)))).
Lemma candidate_148: forall {T} (x1 : nat) (lf4 : list (prod nat T)) (v : T) (lf5 : prod nat T), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4)   (@update_helper T x1 v (@cons (prod nat T) lf5 (@nil (prod nat T)))).
Lemma candidate_149: forall {T} (x1 : nat) (lf4 : list (prod nat T)) (v : T) (lf5 : prod nat T), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4)   (@update_helper T x1 v (lf4)).
Lemma candidate_150: forall {T} (lf4 : list (prod nat T)) (lf5 : prod nat T), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4)   (@cons (prod nat T) lf5 (@nil (prod nat T))).
Lemma candidate_151: forall {T} (lf4 : list (prod nat T)) (lf5 : prod nat T), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4) (lf4).
Lemma candidate_152: forall {T} (lf4 : list (prod nat T)) (lf5 : prod nat T), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4)   (@cons (prod nat T) lf5 (@cons (prod nat T) lf5 (@nil (prod nat T)))).
Lemma candidate_153: forall {T} (lf4 : list (prod nat T)) (lf5 : prod nat T), @eq (list (prod nat T)) (@cons (prod nat T) lf5 lf4)   (@cons (prod nat T) lf5 lf4).
Lemma candidate_154: forall {T} (n : nat) (x1 : nat) (v : T) (lf2 : list (prod nat T)), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T)) lf2   (@update_helper T x1 v      (if Nat.eqb x1 O then @cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T x1 v) (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)))))).
Lemma candidate_155: forall {T} (n : nat) (x1 : nat) (v : T) (lf2 : list (prod nat T)), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T)) lf2   (@update_helper T x1 v      (if match n with | O => true | S _ => false end then @cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T n v) (@nil (prod nat T)))))).
Lemma candidate_156: forall {T} (n : nat) (x1 : nat) (v : T) (lf2 : list (prod nat T)), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T)) lf2   (@update_helper T x1 v      (if match x1 with | O => true | S _ => false end then @cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)))))).
Lemma candidate_157: forall {T} (n : nat) (x1 : nat) (v : T) (lf2 : list (prod nat T)), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T)) lf2   (@update_helper T x1 v      (@cons (prod nat T) (@pair nat T n v) (@nil (prod nat T))))).
Lemma candidate_158: forall {T} (n : nat) (x1 : nat) (v : T) (lf2 : list (prod nat T)), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T)) lf2   (@update_helper T x1 v      (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))))).
Lemma candidate_159: forall {T} (n : nat) (x1 : nat) (v : T) (lf2 : list (prod nat T)), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T)) lf2   (@update_helper T x1 v      (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))))).
Lemma candidate_160: forall {T} (n : nat) (t0 : T), @eq (prod nat T) (@pair nat T n t0) (@pair nat T n t0).
Lemma candidate_161: forall {T} (n : nat) (t0 : T), @eq (prod nat T) (@pair nat T n t0) (@pair nat T O t0).
Lemma candidate_162: forall {T} (x1 : nat) (v : T) (lf2 : list (prod nat T)), @eq (list (prod nat T)) lf2   (@update_helper T x1 v      (@update_helper T O v (if match x1 with | O => true | S _ => false end then @cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)))))).
Lemma candidate_163: forall {T} (x1 : nat) (v : T) (lf2 : list (prod nat T)), @eq (list (prod nat T)) lf2   (@update_helper T x1 v      (if Nat.eqb x1 x1 then @cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T x1 v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))))).
Lemma candidate_164: forall {T} (x1 : nat) (v : T) (lf2 : list (prod nat T)), @eq (list (prod nat T)) lf2   (@update_helper T x1 v      (if Nat.eqb x1 O then @cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T x1 v) (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T))))).
Lemma candidate_165: forall {T} (x1 : nat) (v : T) (lf2 : list (prod nat T)), @eq (list (prod nat T)) lf2   (@update_helper T x1 v      (if match x1 with | O => true | S _ => false end then @cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T O v) (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T))))).
Lemma candidate_166: forall {T} (x1 : nat) (v : T) (lf2 : list (prod nat T)), @eq (list (prod nat T)) lf2   (@update_helper T x1 v      (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)))).
Lemma candidate_167: forall {T} (x1 : nat) (v : T) (lf2 : list (prod nat T)), @eq (list (prod nat T)) lf2   (@update_helper T x1 v      (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)))).
Lemma candidate_168: forall {T} (n : nat) (t0 : T), @eq (prod nat T) (@pair nat T n t0) (@pair nat T n t0).
Lemma candidate_169: forall {T} (n : nat) (t0 : T), @eq (prod nat T) (@pair nat T n t0) (@pair nat T O t0).
Lemma candidate_170: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (if match n with | O => true | S _ => false end then @cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T)) else @cons (prod nat T) (@pair nat T O t0) (@cons (prod nat T) (@pair nat T n t0) (@nil (prod nat T)))).
Lemma candidate_171: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@update_helper T n t0 lf4).
Lemma candidate_172: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@update_helper T O t0 lf4).
Lemma candidate_173: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@cons (prod nat T) (@pair nat T n t0) (@nil (prod nat T))).
Lemma candidate_174: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T))).
Lemma candidate_175: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4) (lf4).
Lemma candidate_176: forall {T} (n : nat) (x1 : nat) (t0 : T) (lf4 : list (prod nat T)) (v : T), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@update_helper T x1 v      (@cons (prod nat T) (@pair nat T x1 t0) (@nil (prod nat T)))).
Lemma candidate_177: forall {T} (n : nat) (x1 : nat) (t0 : T) (lf4 : list (prod nat T)) (v : T), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@update_helper T x1 v      (@cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T)))).
Lemma candidate_178: forall {T} (n : nat) (x1 : nat) (t0 : T) (lf4 : list (prod nat T)) (v : T), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@update_helper T x1 v      (@cons (prod nat T) (@pair nat T n v) (@nil (prod nat T)))).
Lemma candidate_179: forall {T} (n : nat) (x1 : nat) (t0 : T) (lf4 : list (prod nat T)) (v : T), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@update_helper T x1 v      (@cons (prod nat T) (@pair nat T x1 v) (@nil (prod nat T)))).
Lemma candidate_180: forall {T} (n : nat) (x1 : nat) (t0 : T) (lf4 : list (prod nat T)) (v : T), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@update_helper T x1 v      (@cons (prod nat T) (@pair nat T O v) (@nil (prod nat T)))).
Lemma candidate_181: forall {T} (n : nat) (x1 : nat) (t0 : T) (lf4 : list (prod nat T)) (v : T), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@update_helper T x1 v (lf4)).
Lemma candidate_182: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@cons (prod nat T) (@pair nat T n t0) (@cons (prod nat T) (@pair nat T n t0) (@nil (prod nat T)))).
Lemma candidate_183: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@cons (prod nat T) (@pair nat T O t0) (@cons (prod nat T) (@pair nat T n t0) (@nil (prod nat T)))).
Lemma candidate_184: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@cons (prod nat T) (@pair nat T n t0) (@cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T)))).
Lemma candidate_185: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@cons (prod nat T) (@pair nat T O t0) (@cons (prod nat T) (@pair nat T O t0) (@nil (prod nat T)))).
Lemma candidate_186: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@cons (prod nat T) (@pair nat T n t0) lf4).
Lemma candidate_187: forall {T} (n : nat) (t0 : T) (lf4 : list (prod nat T)), @eq (list (prod nat T)) (@cons (prod nat T) (@pair nat T n t0) lf4)   (@cons (prod nat T) (@pair nat T O t0) lf4).
Lemma candidate_188: forall {T} (n : nat) (t0 : T), @eq (prod nat T) (@pair nat T n t0) (@pair nat T n t0).
Lemma candidate_189: forall {T} (n : nat) (t0 : T), @eq (prod nat T) (@pair nat T n t0) (@pair nat T O t0).
Lemma candidate_190: forall {T} (n : nat) (t0 : T), @eq (prod nat T) (@pair nat T n t0) (@pair nat T n t0).
Lemma candidate_191: forall {T} (n : nat) (t0 : T), @eq (prod nat T) (@pair nat T n t0) (@pair nat T O t0).

<---FILTERED CANDIDATE LEMMAS--->
Time elapsed: 498 seconds
Duplicates removed: 96
Filtered by Quickchick: 90
Filtered by script: 4
Remaining: 1

Lemmas: 
Lemma candidate_1: forall {T} (n : nat) (l : list (prod nat T)) (x1 : nat) (t0 : T) (v : T), not (not (@eq nat n x1)) \/ (@eq (list (prod nat T))   (@cons (prod nat T) (@pair nat T n t0) (@update_helper T x1 v l))   (@update_helper T x1 v (@cons (prod nat T) (@pair nat T n t0) l))).